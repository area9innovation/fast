import plow/backends/back_ast;

export {

	// The general info about a backend.
	BackendSpec(
		keywords : Set<string>, // A set of target language keywords
		natives : Set<string>,  // A set of all supported natives
		onError : (int, string) -> void,
	);

	// Initializes a backend structure
	makeBackend(
		name : string,
		keywords : [string],
		generators : [BackGen],
	) -> Backend;

	// Makes a default BackendSpec
	makeBackendSpec(
		name : string,
		keywords : [string],
		natives : [string],
	) -> BackendSpec;
}

makeBackend(
		name : string,
		keywords : [string],
		generators : [BackGen]
) -> Backend {
	Backend(
		buildSet(keywords),
		fold(generators, makeTree(), \acc, gen : BackGen -> {
			// We expand short form for types
			fntype = switch (gen.type) {
				BTypeFunction(args, returnType): gen.type;
				default: {
					if (gen.type == bvoidType) bvoidType
					else BTypeFunction([gen.type, gen.type], gen.type)
				}
			};
			ngen = BackGen(gen with type = fntype);
			treePushToArrayValue(acc, gen.name, ngen)
		}),
		\pos, error -> {
			// TODO: Include position
			println(name + ": " + i2s(pos) + ": " + error);
		},
		ref makeSet()
	)
}

makeBackendSpec(
		name : string,
		keywords : [string],
		natives : [string],
	) -> BackendSpec {
	BackendSpec(
		buildSet(keywords),
		buildSet(natives),
		\pos, error -> {
			// TODO: Include position
			println(name + ": " + i2s(pos) + ": " + error);
		}
	)
}