import plow/backends/bprogram;

export {
	// This function converts names to short ones, avoiding keywords.
	// (for example "main" -> "$o2") or changes "keyword" to "keyword__" .
	renameBExpProgram(prog : BExpProgram, keywords : Set<string>) -> BExpProgram;
}

makeRenaming(names : [string], keywords : Set<string>) -> Tree<string, string> {
	foldi(names, makeTree(), \i, ac, name -> 
		setTree(ac, name, makeSmallId(i, keywords))
	);
}

renameId(id : string, renaming : Tree<string, string>) -> string {
	switch (lookupTree(renaming, id)) {
		Some(renamed): renamed;
		None(): {
			fail("unknown id '" + id + "' met during renaming. Must not happen.");
			id
		}
	}
}

renameDStruct(s : DStruct, type_renamings : Tree<string, string>, field_renamings : Tree<string, string>) -> DStruct {
	DStruct(s with 
		id = renameId(s.id, type_renamings),
		structArgs = map(s.structArgs, \arg -> 
			DStructArg(arg with id = renameId(arg.id, field_renamings))
		)
	);
}

renameDUnion(u : DUnion, type_renamings : Tree<string, string>) -> DUnion {
	DUnion(u with
		types = map(u.types, \tp -> 
			DTypeName(tp with id = renameId(tp.id, type_renamings))
		)
	);
}

renameBExpProgram(prog : BExpProgram, keywords : Set<string>) -> BExpProgram {
	type_renamings = makeRenaming(
		concat(getTreeKeys(prog.structs), getTreeKeys(prog.unions)), 
		keywords
	);
	field_renamings = makeRenaming(
		concatA(map(getTreeValues(prog.structs), \s -> map(s.structArgs, \arg -> arg.id))),
		keywords
	);
	vars_renamings = makeRenaming(
		map(prog.declarations, \decl -> decl.id), 
		keywords
	);
	BExpProgram(
		mapTree(prog.structs, \s ->
			renameDStruct(s, type_renamings, field_renamings)
		),
		mapTree(prog.unions, \u -> 
			renameDUnion(u, type_renamings)
		),
		map(prog.declarations, \decl -> 
			renameBExpDeclaration(decl, type_renamings, field_renamings, vars_renamings, keywords)
		)
	);
}

renameBExpDeclaration(
	decl : BExpDeclaration, 
	type_renamings : Tree<string, string>, 
	field_renamings : Tree<string, string>, 
	var_renamings : Tree<string, string>, 
	keywords : Set<string>
) -> BExpDeclaration {
	ren_ex = \e -> renameBExp(e, type_renamings, field_renamings, var_renamings, keywords);
	ren_tp = \t -> renameBType(t, type_renamings);
	switch (decl) {
		BGlobalVar(id, body, type):
			BGlobalVar(renameId(id, var_renamings), ren_ex(body), ren_tp(type));
		BExpFunction(id, args, body, type):
			BExpFunction(renameId(id, var_renamings), args, ren_ex(body), ren_tp(type));
		BExpNative(id, isio, type, nativeName, fallback):
			BExpNative(renameId(id, var_renamings), isio, ren_tp(type), nativeName, 
				maybeMap(fallback, \fb -> renameBExpDeclaration(fb, type_renamings, field_renamings, var_renamings, keywords))
			);
	}
}

renameBExp(e : BExp, 
	type_renamings : Tree<string, string>, 
	field_renamings : Tree<string, string>, 
	var_renamings : Tree<string, string>,
	keywords : Set<string>
) -> BExp {
	ren_tp = \tp -> renameBType(tp, type_renamings);
	ren_ex = \ex -> renameBExp(ex, type_renamings, field_renamings, var_renamings, keywords);
	ren_var = \var -> BVar(renameId(var.id, var_renamings), ren_tp(var.type));
	ren_struct = \str -> renameId(str, type_renamings);
	ren_field = \fld -> renameId(fld, field_renamings);
	switch (e) {
		BValue(): e;
		BVar(__,__): {
			ren_var(e);
		};
		BLet(id, val, body, type): {
			renamed = makeSmallId(sizeTree(var_renamings), keywords);
			BLet(
				renamed, 
				ren_ex(val), 
				renameBExp(body, type_renamings, field_renamings, setTree(var_renamings, id, renamed), keywords),
				ren_tp(type)
			);
		}
		BLambda(args, body, type): {
			n_vars = sizeTree(var_renamings);
			lambda_renamings = foldi(args, var_renamings, \i, acc, arg -> 
				setTree(acc, arg, makeSmallId(i + n_vars, keywords))
			);
			BLambda(
				map(args, \arg -> lookupTreeDef(lambda_renamings, arg, arg)), 
				renameBExp(body, type_renamings, field_renamings, lambda_renamings, keywords),
				ren_tp(type)
			);
		}
		BCall(fn, args, type): {
			BCall(ren_ex(fn), map(args, ren_ex), ren_tp(type));
		}
		BIf(cond, then, else_, type): {
			BIf(ren_ex(cond), ren_ex(then), ren_ex(else_), ren_tp(type));
		}
		BSequence(exps, type): {
			BSequence(map(exps, ren_ex), ren_tp(type));
		}
		BSwitch(val, s_tp, cases, def_case, type): {
			BSwitch(
				ren_var(val), ren_tp(s_tp), 
				map(cases, \case -> 
					BCase(ren_struct(case.id), ren_ex(case.body))
				),
				maybeMap(def_case, ren_ex), 
				ren_tp(type)
			);
		}
		BConstruct(struct, args, type): {
			BConstruct(
				ren_struct(struct),
				map(args, ren_ex), 
				ren_tp(type)
			);
		}
		BField(value, field, type): {
			BField(
				ren_ex(value), 
				ren_field(field), 
				ren_tp(type)
			);
		}
		BSetMutable(left, field, value, type): {
			BSetMutable(
				ren_ex(left), 
				ren_field(field), 
				ren_ex(value), 
				ren_tp(type)
			);
		}
		BArray(args, type): {
			BArray(map(args, ren_ex), ren_tp(type));
		}
	}
}

renameBType(t : BType, type_renamings : Tree<string, string>) -> BType {
	switch (t) {
		BTypePar(id): t;
		BTypeName(id, typars): {
			BTypeName(renameId(id, type_renamings), map(typars, \tp -> renameBType(tp, type_renamings)));
		}
		BTypeFunction(args, ret_type): {
			BTypeFunction(
				map(args, \a -> renameBType(a, type_renamings)), 
				renameBType(ret_type, type_renamings)
			);
		}
	}
}

small_identifier_chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
small_identifier_char_cnt = strlen(small_identifier_chars);

makeSmallId_(id : int) -> string {
	char = getCharAt(small_identifier_chars, id % small_identifier_char_cnt);
	remv = id / small_identifier_char_cnt;
	if (remv > 0) char + makeSmallId_(remv - 1) else char;
}

small_identifier_chars1 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
small_identifier_char1_cnt = strlen(small_identifier_chars1);

makeSmallId(id : int, keywords : Set<string>) -> string {
	char = getCharAt(small_identifier_chars1, id % small_identifier_char1_cnt);
	remv = id / small_identifier_char1_cnt;
	out = if (remv > 0) char + makeSmallId_(remv - 1) else char;

	if (containsSet(keywords, out)) out + "_" else out;
}
