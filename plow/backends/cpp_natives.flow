import plow/backends/backend;

export {
	cppBackend() -> Backend;
}

cppBackend() -> Backend {
	comparison = \name, target, prec -> {
		[
			BackGen(name, BTypeFunction([bTypeBool, bTypeBool], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bTypeInt, bTypeInt], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bTypeDouble, bTypeDouble], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bTypeString, bTypeString], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			// TODO: We need something fancy for other types here
		]
	};

	makeBackend("cpp", [
			// Keywords
			"alignas", "alignof", "and", "and_eq", "asm", "atomic_cancel", "atomic_commit", 
			"atomic_noexcept", "auto", "bitand", "bitor", "bool", "break", "case", "catch", 
			"char", "char8_t", "char16_t", "char32_t", "class", "compl", "concept", "const", 
			"consteval", "constexpr", "constinit", "const_cast", "continue", "co_await", 
			"co_return", "co_yield", "decltype", "default", "delete", "do", "double", 
			"dynamic_cast", "else", "enum", "explicit", "export", "extern", "false", "float", 
			"for", "friend", "goto", "if", "inline", "int", "long", "mutable", "namespace", 
			"new", "noexcept", "not", "not_eq", "nullptr", "operator", "or", "or_eq", "private", 
			"protected", "public", "reflexpr", "register", "reinterpret_cast", "requires", 
			"return", "short", "signed", "sizeof", "static", "static_assert", "static_cast", 
			"struct", "switch", "synchronized", "template", "this", "thread_local", "throw", 
			"true", "try", "typedef", "typeid", "typename", "union", "unsigned", "using", 
			"virtual", "void", "volatile", "wchar_t", "while", "xor", "xor_eq",
			// Used by the code gen
			"R_", 
		], 

		//
		// Inlined operators
		//
		concatA([

		// In C++, there is ? here for if

		[
			BackGen("||", bTypeBool, BackBinOp("||", 10, BackArg(0), BackArg(1))),
			BackGen("&&", bTypeBool, BackBinOp("&&", 20, BackArg(0), BackArg(1))),
		],

		//	BackBinOp("|", 25, BackArg(0), BackArg(1)),
		//	BackBinOp("^", 26, BackArg(0), BackArg(1)),
		// 	BackBinOp("^", 27, BackArg(0), BackArg(1)),

		comparison("==", "===", 30),
		comparison("!=", "!==", 30),

		comparison("<=", "<=", 35),
		comparison("<", "<", 35),
		comparison(">=", ">=", 35),
		comparison(">", ">", 35),

		// In C++, we have bitshifts here <<, >>, >>>

		[
			BackGen("+", bTypeInt, BackBinOp("+", 40, BackArg(0), BackArg(1))),
			BackGen("+", bTypeDouble, BackBinOp("+", 40, BackArg(0), BackArg(1))),
			BackGen("+", bTypeString, BackBinOp("+", 40, BackArg(0), BackArg(1))),

			BackGen("-", bTypeInt, BackBinOp("-", 40, BackArg(0), BackArg(1))),
			BackGen("-", bTypeDouble, BackBinOp("-", 40, BackArg(0), BackArg(1))),

			BackGen("*", bTypeInt, BackBinOp("*", 50, BackArg(0), BackArg(1))),
			BackGen("*", bTypeDouble, BackBinOp("*", 50, BackArg(0), BackArg(1))),

			BackGen("/", bTypeInt, BackBinOp("/", 50, BackArg(0), BackArg(1))),
			BackGen("/", bTypeDouble, BackBinOp("/", 50, BackArg(0), BackArg(1))),

			BackGen("%", bTypeInt, BackBinOp("%", 50, BackArg(0), BackArg(1))),
			BackGen("%", bTypeDouble, BackBinOp("%", 50, BackArg(0), BackArg(1))),

			BackGen("__negate", BTypeFunction([bTypeInt], bTypeInt), BackPreOp("-", 60, BackArg(0))),
			BackGen("__negate", BTypeFunction([bTypeDouble], bTypeDouble), BackPreOp("-", 60, BackArg(0))),
			BackGen("__not", bTypeVoid, BackPreOp("!", 60, BackArg(0))),

			// Cast and type is ignored
			// BackGen(":", bTypeVoid, BackArg(0)),

			BackGen("__ref", bTypeVoid, 
				BackRequire(
					BackText("include <memory>"),
					BackCall("std::make_shared<auto>", [BackArg(0)]) // Add type here
				)
			),
			BackGen("__deref", bTypeVoid, BackPreOp("*", 60, BackArg(0))),
			BackGen(":=", bTypeVoid, BackBinOp("=", 70, BackArg(0), BackArg(1))),

			BackGen("[", bTypeVoid, BackConcat([BackText("["), BackArg(0), BackText("]")])),
			BackGen(",", bTypeVoid, BackBinOp(",", 80, BackArg(0), BackArg(1))),
			BackGen("__index", bTypeVoid, BackConcat([BackBinOp("[", 80, BackArg(0), BackArg(1)), BackText("]")])),

			BackGen(".", bTypeVoid, BackBinOp(".", 60, BackArg(0), BackUnquote(BackArg(1)))),

/*
			BackGen("Native.println", bTypeVoid, BackText("cout <<")),

			BackGen("Native.fold", bTypeVoid, BackText("function(values,init,fn){for(var i=0;i<values.length;i++){init=fn(init,values[i]);}return init;}")),
			BackGen("Native.map", bTypeVoid, BackText("function(a,fn){return a.map(fn);}")),
			BackGen("Native.filter", bTypeVoid, BackText("function(a,fn){return a.filter(fn);}")),
			BackGen("Native.enumFromTo", bTypeVoid, BackText("function(init,n){var r=[];for(var i=init;i<=n;i++){r.push(i);}return r;}")),
			BackGen("Native.length", bTypeVoid, BackText("function(a){return a.length;}")),

			BackGen("Native.isSameStructType", bTypeVoid, BackText("function(a,b){return Object.prototype.hasOwnProperty.call(a,'_id')&&Object.prototype.hasOwnProperty.call(b,'_id')&&a._id==b._id}")),

			BackGen("Native.quit", bTypeVoid, 
				BackIfDef("browser",
					BackText("function(c) {window.open('','_top').close();}"),
					BackText("function(c) {}")
				)
			),
			BackGen("Native.sin", bTypeVoid, BackText("Math.sin")),
			BackGen("Native.asin", bTypeVoid, BackText("Math.asin")),
			BackGen("Native.cos", bTypeVoid, BackText("Math.cos")),
			BackGen("Native.acos", bTypeVoid, BackText("Math.acos")),
			BackGen("Native.atan", bTypeVoid, BackText("Math.atan")),
			BackGen("Native.atan2", bTypeVoid, BackText("Math.atan2")),
			BackGen("Native.exp", bTypeVoid, BackText("Math.exp")),
			BackGen("Native.log", bTypeVoid, BackText("Math.log")),
			// d->i
			BackGen("Native.trunc", bTypeVoid, BackText("function(d){return (d)|0;}")),
			BackGen("Native.i2d", bTypeVoid, BackText("function(i){return i;}")),
			BackGen("Native.i2s", bTypeVoid, BackText("function(i){return String(i);}")),
			BackGen("Native.d2s", bTypeVoid, BackText("function(d){return String(d);}")),
			BackGen("Native.bitXor", bTypeVoid, BackText("function(a,b){return a^b;}")),
			BackGen("Native.bitAnd", bTypeVoid, BackText("function(a,b){return a&b;}")),
			BackGen("Native.bitOr", bTypeVoid, BackText("function(a,b){return a|b;}")),
			BackGen("Native.bitUshr", bTypeVoid, BackText("function(a,b){return a>>>b;}")),
			BackGen("Native.bitShl", bTypeVoid, BackText("function(a,b){return a<<b;}")),
			BackGen("Native.bitNot", bTypeVoid, BackText("function(a){return ~a;}")),

			BackGen("Native.strlen", bTypeVoid, BackText("function(s){return s.length;}")),
			BackGen("Native.strIndexOf", bTypeVoid, BackText("function(str,substr) {return str.indexOf(substr,0);}")),

			BackGen("Native.substring", bTypeVoid, 
				// It turns out that Chrome does NOT copy strings out when doing substring,
				// and thus we never free the original string
				BackText("function(str,start,len){
					var s = str.slice(start,start+len);
					if (2 * s.length < str.length){return (' '+s).slice(1);} else return s;
				}")
			),
			BackGen("Native.cloneString", bTypeVoid, BackText("function(s){return (' '+s).slice(1);}")),

			BackGen("Native.getCharCodeAt", bTypeVoid, BackText("function(s,i){return s.charCodeAt(i);}")),
			BackGen("Native.getCharAt", bTypeVoid, BackText("function(s,i){return s.charAt(i);}")),
*/
		]
		]),
	);
}
