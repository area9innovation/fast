import plow/backends/bprogram;
import plow/bexp/type;
import plow/bexp/bmodule;
import plow/bexp/utils;
import plow/dexp/utils;

import ds/arrayutils;

export {
	bmodules2BExpProgram(modules : [BModule]) -> BExpProgram;

	bexpProgram2BProgram(b : BExpProgram) -> BProgram;

	// For use in backends, when expressions need a statement
	bexp2BReturn(b : BExp) -> BStatement;

	bexp2BStatement(decl : string, fnargs : [string], hasTailcall : ref bool, tailcall : bool, b : BExp) -> BStatement;

	bstatementType(b : BStatement) -> BType;
}

bmodules2BExpProgram(modules : [BModule]) -> BExpProgram {
	names = bmodules2BNames(modules);
	alive = aliveCode(names);
	BExpProgram(
		filterTree(names.structs, \id, __ -> containsSet(alive, id)),
		filterTree(names.unions, \id, __ -> containsSet(alive, id)),
		fold(modules, [], \acc, module -> {
			fold(module.order, 
				foldTree(module.natives, acc, \id, nat, ac -> 
					if (!containsSet(alive, id)) ac else {
						// Look for a fallback
						mfallback = lookupTree(module.globals, id);
						concat(ac, 
							[BExpNative(id, nat.isIo, nat.type, nat.name,
								maybeMap(mfallback, \glob : BGlobal -> bexp2BExpDeclaration(id, glob.value))
							)]
						);
					}
				),
				\ac, id -> {
				if (!containsSet(alive, id)) ac else {
					switch (lookupTree(module.globals, id)) {
						Some(decl): concat(ac, [bexp2BExpDeclaration(id, decl.value)]);
						None(): {
							println("Unknown id: '" + id + "'");
							ac;
						}
					}
				}
			})
		})
	);
}

BNames(
	structs : Tree<string, DStruct>,
	unions : Tree<string, DUnion>,
	natives : Tree<string, BNative>,
	globals : Tree<string, BGlobal>
);

bmodules2BNames(modules : [BModule]) -> BNames {
	fold(modules, BNames(makeTree(), makeTree(), makeTree(), makeTree()), \acc, m ->
		BNames(
			mergeTree(acc.structs, m.structs),
			mergeTree(acc.unions, m.unions),
			mergeTree(acc.natives, m.natives),
			mergeTree(acc.globals, m.globals),
		)
	);
}

UsedCodeAcc(
	queue : Set<string>, 
	used : Set<string>
);

aliveCode(names : BNames) -> Set<string> {
	findUsed(names, UsedCodeAcc(
		makeSet1("main"), 
		buildSet([
			"bool", "void", "int", "double", "string", 
			"flow", "ref", "array", "__negate", "__index",
			"<", "<=", "==", ">", ">=", ":=", "::=",
			"+", "-", "*", "/", "%", "&&", "||", "!",
			"__deref", "__ref", "__not", "__array",
		])
	)).used;
}

findUsed(names : BNames, acc : UsedCodeAcc) -> UsedCodeAcc {
	switch (popMinSet(acc.queue)) {
		None(): acc;
		Some(pop): {
			name = pop.value;
			findUsed(names, findUsedIn(names, UsedCodeAcc(pop.rest, acc.used), name));
		}
	}
}

findUsedIn(names : BNames, acc : UsedCodeAcc, name : string) -> UsedCodeAcc {
	proc_glob = \bglob : BGlobal -> {
		used = insertSet(acc.used, name);
		referenced = extractTypeNamesBExp(
			extractFreeNamesBExp(makeSet(), makeSet(), bglob.value),
			bglob.value
		);
		new = differenceSets(referenced, used);
		UsedCodeAcc(
			mergeSets(acc.queue, new), 
			mergeSets(used, new)
		);
	}
	proc_struct = \su -> {
		used = insertSet(acc.used, name);
		referenced = extractTypeNamesDStruct(makeSet(), su, names.structs, names.unions);
		new = differenceSets(referenced, used);
		UsedCodeAcc(
			mergeSets(acc.queue, new), 
			mergeSets(used, new)
		);
	}
	proc_union = \su -> {
		used = insertSet(acc.used, name);
		referenced = extractTypeNamesDUnion(makeSet(), su, names.structs, names.unions);
		new = differenceSets(referenced, used);
		UsedCodeAcc(
			mergeSets(acc.queue, new), 
			mergeSets(used, new)
		);
	}
	switch (lookupTree(names.globals, name)) {
		Some(glob): proc_glob(glob);
		None(): {
			switch (lookupTree(names.structs, name)) {
				Some(struct): proc_struct(struct);
				None(): {
					switch (lookupTree(names.unions, name)) {
						Some(union): proc_union(union);
						None(): {
							if (!containsKeyTree(names.natives, name)) {
								println("WARNING: Something is wrong with DCE: Could not find '" + name + "'");
							}
							acc;
						}
					}
				}
			}
		}
	}
}

bexpProgram2BProgram(b : BExpProgram) -> BProgram {
	BProgram(
		b.structs, b.unions,
		map(b.declarations, bexpDeclaration2Declaration)
	);
}

bexpDeclaration2Declaration(be : BExpDeclaration) -> BDeclaration {
	switch (be) {
		BGlobalVar(name, body, type): be;
		BExpFunction(name, args, body, type): {
			hasTailcall = ref false;
			bbody = bexp2BStatement(name, args, hasTailcall, true, body);
			BStatFunction(
				name, args, bbody,
				^hasTailcall,
				type
			);
		}
		BExpNative(name, isio, type, nativeName, fallback): {
			sfallback : Maybe<BDeclaration> = fallback ?? {
				Some(bexpDeclaration2Declaration(fallback))
			} : None();
			BNativeDec(name, isio, type, nativeName, sfallback)
		}
	}
}

bexp2BExpDeclaration(declid : string, b : BExp) -> BExpDeclaration {
	var = \ -> {
		BGlobalVar(declid, b, getBType(b));
	};
	switch (b) {
		BValue(): var();
		BVar(__, __): var();
		BLet(__, __, __, __): var();
		BLambda(args, body, type): {
			BExpFunction(
				declid, args, body,
				type
			);
		}
		BCall(fn, args, type): var();
		BIf(cond, then, else_, type): var();
		BSequence(exps, type): var();
		BSwitch(val, __, cases, __, type): var();
		BConstruct(struct, args, type): var();
		BField(value, field, type): var();
		BSetMutable(left, field, value, type): var();
		BArray(args, type): var();
	}
}

bexp2BStatement(decl : string, fnargs : [string], hasTailcall : ref bool, tailcall : bool, b : BExp) -> BStatement {
	switch (b : BExp) {
		/*BInt(value): {
			//if (type == BTypeName("void", [])) BReturnVoid() else 
			BReturn(b);
		}*/
		BValue(): BReturn(b);
		BVar(name, type): BReturn(b);
		BLet(name, value, body, type): {
			BLetStatement(name, value, bexp2BStatement(decl, fnargs, hasTailcall, tailcall, body));
		}
		BLambda(args, body, type): BReturn(b);
		BCall(fn, args, type): {
			if (tailcall) {
				switch (fn) {
					BVar(fname, __): if (fname == decl) {
						// Tail call
						// Filter out trivial arguments
						newArgs = foldi2(fnargs, [], [], \i, accnames, accvals, fnarg -> {
							val = args[i];
							def = \ -> {
								Pair(arrayPush(accnames, fnarg), arrayPush(accvals, val));
							};
							switch (val) {
								BVar(aname, __): {
									if (aname == fnarg) {
										// OK, no need for it
										Pair(accnames, accvals)
									} else {
										def();
									}
								}
								default: def();
							}
						});
						hasTailcall := true;
						BTailCall(decl, newArgs.first, newArgs.second, type);
					} else BReturn(b);
					default: BReturn(b);
				}
			} else BReturn(b);
		}
		BIf(cond, then, else_, type): {
			BIfStatement(cond, 
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall, then), 
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall, else_)
			);
		}
		BSequence(exps, type): {
			if (exps == []) BReturnVoid()
			else BSequenceStatement(mapi(exps, \i, e -> {
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall && i == length(exps) - 1, e)
			}));
		} 
		BSwitch(val, s_type, cases, def_case, type): {
			BSwitchStatement(val, map(cases, \case -> {
					BCaseStatement(case.id, 
						bexp2BStatement(decl, fnargs, hasTailcall, tailcall, case.body)
					)
				}), type
			);
		}
		BConstruct(struct, args, type):  {
			BReturn(b);
		}
		BField(value, field, type): {
			BReturn(b);
		}
		BSetMutable(left, field, value, type): {
			BSetMutableStatement(left, field, value);
		}
		BArray(args, type): {
			BReturn(b);
		}
	}
}

bexp2BReturn(b : BExp) -> BStatement {
	switch (b) {
		//BVoid(): 
		/*BInt(value): {
			//if (type == miniTypeVoid) BReturnVoid() else
			BReturn(b);
		}*/
		BValue(): BReturn(b);
		BVar(name, type): BReturn(b);
		BLet(name, value, body, type): {
			BLetStatement(name, value, bexp2BReturn(body));
		}
		BLambda(args, body, type): BReturn(b);
		BCall(fn, args, type): BReturn(b);
		BIf(cond, then, else_, type): BIfStatement(cond, bexp2BReturn(then), bexp2BReturn(else_));
		BSequence(exps, type): BSequenceStatement(map(exps, bexp2BReturn));
		BSwitch(val, __, cases, __, type): 
			BSwitchStatement(val, map(cases, \case -> {
				BCaseStatement(case.id, bexp2BReturn(case.body))
			}), type);
		BConstruct(struct, args, type): {
			BReturn(b);
		}
		BField(value, field, type): {
			BReturn(b);
		}
		BSetMutable(left, field, value, type): {
			BSetMutableStatement(left, field, value);
		}
		BArray(args, type): {
			BReturn(b);
		}
	}
}

bstatementType(b : BStatement) -> BType {
	switch (b) {
		BIfStatement(cond, then, else_): bstatementType(then);
		BLetStatement(name, value, body): bstatementType(body);
		BReturnVoid(): bvoidType;
		BReturn(val): getBType(val);
		BTailCall(fn, args, values, type): type;
		BSequenceStatement(statements): {
			bstatementType(lastElement(statements, BReturnVoid()));
		}
		BSwitchStatement(expr, cases, type): type;
		BSetMutableStatement(left, field, value): getBType(value);
	}
}
