import plow/backends/shorten_ids;
import plow/backends/bprogram_lower;
import plow/driver;

export {
	linkBExpProgram(cache : PlowCache, flowpath : string, shorten_ids : bool, keywords : Set<string>) -> BExpProgram;
	linkBProgram(cache : PlowCache, flowpath : string, shorten_ids : bool, keywords : Set<string>) -> BProgram;
}

linkBExpProgram(cache : PlowCache, flowpath : string, shorten_ids : bool, keywords : Set<string>) -> BExpProgram {
	modules = list2array(programBModules(cache, flowpath, makeList(), makeSet()).first);
	if (shorten_ids) {
		shortenIdsBExpProgram(bmodules2BExpProgram(modules), keywords);
	} else {
		bmodules2BExpProgram(modules);
	}
}

linkBProgram(cache : PlowCache, flowpath : string, shorten_ids : bool, keywords : Set<string>) -> BProgram {
	bexp_program = linkBExpProgram(cache, flowpath, shorten_ids, keywords);
	bexpProgram2BProgram(bexp_program);
}

programBModules(cache : PlowCache, file : string, acc : List<BModule>, visited : Set<string>) -> Pair<List<BModule>, Set<string>> {
	module = getCachedBModule(cache.modules, file);
	imported_visited = fold(module.imports, Pair(acc, insertSet(visited, file)), \ac, imp -> {
		if (containsSet(ac.second, imp.path)) ac else {
			programBModules(cache, imp.path, ac.first, ac.second)
		}
	});
	Pair(Cons(module, imported_visited.first), imported_visited.second);
}

mergeBModules(b1 : BModule, b2 : BModule) -> BModule {
	BModule("", "", [], [],
		DExport(
			mergeSets(b1.exported.exportedTypeNames, b2.exported.exportedTypeNames),
			mergeSets(b1.exported.exportedTypes, b2.exported.exportedTypes),
			mergeSets(b1.exported.exportedGlobals, b2.exported.exportedGlobals), -1
		),
		mergeTree(b1.structs, b2.structs),
		mergeTree(b1.unions, b2.unions),
		mergeTree(b1.fields, b2.fields),
		mergeTree(b1.natives, b2.natives),
		mergeTree(b1.globals, b2.globals),
		concat(b1.order, b2.order)
	);
}
