import plow/backends/js/js_defines;
import fs/filesystem;

export {
	// Function simply mangles all natives, collected in a program.
	// It is required for calling Haxe DCE.
	fiMangleNativeNames(cfg : JsConfig, native_names : [string], add_class : (string) -> void) -> [string];

	// Mangle a single name.
	fiJsMangleNativeName(name : string, add_class : (string) -> void) -> string;
	
	// Report errors if any at saving.
	saveFileContent(filename : string, content : string) -> void;

	// Makes a default JS config for a given file.
	makeJsConfig(flowfile : string) -> JsConfig;

	// List of functions, which should survive with DCE of Haxe.
	fiHaxeDCESurvivors = [
		"RenderSupport","HaxeRuntime.compareByValue","HaxeRuntime.mul_32",
		"HaxeRuntime.initStruct","HaxeRuntime._structnames_","FlowJsProgram.globals__"
	];
}

fiMangleNativeNames(cfg : JsConfig, native_names : [string], add_class : (string) -> void) -> [string] {
	map(native_names, \native_name ->
		fiJsMangleNativeName(native_name, 
			if (containsSet(cfg.externNatives, native_name)) nop1 else add_class
		)
	);
}

fiJsMangleNativeName(name : string, add_class : (string) -> void) {
	parts = strSplit(name, ".");
	// Some names, like Native and RenderSupport need a gentle extra renaming to avoid colliding
	// with other implementations of these natives
	class = parts[0];
	add_class(class);
	renamed = class + "." + parts[1];
	if (renamed == "Native.length") "Native.length__" else renamed;
}

saveFileContent(filename : string, content : string) -> void {
	if (!setFileContent(filename, content)) {
		println("Could not save " + filename);
	}
}

makeJsConfig(flowfile : string) -> JsConfig {
	JsConfig(flowfile, 
		changeFileExt(flowfile, ".js"),
		[], //includes : [string],
		0, //jsmode : int, 0 - standard JS, 1 - standard ES6, 2 - nodejs, 3 - NW.js, 4 - TypeScript
		false, // webmodule : bool, Node.js server functionality
		makeSet(), // jslibrary : Set<string>, Set of names we should export in the global JS namespace
		"", // jslibraryObject : string, Name of an object to keep all names we export in the library
		"", // modules : string, Generate JS modules
		false, // comments : bool, Inject comments into generated code
		false, // code : bool, Do not remove generated code_*.js files (debug)
		false, // beautify : bool, Call js-beautify before exit
		false, // sourcemap : bool, Generate js source map before exit
		false, // compress : bool,
		true, // haxeRuntime : bool,
		"", // fontconfig : string,
		false, //debug : bool,
		0,  // verbose : int,
		false, //readable : bool,
		tsProcessing_dummy, //tsProcess : TypeScriptProcessing,
		true, // callMain : bool,
		false, // keepDebugNewlines : bool,
		"", // externLib : string, The path to the external JS file with natives. Is inlined into the final assembled JS code.
		makeSet(), // externNatives : Set<string>, Names from the external natives lib.
	);
} 