import plow/pexp/parse;

import plow/lookup;

import plow/dexp/dexp;
import plow/dexp/desugar;
import plow/dexp/pretty;

import plow/types/typeinference;

import plow/bexp/dmodule2bmodule;
import plow/bexp/pretty;

import fast/fast_path;

export {
	// Constructs a compilation cache
	makePlowCache(
		// How to report an error
		onError : (string) -> void,
		// The includes we should use to find files
		includes : [string]
	) -> PlowCache;

	// Parse and desugar a file, and all the transitive imports
	compilePlow(cache : PlowCache, file : string) -> BModule;
}

PlowCache(
	// How to report an error
	onError : (string) -> void,
	// The includes we should use to find files
	includes : [string], 
	// Map of the Modules we have already parsed and desugared
	modules : BModules,
	// What is the next id
	nextId : ref int,
);

makePlowCache(
	// How to report an error
	onError : (string) -> void,
	// The includes we should use to find files
	includes : [string]
) -> PlowCache {
	PlowCache(onError, includes, makeBModules(), ref 0);
}

compilePlow(cache : PlowCache, file : string) -> BModule {
	path = fastPath2path(cache.includes, changeFileExt(file, ".flow"));
	flowpath = path2fastPath(cache.includes, path);

	if (hasCachedBModule(cache.modules, flowpath)) {
		getCachedBModule(cache.modules, flowpath);
	} else if (fileExists(path)) {
		// OK, we have to parse this
		code = getFileContent(path);

		p = parsePExp(code, \e -> cache.onError(path + ":" + e));
		println("Parsed " + file + " as " + path);

		// OK, parse all the dependent files
		imports = getDImports(p);
		mods = concurrent(false, map(imports, \i -> {
			\ -> compilePlow(cache, i.path)
		}));

		// A helper to lookup structs. TODO: Should this be in the plowcache?
		structLookup = BLookupFromImport(\module, n -> {
				lookupTree(module.structs, n)
			}, \module, n -> {
				containsSet(module.exported.exportedTypes, n)
			},
			\spath, struct, error -> {
				makeOnError(spath, cache.onError)(struct.pos, error)
			},
			ref makeTree(), ref makeSet()
		);

		// A helper to lookup unions. TODO: Should this be in the plowcache?
		unionLookup = BLookupFromImport(\module, n -> {
				lookupTree(module.unions, n)
			}, 
			\module, n -> {
				containsSet(module.exported.exportedTypes, n)
			},
			\upath, struct, error -> {
				makeOnError(upath, cache.onError)(struct.pos, error)
			},
			ref makeTree(), ref makeSet()
		);

		dd = makeDDesugar(path, cache, \n -> {
				// OK, scan our imports for this struct
				lookupFromImport(cache.modules, structLookup, imports, n)
			}, \n -> {
				// OK, scan our imports for this struct
				lookupFromImport(cache.modules, unionLookup, imports, n)
			});

		dmod = desugarPExp(dd, flowpath, path, p);

		tenv1 = TTypeEnv(
			makeTTypeEnv() with
			mkTyvar = dd.mkTyvar,
			onError = \tv, error -> {
				pos = 0;
				dd.onError(pos, "TODO: Find pos for " + i2s(tv) + ": " + error);
			},
			resolveId = \id -> {
				println("TODO: Find type of " + id);
				TTypeVar(dd.mkTyvar());
			},
		);
		tenv = ttypeInference(tenv1, dmod);

		benv = BExpEnv(tenv.egraph, tenv.etypes);
		bmodule = dmodule2bmodule(benv, dmod);

		setCachedBModule(cache.modules, flowpath, bmodule);

		if (false) {
			println("DModule:");
			prettyDModule(dmod);
		}

		println("\nTyped module:");
		println(prettyBModule(bmodule));

		bmodule;
	} else {
		cache.onError(file + " could not be found");
		getDummyBModule();
	}
}

makeDDesugar(path : string, cache : PlowCache, 
		resolveStructName : (string) -> Maybe<DStruct>,
		resolveUnionName : (string) -> Maybe<DUnion>) -> DDesugar {
	tyvarId = ref 0;
	DDesugar(resolveStructName, resolveUnionName, 
		makeOnError(path, cache.onError), 
		cache.nextId,
		\ -> {
			atomicRefIntAddition(tyvarId, 1);
			^tyvarId;
		}
	);
}

makeOnError(file : string, onError : (string) -> void) -> (int, string) -> void {
	resolver = ref None();
	\pos, error -> {
		res = onlyOnce(resolver, \ -> {
			text = getFileContent(file);
			makeLineResolver(text);
		});
		linecol = findLine(res, pos); // maxi
		onError(
			file + ":" + i2s(linecol.lineno) + ":" + i2s(linecol.column) + ": " + error
			+ "\n" + linecol.line
			+ "\n" + lpad("^", " ", linecol.lineIndex - 1)
		);
	}
}
