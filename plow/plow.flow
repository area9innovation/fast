import plow/backends/js/js;
import plow/pexp/parse;
import plow/pexp/pretty;
import plow/dexp/desugar;
import plow/dexp/pretty;
import plow/driver;
import fs/filesystem;
import math/stringmath;

main() {
	file0 = "plow/plow.flow";
	file6 = "plow/tests/";
	file = "plow/tests/type3.flow";
	file4  = "plow/tests/maybe.flow";
	file3  = "behaviour.flow";
	file1 = "c:/flow9/lib/formats/unicode/unidecode.flow";
	file2 = "c:\\lyceum/components/rhapsode_server/rhapsode_server/api/isams/import_data.flow";
	file5 = "mini/tests";

	includes = strSplit(getUrlParameter("I"), ",");
	allincludes = filter(concat([".", getFlowDir() + "/lib", getFlowDir()], includes), neq(""));
	verbose = isUrlParameterTrue("verbose");

	errors = ref 0;
	t = timestamp();

	process_file = \src_file -> {
		flow_file = path2fastPath(allincludes, src_file);
		if (verbose) {
			println("compiling file '" + src_file + "' (" + flow_file + ")");
		}
		cache = makePlowCache(\e -> {
			errors := ^errors + 1;
			println(e);
		}, allincludes);

		b = compilePlow(cache, flow_file);
		if (isUrlParameterTrue("js")) {
			buildJsTarget(cache, b, src_file);
		}
	}

	thefile = if (isUrlParameterTrue("flowc-tests")) {
		tests_dir = pathCombineMany(["tests", "with_main"]);
		if (verbose) {
			println("Going to run tests in '" + tests_dir + "'\n====================\n");
		}
		tests_dir;
	} else {
		getUrlParameterDef("file", file);
	}

	if (!isDirectory(thefile)) {
		process_file(thefile);
	} else {
		files = sort(filter(readDirectoryRecursively(thefile), \f -> endsWith(f, ".flow")));
		iter(files, process_file);
	};

	println(d2st((timestamp() - t) / 1000.0, 2) + "s");

	quit(0);
}

buildJsTarget(cache : PlowCache, b : BModule, src_file : string) -> void {
	verbose = isUrlParameterTrue("verbose");
	run_tests = isUrlParameterTrue("run-tests");
	if (verbose) {
		println("building JS target");
	}
	js_src = bmodule2js(cache, b.flowpath);
	js_file = changeFileExt(src_file, ".js");
	setFileContent(js_file, js_src);
	if (verbose) {
		println("JS target '" + js_file + "' is built.");
	}
	if (run_tests) {
		if (verbose) {
			println("Running test '" + js_file + "'");
		}
		exit_code = execSystemProcess("node", [js_file], ".", println, println);
		if (exit_code != 0 || verbose) {
			println("Test '" + js_file + "' " +
				(if (exit_code == 0) "PASSED" else  "FAILED with code: " + i2s(exit_code))
			);
		}
		if (!isUrlParameterTrue("leave-js")) {
			del_err = deleteFile(js_file);
			if (del_err != "") {
				println(del_err);
			}
		}
	}
	if (verbose) {
		println("\n-------------------\n");
	}
}