import plow/types/type;
import ds/array;

export {
	splitTType(t : TType) -> Pair<TType, [TType]>;
}

splitTType(t : TType) -> Pair<TType, [TType]> {
	switch (t) {
		TTypeName(id, typars): {
			Pair(TTypeName(id, []), typars);
		}
		TTypeEClass(id): Pair(t, []);
		TTypeFunction(args, returnType): {
			Pair(
				// Make sure we keep the arity
				TTypeFunction(map(args, \__ -> TTypeName("", [])), TTypeName("", [])), 
				arrayPush(args, returnType)
			);
		}
		TTypeOverload(typar, overloads): {
			Pair(
				TTypeOverload(typar, []),
				overloads
			)
		}
		TTypeSupertype(unique, subtypes, maxed): {
			Pair(
				TTypeSupertype(unique, [], maxed),
				subtypes
			)
		}
	}
}
