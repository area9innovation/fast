import ds/tree;
import plow/types/type;
import ds/egraph;
import plow/dexp/dexp;

export {
	TTypeEnv(
		// Map from type par to tyvar
		typars : Tree<string, int>,
		// Construct a new type var
		mkTyvar : () -> int,
		// Report an error associated with a given tyvar
		onError : (tyvar : int, error : string) -> void,

		// Get the type of an id
		resolveId : (string) -> TType,

		// Give all the typenames that have this field
		resolveField : (string) -> [TType],

		// Find the definition of this struct
		resolveStructName : (string) -> Maybe<DStruct>,

		// The types of local ids so far
		localTypes : Tree<string, TType>,

		// The egraph with the type equivalent classes
		egraph : EGraph<TType>,

		// When we start to extract equivalence classes
		etypes : ref Tree<int, TType>,
		// When we start to extract types
		tyvars : ref Tree<int, TType>,
	);

	makeTTypeEnv() -> TTypeEnv;
}

makeTTypeEnv() -> TTypeEnv {
	TTypeEnv(
		makeTree(), \ -> 0, 
		\tv, error -> println(error), 
		\id -> {
			println("TODO: Find the type of var '" + id + "'");
			TTypeName("ERROR", [])
		},
		\field -> {
			println("TODO: Find the types that have field '" + field + "'");
			[];
		},
		\struct -> {
			println("TODO: Find the struct type '" + struct + "'");
			None();
		},
		makeTree(), makeEGraph(splitTType), ref makeTree(), ref makeTree()
	);
}

splitTType(t : TType) -> Pair<TType, [TType]> {
	switch (t) {
		TTypeName(id, typars): Pair(TTypeName(id, []), typars);
		TTypeVar(id): Pair(t, []);
		TTypeFunction(args, returnType): {
			Pair(
				// Make sure we keep the arity
				TTypeFunction(map(args, \__ -> TTypeName("", [])), TTypeName("", [])), 
				arrayPush(args, returnType)
			);
		}
		TTypeOverload(typar, overloads): {
			Pair(
				TTypeOverload(typar, []),
				overloads
			)
		}
		TTypeSupertype(typar, subtypes): {
			Pair(
				TTypeOverload(typar, []),
				subtypes
			)
		}
	}
}
