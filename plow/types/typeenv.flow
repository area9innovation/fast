import ds/tree;
import plow/types/type;
import plow/types/ugraph/ugraph;
import plow/dexp/dexp;
import plow/tracing;

export {
	TTypeEnv(
		// Map from type par to eclass
		typars : Tree<string, int>,
		// Construct a new type eclass
		mkEClass : () -> int,
		// Make a unique id
		mkUnique : () -> int,
		// Report an error associated with a given position
		onError : (pos : int, error : string) -> void,

		// Get the type of an id (not a type, but global)
		resolveId : (pos : int, string) -> TType,

		// Give all the typenames that have this field
		resolveField : (string) -> [DStruct],

		// Find the definition of this struct
		resolveStructName : (string) -> Maybe<DStruct>,

		// Find the definition of this union
		resolveUnionName : (string) -> Maybe<DUnion>,

		// Find the supertypes of this type. Not transitive
		resolveSupertypes : (string) -> [string],

		// Find the subtypes of this type
		resolveSubtypes : (string) -> [string],

		// The types of module-level ids. These need instantiation
		moduleTypes : Tree<string, TType>,

		// The types of local ids so far, instantiated
		localTypes : Tree<string, TType>,

		// The egraph with the type equivalent classes
		tgraph : TypeGraph,

		// When we are unifying, we keep the visited classes here
		visited : ref Set<int>,

		// When we start to extract equivalence classes
		etypes : Tree<int, TType>,

		// For debugging
		tracing : Tracing,
	);

	makeTTypeEnv(tgraph : TypeGraph) -> TTypeEnv;
}

makeTTypeEnv(tgraph : TypeGraph) -> TTypeEnv {
	unique = ref 0;
	TTypeEnv(
		makeTree(), \ -> {
			emptyTTypeClass(tgraph)
		}, 
		\ -> {
			u = ^unique;
			unique := u + 1;
			u;
		},
		\pos, error -> println(error), 
		\pos, id -> {
			println("TODO: Find the type of var '" + id + "'");
			TTypeName("ERROR: Find type of var " + id, [])
		},
		\field -> {
			println("TODO: Find the types that have field '" + field + "'");
			[];
		},
		\struct -> {
			println("TODO: Find the struct type '" + struct + "'");
			None();
		},
		\union -> {
			println("TODO: Find the union type '" + union + "'");
			None();
		},
		\tn -> {
			println("TODO: Find supertypes of " + tn);
			[]
		},
		\tn -> {
			println("TODO: Find subtypes of " + tn);
			[]
		},
		makeTree(), makeTree(),
		tgraph, ref makeSet(), makeTree(),
		makeTracing(),
	);
}
