import plow/types/typeof;
import plow/dexp/pretty;
import plow/dexp/types;
import plow/types/unify;
import plow/types/builtin;
import plow/types/cost;
import plow/types/polymorphism;
import plow/types/util;

import ds/egraph_dot;
import ds/egraph_extract;

export {
	// Given a module, figure out what the types are
	ttypeInference(t : TTypeEnv, d : DModule) -> TTypeEnv;
}

ttypeInference(env : TTypeEnv, d : DModule) -> TTypeEnv {
	// Resolve the types of natives
	nenv = foldTree(d.natives, env, \nat, nativ, acc -> {
		type = dtype2ttype(env, false, nativ.type);
		unifyTType(env, type, TTypeVar(nativ.tyvar));
		TTypeEnv(acc with moduleTypes = setTree(acc.moduleTypes, nat, type))
	});

	// Set the type of top levels, so mutual recursion has something to bite on
	tenv = foldTree(d.globals, nenv, \id, global, acc -> {
		TTypeEnv(acc with moduleTypes = setTree(acc.moduleTypes, id, TTypeVar(global.tyvar)))
	});

	// Make a field map
	fields = makeDFieldMap(d.structs);
	supers = makeDSupers(d.unions);

	// Make sure we can find local structs
	senv = TTypeEnv(tenv with
		resolveStructName = \name -> {
			lstruct = lookupTree(d.structs, name);
			lstruct ?? {
				Some(lstruct)
			}: tenv.resolveStructName(name);
		},
		resolveUnionName = \name -> {
			lunion = lookupTree(d.unions, name);
			lunion ?? {
				Some(lunion)
			}: tenv.resolveUnionName(name);
		},
		resolveField = \name -> {
			structs = getTreeArrayValue(fields, name);
			istructs = filtermap(structs, \str -> {
				lookupTree(d.structs, str);
			});
			others = tenv.resolveField(name);
			concat(istructs, others);
		},
		resolveSupertypes = \name -> {
			concat(
				getTreeArrayValue(supers, name),
				tenv.resolveSupertypes(name)
			);
		}
	);

	// The handle all globals
	genv = fold(d.order, senv, \acc, id -> {
		mglobal = lookupTree(d.globals, id);
		mglobal ?? {
			ttypeInferenceDGlobal(acc, mglobal)
		} : {acc}
	});

	canonicalizeEGraph(genv.egraph);

	if (false) {
		dot = egraph2dot(env.egraph, ttypeENode2string);
		setFileContent("egraph-pre.dot", dot);
		{}
	}

	unifyEClasses(genv, 10);
}

// Structurally unify eclasses that have the same head
unifyEClasses(env : TTypeEnv, iterations : int) -> TTypeEnv {
	unify : ref [Pair<[int], [int]>] = ref [];
	iterEGraph(env.egraph, \root, nodes : Set<ENode<TType>> -> {
		if (sizeSet(nodes) >= 2) {
			unify := concat(^unify, unifyENodes(env, nodes));
		}
	});
	if (^unify == [] || iterations <= 0) {
		extractEClassTType(env, max(iterations, 5));
	} else {
		iter(^unify, \pairs : Pair<[int], [int]> -> {
			iteri(pairs.first, \i, class1 -> {
				unionEClass(env.egraph, class1, pairs.second[i]);
				{}
			})
		});
		canonicalizeEGraph(env.egraph);
		unifyEClasses(env, iterations - 1);
	}
}

// We know there are at least two nodes here
unifyENodes(env : TTypeEnv, nodes : Set<ENode<TType>>) -> [Pair<[int], [int]>] {
	heads : Tree<TType, [ENode<TType>]> = foldSet(nodes, makeTree(), \acc, node -> {
		treePushToArrayValue(acc, node.head, node);
	});
	foldTree(heads, [], \head, simnodes, acc -> {
		if (length(simnodes) > 1) {
			foldi(tail(simnodes), acc, \i, acc2, node -> {
				prev = simnodes[i];
				if (length(prev.args) == length(node.args)) {
					arrayPush(acc2, Pair(prev.args, node.args))
				} else {
					acc2;
				}
			})
		} else acc;
	});
}

// OK, based on the egraph we have, extract the "cheapest" types
extractEClassTType(env : TTypeEnv, iterations : int) -> TTypeEnv {
	// println("Cost based extraction:");
	types = extractEClassTypes(env);

	update = ref false;
	traverseInOrder(types, \eclass, type -> {
		nclass = addEExp(env.egraph, type);
		if (nclass != eclass) {
			// println("Added new type " + prettyTType(type) + " to " + i2s(eclass));
			finalClass = unionEClass(env.egraph, nclass, eclass);
			update := true;
		}
	});

	tenv = TTypeEnv(env with etypes = types);

	canonicalizeEGraph(env.egraph);
	if (iterations > 0 && ^update) {
		extractEClassTType(tenv, iterations - 1);
	} else {
		if (false) {
			println("Final Classes:");
			iteri(env.egraph.eclass.values, \i, value : ref Set<ENode<TType>> -> {
				root = env.egraph.eclass.parents[i];
				if (isEmptySet(^value)) {

				} else {
					println("Class " + i2s(i) + " -> " + i2s(^root) + " : " + superglue(set2array(^value), \e : ENode<TType>-> {
							ttypeENode2string(e) + "(" + superglue(e.args, i2s, ", ") + ")"
						}, ", ")
						+ " gave " + prettyTType(lookupTreeDef(env.etypes, i, TTypeName("ERROR", [])))
					);
				}
			});
		}
		if (true) {
			dot = egraph2dot(env.egraph, ttypeENode2string);
			setFileContent("egraph.dot", dot);
			{}
		}
		tenv;
	}
}

ttypeInferenceDGlobal(env : TTypeEnv, d : DGlobal) -> TTypeEnv {
	println("Inference of global " + d.id);

	// Instantiate the typars
	typars = fold(d.typars, makeTree(), \acc, tp -> {
		setTree(acc, tp, env.mkTyvar())
	});
	nenv = TTypeEnv(env with typars = typars);

	type = ttypeInferenceDExp(nenv, d.value);

	// Now, unify the typars and their corresponding tyvars, and abstract the final type again
	ftype = replaceTTypeVars(
		foldTree(typars, makeTree(), \tp, tv, acc -> {
			typar = TTypeName(tp, []);
			unifyTType(env, typar, TTypeVar(tv));
			setTree(acc, tv, TTypeName(tp, []))
		}),
		type
	);

	// println("Inference " + d.id + " is " + prettyTType(ftype));
	unifyTType(env, ftype, TTypeVar(d.tyvar));
	TTypeEnv(env with moduleTypes = setTree(env.moduleTypes, d.id, ftype));
}

inferenceIndent = ref "  ";

ttypeInferenceDExp(env : TTypeEnv, d : DExp) -> TType {
	if (true) {
		doTTypeInferenceDExp(env, d);
	} else {
		indent = ^inferenceIndent;
		if (true) {
			locals = getTreeKeys(env.localTypes);
			println(indent + "Locals " + toString(locals) + " for inference of");
			prettyDExp("", indent, d);
		}

		inferenceIndent := indent + "  ";
		t = doTTypeInferenceDExp(env, d);
		inferenceIndent := indent;

		println(indent + "gave " + prettyTType(t));
		t;
	}
}

doTTypeInferenceDExp(env : TTypeEnv, d : DExp) -> TType {
	restype = \tv, type -> {
		unifyTType(env, type, TTypeVar(tv));
		type;
	};
	switch (d) {
		DVoid(pos): TTypeName("void", []);
		DBool(v, pos): TTypeName("bool", []);
		DInt(v, pos): TTypeName("int", []); 
		DDouble(v, pos): TTypeName("double", []);
		DString(v, pos): TTypeName("string", []);
		DStringInclude(path, pos): TTypeName("string", []);
		DVar(id, pos, tyvar): {
			mtype = lookupTree(env.localTypes, id);
			type = mtype ?? {
				mtype
			} : {
				moptype = getBuiltinTType(id);
				switch (moptype) {
					None(): {
						modtype = lookupTree(env.moduleTypes, id);
						switch (modtype) {
							None(): env.resolveId(id);
							Some(mdtype): {
								itype = instantiateTTypePar(env, mdtype);
								// println(id + " = " + prettyTType(itype) + " from " + prettyTType(mdtype));
								itype;
							}
						}
					}
					Some(optype): {
						instantiateTTypePar(env, optype);
					}
				}
			};
			restype(tyvar, type);
		}
		DTyped(value, type, pos): {
			valtype = ttypeInferenceDExp(env, value);
			unifyTType(env, valtype, dtype2ttype(env, true, type));
			valtype;
		}
		DLet(id, value, body, pos, tyvar): {
			tvalue = ttypeInferenceDExp(env, value);
			nenv = TTypeEnv(env with localTypes = setTree(env.localTypes, id, tvalue));
			tbody = ttypeInferenceDExp(nenv, body);
			restype(tyvar, tbody);
		}
		DIf(cond, then, else_, pos, tyvar): {
			tcond = ttypeInferenceDExp(env, cond);
			unifyTType(env, tcond, TTypeName("bool", []));

			tthen = ttypeInferenceDExp(env, then);
			telse = ttypeInferenceDExp(env, else_);
			type = if (true) {
				unifyTType(env, tthen, telse);
				tthen
			} else makeTTypeSupertype(TTypeVar(tyvar), [tthen, telse]);
			restype(tyvar, type);
		}
		DCall(fn, args, pos, tyvar): {
			fntype1 = ttypeInferenceDExp(env, fn);
			argtypes = map(args, \a -> ttypeInferenceDExp(env, a));
			rettype = TTypeVar(env.mkTyvar());
			fntype2 = TTypeFunction(argtypes, rettype);

			unifyTType(env, fntype1, fntype2);

			restype(tyvar, rettype);
		}
		DConstruct(structid, args, pos, tyvar): {
			mstruct = env.resolveStructName(structid);
			mstruct ?? {
				argTypes = map(args, \arg -> {
					ttypeInferenceDExp(env, arg)
				});
				sttype = TTypeName(structid, argTypes);
				restype(tyvar, sttype);
			} : {
				env.onError(tyvar, "Unknown struct " + structid);
				TTypeVar(env.mkTyvar());
			}
		}
		DLambda(args, body, pos, tyvar): {
			argTypes = map(args, \arg -> {
				dtype2ttype(env, true, arg.type)
			});
			nenv = foldi(args, env, \i, acc, arg -> {
				TTypeEnv(acc with localTypes = setTree(acc.localTypes, arg.id, argTypes[i]))
			});
			retType = ttypeInferenceDExp(nenv, body);
			type = TTypeFunction(argTypes, retType);
			restype(tyvar, type);
		}
		DRef(value, pos, tyvar): {
			vtype = ttypeInferenceDExp(env, value);
			type = TTypeName("ref", [if (true) vtype else makeTTypeSupertype(TTypeVar(tyvar), [vtype])]);
			restype(tyvar, type);
		}
		DField(value, field, pos, tyvar): {
			// OK, this is an overload of all structs with a field
			tvalue = ttypeInferenceDExp(env, value);
			fieldStructs : [DStruct] = env.resolveField(field);

			fieldTypes = filtermap(fieldStructs, \struct : DStruct -> {
				mft = find(struct.structArgs, \sa -> sa.id == field);
				type : Maybe<TType> = maybeMap(mft, \ft -> {
					dtype2ttype(env, true, ft.type)
				});
				type
			});

			type = if (fieldTypes == []) {
				env.onError(tyvar, "Unknown field " + field);
				TTypeVar(env.mkTyvar());
			} else if (length(fieldTypes) == 1) {
				fieldTypes[0]
			} else TTypeOverload(TTypeVar(tyvar), buildSet(fieldTypes));
			restype(tyvar, type);
		}
		// DSetMutable(lhs, field, value, pos, tyvar): 
		DArray(exps, pos, tyvar): {
			vtypes = map(exps, \e -> {
				ttypeInferenceDExp(env, e);
			});
			type = TTypeName("array", [makeTTypeSupertype(TTypeVar(tyvar), vtypes)]);
			restype(tyvar, type);
		}
		DSequence(exps, pos, tyvar): {
			stype = fold(exps, voidTType, \acc, e -> {
				ttypeInferenceDExp(env, e);
			});
			restype(tyvar, stype);
		}
		DSwitch(value, type, cases, defaultCase, pos, tyvar): {
			tvalue = ttypeInferenceDExp(env, value);
			ttype = dtype2ttype(env, true, type);
			unifyTType(env, tvalue, ttype);

			caseTypes = map(cases, \c -> {
				ttypeInferenceDExp(env, c.body);
			});

			btypes = defaultCase ?? {
				arrayPush(caseTypes, ttypeInferenceDExp(env, defaultCase));
			} : {
				caseTypes
			};
			restype(tyvar, makeTTypeSupertype(TTypeVar(tyvar), btypes));
		}
		DCast(value, target, pos): {
			tvalue = ttypeInferenceDExp(env, value);
			ttarget = dtype2ttype(env, true, target);
			// We allow casting a type to a supertype
			unifyTType(env, makeTTypeSupertype(TTypeVar(env.mkTyvar()), [tvalue]), ttarget);
			ttarget;
		}
		DDowncast(var, subtype, scope, pos, tyvar): {
			tsubtype = dtype2ttype(env, true, subtype);
			nenv = TTypeEnv(env with localTypes = setTree(env.localTypes, var, tsubtype));
			dtype = ttypeInferenceDExp(nenv, scope);

			etype = lookupTree(env.localTypes, var);
			etype ?? {
				// Relate the subtype with the supertype
				unifyTType(env, makeTTypeSupertype(TTypeVar(tyvar), [etype, tsubtype]), etype);
			} : {}

			restype(tyvar, dtype);
		}
		// DWith(struct, value, fields, pos, tyvar): 
		default: {
			println("TODO: Infer the type of " + d.structname);
			TTypeVar(env.mkTyvar());
		}
	}
}
