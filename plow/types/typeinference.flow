import plow/types/typeof;
import plow/dexp/pretty;
import plow/types/unify;
import plow/types/builtin;
import plow/types/cost;
import plow/types/polymorphism;
import plow/types/util;

import ds/egraph_dot;
import ds/egraph_extract;

export {
	// Given a module, figure out what the types are
	ttypeInference(t : TTypeEnv, d : DModule) -> TTypeEnv;
}

ttypeInference(env : TTypeEnv, d : DModule) -> TTypeEnv {
	// Resolve the types of natives
	nenv = foldTree(d.natives, env, \nat, nativ, acc -> {
		type = dtype2ttype(env, nativ.type);
		unifyTType(env, type, TTypeVar(nativ.tyvar));
		TTypeEnv(acc with localTypes = setTree(acc.localTypes, nat, type))
	});

	// Set the type of top levels?

	// The handle all globals
	genv = fold(d.order, nenv, \acc, id -> {
		mglobal = lookupTree(d.globals, id);
		mglobal ?? {
			ttypeInferenceDGlobal(acc, mglobal)
		} : {acc}
	});

	canonicalizeEGraph(genv.egraph);
	extractEClassTType(genv, 10);
}

// OK, based on the egraph we have, extract the "cheapest" types
extractEClassTType(env : TTypeEnv, iterations : int) -> TTypeEnv {
	// println("Cost based extraction:");
	types = extractEClassTypes(env.egraph);

	update = ref false;
	traverseInOrder(types, \eclass, type -> {
		nclass = addEExp(env.egraph, type);
		if (nclass != eclass) {
			// println("Added new type " + prettyTType(type) + " to " + i2s(eclass));
			finalClass = unionEClass(env.egraph, nclass, eclass);
			update := true;
		}
	});

	tenv = TTypeEnv(env with etypes = types);

	canonicalizeEGraph(env.egraph);
	if (iterations > 0 && ^update) {
		extractEClassTType(tenv, iterations - 1);
	} else {
		if (false) {
			println("Final Classes:");
			iteri(env.egraph.eclass.values, \i, value : ref Set<ENode<TType>> -> {
				root = env.egraph.eclass.parents[i];
				println(i2s(i) + " -> " + i2s(^root) + " : " + superglue(set2array(^value), ttypeENode2string, ", "));
			});
			dot = egraph2dot(env.egraph, ttypeENode2string);
			setFileContent("egraph.dot", dot);
			{}
		}
		tenv;
	}
}

ttypeInferenceDGlobal(env : TTypeEnv, d : DGlobal) -> TTypeEnv {
	// println("Inference of global " + d.id);
	typars = fold(d.typars, makeTree(), \acc, tp -> {
		setTree(acc, tp, env.mkTyvar())
	});
	nenv = if (false) TTypeEnv(env with typars = typars) else env;
	if (d.recursive) {
		println("TODO: Handle recursive defs");
		type = ttypeInferenceDExp(nenv, d.value);
		TTypeEnv(env with localTypes = setTree(env.localTypes, d.id, type));
	} else {
		type = ttypeInferenceDExp(nenv, d.value);
		TTypeEnv(env with localTypes = setTree(env.localTypes, d.id, type));
	}
}

ttypeInferenceDExp(env : TTypeEnv, d : DExp) -> TType {
	restype = \tv, type -> {
		unifyTType(env, type, TTypeVar(tv));

		type;
	};
	if (false) {
		println("Locals:");
		traverseInOrder(env.localTypes, \var, t -> {
			println(var);
		})
		println("for inference of");
		prettyDExp("", "", d);
		println("");
	}
	switch (d) {
		DVoid(pos): TTypeName("void", []);
		DBool(v, pos): TTypeName("bool", []);
		DInt(v, pos): TTypeName("int", []); 
		DDouble(v, pos): TTypeName("double", []);
		DString(v, pos): TTypeName("string", []);
		DStringInclude(path, pos): TTypeName("string", []);
		DVar(id, pos, tyvar): {
			mtype = lookupTree(env.localTypes, id);
			type = mtype ?? {
				mtype
			} : {
				moptype = getBuiltinTType(id);
				switch (moptype) {
					None(): env.resolveId(id);
					Some(optype): {
						instantiateTTypePar(env, optype);
					}
				}
			};
			restype(tyvar, type);
		}
		DTyped(value, type, pos): {
			valtype = ttypeInferenceDExp(env, value);
			unifyTType(env, valtype, dtype2ttype(env, type));
			valtype;
		}
		DLet(id, value, body, pos, tyvar): {
			tvalue = ttypeInferenceDExp(env, value);
			nenv = TTypeEnv(env with localTypes = setTree(env.localTypes, id, tvalue));
			tbody = ttypeInferenceDExp(nenv, body);
			restype(tyvar, tbody);
		}
		DIf(cond, then, else_, pos, tyvar): {
			tcond = ttypeInferenceDExp(env, cond);
			unifyTType(env, tcond, TTypeName("bool", []));

			tthen = ttypeInferenceDExp(env, then);
			telse = ttypeInferenceDExp(env, else_);
			type = makeTTypeSupertype(TTypeVar(tyvar), [tthen, telse]);
			restype(tyvar, type);
		}
		DCall(fn, args, pos, tyvar): {
			fntype1 = ttypeInferenceDExp(env, fn);
			argtypes = map(args, \a -> ttypeInferenceDExp(env, a));
			rettype = TTypeVar(env.mkTyvar());
			fntype2 = TTypeFunction(argtypes, rettype);
			unifyTType(env, fntype1, fntype2);

			restype(tyvar, rettype);
		}
		DConstruct(structid, args, pos, tyvar): {
			mstruct = env.resolveStructName(structid);
			mstruct ?? {
				argTypes = map(args, \arg -> {
					ttypeInferenceDExp(env, arg)
				});
				sttype = TTypeName(structid, argTypes);
				restype(tyvar, sttype);
			} : {
				env.onError(tyvar, "Unknown struct " + structid);
				TTypeVar(env.mkTyvar());
			}
		}
		DLambda(args, body, pos, tyvar): {
			argTypes = map(args, \arg -> {
				dtype2ttype(env, arg.type)
			});
			nenv = foldi(args, env, \i, acc, arg -> {
				TTypeEnv(acc with localTypes = setTree(acc.localTypes, arg.id, argTypes[i]))
			});
			retType = ttypeInferenceDExp(nenv, body);
			type = TTypeFunction(argTypes, retType);
			restype(tyvar, type);
		}
		DRef(value, pos, tyvar): {
			vtype = ttypeInferenceDExp(env, value);
			type = TTypeName("ref", [if (true) vtype else makeTTypeSupertype(TTypeVar(tyvar), [vtype])]);
			restype(tyvar, type);
		}
		DField(value, field, pos, tyvar): {
			// OK, this is an overload of all structs with a field
			tvalue = ttypeInferenceDExp(env, value);
			fieldFunctions = env.resolveField(field);
			type = if (length(fieldFunctions) == 1) fieldFunctions[0]
			else TTypeOverload(TTypeVar(tyvar), buildSet(fieldFunctions));
			restype(tyvar, type);
		}
		// DSetMutable(lhs, field, value, pos, tyvar): 
		DArray(exps, pos, tyvar): {
			vtypes = map(exps, \e -> {
				ttypeInferenceDExp(env, e);
			});
			type = TTypeName("array", [makeTTypeSupertype(TTypeVar(tyvar), vtypes)]);
			restype(tyvar, type);
		}
		DSequence(exps, pos, tyvar): {
			stype = fold(exps, voidTType, \acc, e -> {
				ttypeInferenceDExp(env, e);
			});
			restype(tyvar, stype);
		}
		DSwitch(value, type, cases, defaultCase, pos, tyvar): {
			tvalue = ttypeInferenceDExp(env, value);
			ttype = dtype2ttype(env, type);
			unifyTType(env, tvalue, ttype);

			caseTypes = map(cases, \c -> {
				ttypeInferenceDExp(env, c.body);
			});

			btypes = defaultCase ?? {
				arrayPush(caseTypes, ttypeInferenceDExp(env, defaultCase));
			} : {
				caseTypes
			};
			restype(tyvar, makeTTypeSupertype(TTypeVar(tyvar), btypes));
		}
		// DCast(value, target, pos): 
		DDowncast(var, subtype, scope, pos, tyvar): {
			tsubtype = dtype2ttype(env, subtype);
			nenv = TTypeEnv(env with localTypes = setTree(env.localTypes, var, tsubtype));
			dtype = ttypeInferenceDExp(nenv, scope);
			restype(tyvar, dtype);
		}
		// DWith(struct, value, fields, pos, tyvar): 
		default: {
			println("TODO: Infer the type of " + d.structname);
			TTypeVar(env.mkTyvar());
		}
	}
}
