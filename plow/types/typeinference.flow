import plow/dexp/types;
import plow/dexp/vars;
import plow/types/make_eclass;
import plow/types/typeinference_exp;
import plow/types/typeof;
import plow/types/polymorphism;
import plow/types/util;
import ds/simplegraph;
import ds/arrayutils;
import plow/bexp/dmodule2bmodule;
import plow/bexp/dtype2btype;

export {
	// Given a module, figure out what the types are
	ttypeInference(t : TTypeEnv, d : DModule) -> BModule;
}

ttypeInference(env : TTypeEnv, d : DModule) -> BModule {
	if (isTracingStage(env.tracing, StageTypeInference(), 1)) {
		println("\nStage: Type inference of " + d.flowpath);
	}
	// Resolve the types of natives
	nenv1 = foldTree(d.natives, env, \nat, nativ, acc -> {
		// The module types have to be with ? in the types
		fulltype = dtype2ttype(acc, false, nativ.type);
		if (isTracingId(env.tracing, StageTypeInference(), 1, nat)) {
			println("native " + nat + ": " + prettyTType(fulltype));
		}

		// OK, prepare the native - without the fallback, though
		btype = dtype2btype(nativ.type);
		bnative = BNative(nativ.id, nativ.isIo, btype, nativ.name, nativ.pos);

		// Also set this in the BModule
		bmod = BModule(acc.bmodule with natives = setTree(acc.bmodule.natives, nativ.id, bnative));

		// We need a full type here, a TypeEClass will not do
		TTypeEnv(acc with 
			moduleTypes = setTree(acc.moduleTypes, nat, fulltype),
			bmodule = bmod
		)
	});

	// Set the type of top levels, so mutual recursion has something to bite on
	tenv = foldTree(d.globals, nenv1, \id, global, acc -> {
		global.eclass ::= acc.mkEClass();
		// We need to set up a declared type here so polymorphism will work. 
		// We need ? in the moduleTypes.
		type = switch (global.value) {
			DTyped(value, dtype, __, __): {
				// If there is a declared type, use that
				dtype2ttype(env, false, dtype);
			}
			default: {
				TTypeEClass(global.eclass)
			}
		};
		if (isTracingId(env.tracing, StageTypeInference(), 1, id)) {
			println(id + ": " + prettyTType(type));
		}
		if (!containsKeyTree(acc.moduleTypes, id)) {
			TTypeEnv(acc with moduleTypes = setTree(acc.moduleTypes, id, type))
		} else acc;
	});

	// Make a field map
	fields = makeDFieldMap(d.structs);
	unionFields = makeDUnionFields(d.unions, d.structs);
	supers = makeDSupers(d.unions);
	subs = makeDSubtypes(d.unions);

	// Make sure we can find local structs
	senv = TTypeEnv(tenv with
		resolveStructName = \name -> {
			lstruct = lookupTree(d.structs, name);
			lstruct ?? {
				Some(lstruct)
			} : tenv.resolveStructName(name);
		},
		resolveUnionName = \name -> {
			lunion = lookupTree(d.unions, name);
			lunion ?? {
				Some(lunion)
			} : tenv.resolveUnionName(name);
		},
		resolveField = \name -> {
			structs = getTreeArrayValue(fields, name);
			istructs = filtermap(structs, \str -> {
				lookupTree(d.structs, str);
			});
			others = tenv.resolveField(name);
			uniq(concat(istructs, others));
		},
		resolveUnionField = \name -> {
			unions = lookupTreeDef(unionFields, name, makeSet());
			others = tenv.resolveUnionField(name);
			mergeSets(unions, others);
		},
		resolveSupertypes = \name -> {
			concat(
				getTreeArrayValue(supers, name),
				tenv.resolveSupertypes(name)
			);
		},
		resolveSubtypes = \name -> {
			concat(
				getTreeArrayValue(subs, name),
				tenv.resolveSubtypes(name)
			);
		}
	);

	// OK, send the resolver to the unification friend
	tmenv = TTypeEnv(senv with
		tmap = setTMapResolvers(senv.tmap, senv.resolveUnionName, senv.resolveSupertypes, senv.resolveSubtypes)
	);

	order : [[string]] = buildDModuleDeps(d.globals, d.order);
	order2 = if (false) [d.order] else order;
	tbenv = ttypeInferenceChunk(tmenv, d, order2);
	
	benv = BExpEnv(tbenv.onError, tbenv.tmap, tbenv.etypes, tbenv.resolveStructName);

	if (isTracingId(tbenv.tracing, StageLower(), 1, d.flowpath)) {
		prettyDModule(tbenv, true, d);
	}

	tbenv.bmodule;
}

ttypeInferenceChunk(env : TTypeEnv, d : DModule, order : [[string]]) -> TTypeEnv {
	if (order == []) {
		resolveEClasses(env, d, [], d.flowpath, false);
	} else {
		chunk = order[0];
		cenv = env;

		// Clear etypes
		cenv.tmap.tmap.parents := [];
		cenv.tmap.tmap.values := [];
		cenv.tmap.typenameEClasses := makeTree();

		// println(chunk);

		// Now process this chunk
		genv = fold(chunk, cenv, \acc, id -> {
			mglobal = lookupTree(d.globals, id);
			mglobal ?? {
				nenv = ttypeInferenceDGlobal(acc, d.flowpath, mglobal);
				nenv;
			} : {acc}
		});

		verbose = fold(chunk, false, \acc, c -> {
			acc || isTracingId(env.tracing, StageTypeResolve(), 1, c)
		});
		nenv = resolveEClasses(genv, d, chunk, d.flowpath, verbose);

		ttypeInferenceChunk(nenv, d, tail(order));
	}
}

// Build dependencies between all globals
// and return them in order we can treat them (respecting connected components)
buildDModuleDeps(globals : Tree<string, DGlobal>, order : [string]) -> [[string]] {
	// Build a graph of dependencies
	deps = foldTree(globals, makeSimpleGraph(), \id, global, acc : SimpleGraph<string, bool> -> {
		vars = extractDVars(makeSet(), global.value);
		foldSet(vars, acc, \acc2, var -> {
			if (containsKeyTree(globals, var)) {
				// OK, an internal name - add a bidirectional dependency
				acc3 = if (false) acc2 else addSimpleEdge(acc2, id, var, false, 1);
				if (true) addSimpleEdge(acc3, var, id, false, 1) else acc3
			} else acc2;
		})
	});

	extractConnectedComponents(deps, [], order);
}

extractConnectedComponents(deps : SimpleGraph<string, bool>, acc : [[string]], order : [string]) -> [[string]] {
	if (order == []) acc
	else {
		first = order[0];
		clusterSet = insertSet(reachableClosureFromSimpleNode(deps, first), first);
		cluster = filter(order, \o -> containsSet(clusterSet, o));
		// println("Starting from " + first + " finds " + strGlue(cluster, ", "));
		extractConnectedComponents(deps, arrayPush(acc, cluster), subtractA(order, cluster));
	}
}

ttypeInferenceDGlobal(env : TTypeEnv, flowpath : string, d : DGlobal) -> TTypeEnv {
	if (isTracingId(env.tracing, StageTypeInference(), 1, d.id)
		|| isTracingId(env.tracing, StageTypeInference(), 1, flowpath)) {
		println("\nInference of global " + d.id);
	}
	// OK, set up eclasses
	populateEClass(env.mkEClass, d.value);

	nenv = TTypeEnv(env with onError = \p, e -> env.onError(p, d.id + ": " + e));
	nenv.tmap.topid := d.id;

	tracingId = isTracingId(env.tracing, StageTypeInference(), 1, d.id);

	// This is any declared type
	etype = lookupTreeDef(env.moduleTypes, d.id, TTypeEClass(d.eclass));
	unifyTNodes(env.tmap, etype, TTypeEClass(d.eclass), "global " + d.id + " 1", d.pos);
	
	ftype = ttypeInferenceDExp(nenv, d.id, d.value);
	unifyTNodes(env.tmap, ftype, TTypeEClass(d.eclass), "global " + d.id + " 2", d.pos);

	finalType = backfillType(etype, ftype);
	if (tracingId) {
		println("Inference " + d.id + " ends with " + prettyTType(finalType) + "\n");
	}

	dumpDebugEClasses(env.tmap);

	// println("Refined type for " + d.id + " " + prettyTTypeNode(env.tmap, finalType));
	TTypeEnv(env with 
		moduleTypes = setTree(env.moduleTypes, d.id, finalType),
		// etypes = setTree(env.etypes, d.eclass, etype)
	);
}

resolveEClasses(env : TTypeEnv, dmodule : DModule, chunk : [string], flowpath : string, verbose : bool) -> TTypeEnv {
	types = resolveTNodes(env.tmap, 5, verbose);
	// Only grab the etypes we do not already have set above
	etypes = foldTree(types, env.etypes, \eclass, type, acc -> {
		if (containsKeyTree(acc, eclass)) acc
		else setTree(acc, eclass, type)
	});

	// OK, now lower the typed chunk into BGlobals
	benv = BExpEnv(env.onError, env.tmap, etypes, env.resolveStructName);

	globals = fold(chunk, env.bmodule.globals, \acc, gl -> {
		mglobal = lookupTree(dmodule.globals, gl);
		mglobal ?? {
			bglobal = dglobal2bglobal(benv, mglobal);
			setTree(acc, gl, bglobal)
		} : acc;
	});
	bmodule = BModule(env.bmodule with globals = globals);

	mtypes = fold(chunk, env.moduleTypes, \acc, gl -> {
		mglobal = lookupTree(dmodule.globals, gl);
		mglobal ?? {
			mtype = lookupTree(etypes, mglobal.eclass);
			switch (mtype) {
				None(): acc;
				Some(type): setTree(acc, gl, type)
			}
		} : acc;
	});

	TTypeEnv(env with etypes = etypes, bmodule = bmodule, moduleTypes = mtypes);
}

// Use the refined type to fill our the given core type
backfillType(core : TType, refined : TType) -> TType {
	switch (core) {
		TTypeName(cid, ctypars): {
			switch (refined) {
				TTypeName(rid, rtypars): {
					if (cid == rid) {
						TTypeName(cid, mapi(ctypars, \i, ct -> {
							backfillType(ct, rtypars[i])
						}));
					} else core;
				}
				default: core;
			}
		}
		TTypeEClass(eclass): refined;
		TTypeFunction(cargs, creturnType): {
			switch (refined) {
				TTypeFunction(rargs, rreturnType): {
					TTypeFunction(mapi(cargs, \i, ct -> {
						backfillType(ct, rargs[i])
					}), backfillType(creturnType, rreturnType))
				}
				default: core;
			}
		}
		TTypeOverload(unique, overloads): refined;
		TTypeSupertype(unique, subtypes, maxed): refined;
	}
}
