import plow/types/type;
import maybe;
import ds/tree;

export {
	voidTType : TType = TTypeName("void", []);
	boolTType : TType = TTypeName("bool", []);
	intTType : TType= TTypeName("int", []);
	doubleTType : TType = TTypeName("double", []);
	stringTType : TType = TTypeName("string", []);
	refTType : (TType) -> TType;
	getBuiltinTType(op : string) -> Maybe<TType>;
}

builtinTOps : ref Maybe<Tree<string, TType>> = ref None();

refTType(rt : TType) -> TType {
	TTypeName("ref", [rt]);
}

getBuiltinTType(op : string) -> Maybe<TType> {
	ot = onlyOnce(builtinTOps, \ -> {
		typar1 = TTypeName("?", []);
		pairs2tree([
			Pair("||", TTypeFunction([boolTType, boolTType], boolTType)),
			Pair("&&", TTypeFunction([boolTType, boolTType], boolTType)),
			Pair("not", TTypeFunction([boolTType], boolTType)),
			Pair("==", TTypeFunction([typar1, typar1], boolTType)),
			Pair("!=", TTypeFunction([typar1, typar1], boolTType)),
			Pair("<=", TTypeFunction([typar1, typar1], boolTType)),
			Pair("<", TTypeFunction([typar1, typar1], boolTType)),
			Pair(">=", TTypeFunction([typar1, typar1], boolTType)),
			Pair(">", TTypeFunction([typar1, typar1], boolTType)),
			Pair("+", TTypeOverload(typar1, buildSet([
				TTypeFunction([intTType, intTType], intTType),
				TTypeFunction([doubleTType, doubleTType], doubleTType),
				TTypeFunction([stringTType, stringTType], stringTType),
			]))),
			Pair("-", TTypeOverload(typar1, buildSet([
				TTypeFunction([intTType, intTType], intTType),
				TTypeFunction([doubleTType, doubleTType], doubleTType),
			]))),
			Pair("negate", TTypeOverload(typar1, buildSet([
				TTypeFunction([intTType], intTType),
				TTypeFunction([doubleTType], doubleTType),
			]))),
			Pair("*", TTypeOverload(typar1, buildSet([
				TTypeFunction([intTType, intTType], intTType),
				TTypeFunction([doubleTType, doubleTType], doubleTType),
			]))),
			Pair("/", TTypeOverload(typar1, buildSet([
				TTypeFunction([intTType, intTType], intTType),
				TTypeFunction([doubleTType, doubleTType], doubleTType),
			]))),
			Pair("%", TTypeOverload(typar1, buildSet([
				TTypeFunction([intTType, intTType], intTType),
				TTypeFunction([doubleTType, doubleTType], doubleTType),
			]))),
			Pair(":=", TTypeFunction([refTType(typar1), typar1], voidTType)), // TODO: Add supertype?
			Pair("deref", TTypeFunction([refTType(typar1)], typar1)), // TODO: Add supertype?
		])
	});
	lookupTree(ot, op);
}
