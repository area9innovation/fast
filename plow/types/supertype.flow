import plow/types/typeenv;
import plow/types/util;
import plow/types/polymorphism;

export {
	// This finds out what supertypes could resolve a set of subtypes to a specific type
	resolveTSupertype(env : TTypeEnv, super : TTypeSupertype) -> [string];
}

// TODO: We could build a graph of common ancestors instead of this
resolveTSupertype(env : TTypeEnv, super : TTypeSupertype) -> [string] {
	named : [TTypeName] = filtermap(super.subtypes, \st -> {
		switch (st) {
			TTypeName(id, typars): Some(st);
			default: None();
		}
	});
	namedsupers = foldi(named, makeSet(), \i, acc, st -> {
		id = st.id;
		supers0 = env.resolveSupertypes(id);
		supers = arrayPush(supers0, id);
		supset = buildSet(supers);
		if (i == 0) supset
		else intersectSets(supset, acc)
	});
	set2array(namedsupers)
}
