import plow/types/typeenv;

export {
	instantiateTTypePar(env : TTypeEnv, t : TType) -> TType;
}

instantiateTTypePar(env : TTypeEnv, t : TType) -> TType {
	doInstantiateTTypePar(env, ref makeTree(), t);
}

doInstantiateTTypePar(env : TTypeEnv, typars : ref Tree<string, TTypeVar>, t : TType) -> TType {
	rec = \tt -> doInstantiateTTypePar(env, typars, tt);
	switch (t) {
		TTypeName(id, tyargs): {
			ityargs = map(tyargs, rec);
			if (id != "" && trim2(id, "?") == "") {
				mtype = lookupTree(^typars, id);
				mtype ?? {
					mtype;
				} : {
					tv = TTypeVar(env.mkTyvar());
					typars := setTree(^typars, id, tv);
					tv;
				}
			} else {
				TTypeName(id, ityargs);
			}
		}
		TTypeVar(id): t;
		TTypeFunction(args, returnType): TTypeFunction(map(args, rec), rec(returnType));
		TTypeOverload(typar, overloads): {
			TTypeOverload(rec(typar), mapSet(overloads, rec));
		}
		TTypeSupertype(typar, subtypes): {
			TTypeSupertype(rec(typar), mapSet(subtypes, rec));
		}
	}
}
