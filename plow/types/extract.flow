import plow/types/typeenv;
import plow/types/pretty;
import plow/types/util;

export {
	unifyEClassChildren(egraph : EGraph<TType>, eclass : int, type : TType) -> void;
}

unifyEClassChildren(egraph : EGraph<TType>, eclass : int, type : TType) -> void {
	split = egraph.splitChildren(type);
	nodes = getEClassNodes(egraph, eclass);
	iterSet(nodes, \node -> {
		cnode = canonicalizeENode(egraph, node);
		// println("We have a match " + toString(cnode.head) + " to " + prettyTType(type));
		if (cnode.head == split.first && length(split.second) == length(cnode.args)) {
			iteri(split.second, \i, child -> {
				childClass = addEExp(egraph, child);
				unionEClass(egraph, childClass, cnode.args[i]);
				{}
			})
		}
	});
}

