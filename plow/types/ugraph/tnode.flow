import plow/types/ugraph/tmap;
import plow/types/ugraph/find;
import plow/types/ugraph/incompatible;
import plow/types/pretty;

/*
TODO:
- Add debugging of type vars, so it becomes easier to debug

- Try to reduce size of eclasses. In principle, we do not need all of them
  if we construct eclasses when we start typing the globals instead of when
  desugaring.

- Review positions. They are wrong when reporting a problem in array.flow filtermap.

Errors towards plow\plow.flow:

plow/pexp/utils: Very slow
plow/dexp/pretty': Very slow

Parsed 'plow/pexp/values' as C:/fast/plow/pexp/values.flow
TODO: Picking random supertype: super60{PArgType, PTypeFunction, PTypeName, PTypePar}

C:/flow9/lib/sys/concurrent.flow:104:5: Add type parameter. Implicit polymorphism in (array<e347>) -> flow
        flow([]);
^
C:/flow9/lib/sys/concurrent.flow:104:10: Add type parameter. Implicit polymorphism in array<e345>
        flow([]);
            ^
C:/flow9/lib/sys/concurrent.flow:117:5: Add type parameter. Implicit polymorphism in (array<e431>) -> flow
        flow([]);
^
C:/flow9/lib/sys/concurrent.flow:117:10: Add type parameter. Implicit polymorphism in array<e429>
        flow([]);
            ^
C:/flow9/lib/sys/concurrent.flow:162:5: Add type parameter. Implicit polymorphism in (ref<Tree<e708, e709>>) -> flow
        flow(ref makeTree())
^
C:/flow9/lib/sys/concurrent.flow:162:10: Add type parameter. Implicit polymorphism in ref<Tree<e708, e709>>
        flow(ref makeTree())
            ^
C:/flow9/lib/sys/concurrent.flow:162:14: Add type parameter. Implicit polymorphism in () -> Tree<e702, e703>
        flow(ref makeTree())
                ^
C:/flow9/lib/sys/concurrent.flow:162:22: Add type parameter. Implicit polymorphism in Tree<e702, e703>
        flow(ref makeTree())

C:/fast/plow/types/ugraph/tnode.flow:1021:49: ERROR: Merge overload2854{(DNative)->flow, (TNodeName)->flow} and (TNode)->flow
				mflow = find(subtypes, \st -> st.name == "flow");
				                               ^
*/


export {
	// Set up the type unification map
	makeTMap(
		onError : (int, string) -> void, 
		nextEClass : ref int,
		mkUnique : () -> int, 
		tracing : Tracing
	) -> TMap;

	// Define the resolvers we need
	setTMapResolvers(t : TMap, 
		resolveUnionName : (string) -> Maybe<DUnion>,
		resolveSupertypes : (string) -> [string], 
		resolveSubtypes : (string) -> [string], 
	) -> TMap;

	// Given this eclass, what is the root equivalence class?
	rootTTypeEClass(tg : TMap, eclass : int) -> int;
	
	// Make a new type class
	makeTNodeClass(tmap : TMap) -> int;

	// When we know the type is unique - supertypes come to mind
	makeTNodeClassForType(tmap : TMap, type : TType, reason : string, pos : int) -> int;

	dtype2eclass(tmap : TMap, typars : Tree<string, int>, d : DType) -> int;
	findOrMakeTNodeClass(tmap : TMap, type : TType, reason : string, pos : int) -> int;
	joinTNodes(tmap : TMap, left : int, right : int) -> int;

	unifyTNodes(tmap : TMap, left : TType, right : TType, reason : string, pos : int) -> void;

	// At the end, extract the types for each type class
	resolveTNodes(tmap : TMap, iterations : int, verbose : bool) -> Tree<int, TType>;
}

makeTMap(onError : (int, string) -> void, nextEClass : ref int,
			mkUnique : () -> int, tracing : Tracing
		) -> TMap {
	self = ref None();
	tmap = TMap(
		makeUnionFindMap(defaultTNode(), \l, r -> {
			switch (^self) {
				None(): {
					println("NOT SUPPOSED TO HAPPEN");
					l;
				}
				Some(s): mergeTNodes(s, l, r);
			}
		}),
		ref makeTree(),
		ref \__ -> {
			println("TODO: The resolvers are not set");
			None();
		},
		ref \__ -> {
			println("TODO: The resolvers are not set");
			[];
		},
		ref \__ -> {
			println("TODO: The resolvers are not set");
			[];
		},
		onError,
		nextEClass,
		mkUnique,
		ref makeList(),
		ref makeList(),
		ref false,
		tracing,
		ref "",
	);
	self := Some(tmap);
	tmap;
}

setTMapResolvers(t : TMap, 
	resolveUnionName : (string) -> Maybe<DUnion>,
	resolveSupertypes : (string) -> [string], 
	resolveSubtypes : (string) -> [string], 
) -> TMap {
	t.resolveUnionName := resolveUnionName;
	t.resolveSupertypes := \type -> {
		transitiveResolveSuperType(resolveSupertypes, type)
	};
	t.resolveSubtypes := resolveSubtypes;
	t;
}

rootTTypeEClass(tg : TMap, eclass : int) -> int {
	findUnionMapRoot(tg.tmap, eclass)
}

// Collect all supertypes of this name, based on a one-step resolver
transitiveResolveSuperType(basic : (string) -> [string], name : string) -> [string] {
	supers = basic(name);
	fold(supers, supers, \acc, base -> {
		concat(acc, transitiveResolveSuperType(basic, base))
	})
}

defaultTNode() -> TNode {
	TNodeName("", [], -1);
}

uindent = ref "";

// These two types are unified
unifyTNodes(tmap : TMap, left : TType, right : TType, reason : string, pos : int) -> void {
	ind = ^uindent;
	verbose = isTracingId(tmap.tracing, StageTypeInference(), 2, ^(tmap.topid));
	if (verbose) {
		println("\n" + ind + "Unify " + rpad(prettyTTypeNode(tmap, left) + " and " + prettyTTypeNode(tmap, right), " ", 60) + " | " + reason );
	}
	lclass = findOrMakeTNodeClass(tmap, left, reason, pos);
	rclass = findOrMakeTNodeClass(tmap, right, reason, pos);
	verbose2 = verbose 
		|| isDebuggingEClass(tmap, lclass)
		|| isDebuggingEClass(tmap, rclass);
	if (verbose2) {
		uindent := ind + "  ";
		println(ind + "Unify " + rpad(prettyTTypeNode(tmap, left) + " and " + prettyTTypeNode(tmap, right), " ", 60) + " e" + i2s(lclass) + " vs e" + i2s(rclass) + " | " + ^(tmap.topid) + ": " + reason );
		// println("  " + debugTNode(tmap, lclass));
		// println("  " + debugTNode(tmap, rclass));
	}
	if (lclass != -1 && rclass != -1) {
		// println("  Union e" + i2s(lclass) + " and e" + i2s(rclass));
		root = unionUnionMap(tmap.tmap, lclass, rclass);
		
		// println("  to e" + i2s(root) + " =  " + debugTNode(tmap, root));
		if (verbose) {
			dumpTNodes(tmap);
		}
		{}
	} else {
		println("Not supposed to happen: " + prettyTType(left) + " and " + prettyTType(right));
	}
	uindent := ind;
}

findOrMakeTNodeClass(tmap : TMap, type : TType, reason : string, pos : int) -> int {
	eclass = findTNode(tmap, type);
	if (eclass != -1) {
		eclass
	} else {
		makeTNodeClassForType(tmap, type, reason, pos);
	}
}

findOrMakeTNode(tmap : TMap, node : TNode, reason : string) -> int {
	// And see if we can find that node!

	// println("\nLooking for " + prettyTNode(tmap, node));
	// dumpTNodes(tmap);

	sclass = switch (node) {
		TNodeOverload(unique, overloads, pos): {
			println("Not supposed to happen");
			-1;
		}
		TNodeSupertype(uniques, subtypes, unknownSubtypes, pos): {
			println("Not supposed to happen");
			-1;
		}
		TNodeName(name, typars, pos): {
			eclasses = getTreeArrayValue(^(tmap.typenameEClasses), name);
			mclass = find(eclasses, \ec -> {
				valnode = getUnionMapValue(tmap.tmap, ec);
				isSameTNode(tmap, node, valnode);
			});
			mclass ?? mclass : -1;
		}
	};

	if (sclass == -1) {
		makeEClassForTNode(tmap, node, reason);
	} else {
 		// println(^uindent + "Found it as an existing node " + i2s(sclass) + "\n");
		sclass;
	}
}

findTNodeClass(tmap : TMap, node : TNode) -> int {
	switch (node) {
		TNodeOverload(unique, overloads, pos): {
			findUnionMap(tmap.tmap, \eclass, nn -> {
				isSameTNode(tmap, node, nn)
			}, -1);
		}
		TNodeSupertype(uniques, subtypes, unknownSubtypes, pos): {
			findUnionMap(tmap.tmap, \eclass, nn -> {
				isSameTNode(tmap, node, nn)
			}, -1);
		}
		TNodeName(name, typars, pos): {
			eclasses = getTreeArrayValue(^(tmap.typenameEClasses), name);
			mclass = find(eclasses, \ec -> {
				valnode = getUnionMapValue(tmap.tmap, ec);
				isSameTNode(tmap, node, valnode);
			});
			mclass ?? mclass : -1;
		}
	};
}

makeTNodeClassForType(tmap : TMap, type : TType, reason : string, pos : int) -> int {
	node = makeTNode(tmap, type, reason, pos);
	// println(^uindent + "Making a type for "+ prettyTTypeNode(tmap, type) + " from " + prettyTNode(tmap, node));
	makeEClassForTNode(tmap, node, reason);
}

makeEClassForTNode(tmap : TMap, node : TNode, reason : string) -> int {
	// OK, could not find it. We need a new class
	nclass = makeTNodeClass(tmap);
	if (isDebuggingTopid(tmap)) {
		println(^uindent + "Made e" + i2s(nclass) + " as " + prettyTNode(tmap, node) + ": " + reason + "\n");
	}
	switch (node) {
		TNodeName(name, __, __): {
			tmap.typenameEClasses := treePushToArrayValue(^(tmap.typenameEClasses), name, nclass);
		}
		default: {}
	}
	setUnionMapValue(tmap.tmap, nclass, node);
	nclass;
}

makeTNodeClass(tmap : TMap) -> int {
	nclass = ^(tmap.nextEClass);
	tmap.nextEClass := nclass + 1;
	nclass;
}

dtype2eclass(tmap : TMap, typars : Tree<string, int>, d : DType) -> int {
	switch (d) {
		DTypePar(id, pos): {
			meclass = lookupTree(typars, id);
			switch (meclass) {
				None(): {
					node = TNodeName(id, [], pos);
					findOrMakeTNode(tmap, node, "dtype2eclass");
				}
				Some(eclass): eclass;
			}
		}
		DTypeName(id, ttypars, pos): {
			if (id == "auto") {
				makeTNodeClass(tmap)
			} else {
				node = TNodeName(id, map(ttypars, \tp -> dtype2eclass(tmap, typars, tp)), pos);
				findOrMakeTNode(tmap, node, "dtype2eclass");
			}
		}
		DTypeFunction(args, returnType, pos): {
			node = TNodeName("", 
				arrayPush(
					map(args, \arg -> dtype2eclass(tmap, typars, arg)),
					dtype2eclass(tmap, typars, returnType)
				),
				pos
			);
			findOrMakeTNode(tmap, node, "dtype2eclass");
		}
	}
}

isSameTNode(tmap : TMap, left : TNode, right : TNode) -> bool {
	// println(^uindent + "  Check " + prettyTNode(tmap, left) + " vs " + prettyTNode(tmap, right));
	left == right
	|| switch (left) {
		TNodeName(lname, ltypars, __): {
			switch (right) {
				TNodeName(rname, rtypars, __): {
					lname == rname 
					&& length(ltypars) == length(rtypars)
					&& forall(mapi(ltypars, \i, tp -> {
						findUnionMapRoot(tmap.tmap, tp)
						== findUnionMapRoot(tmap.tmap, rtypars[i])
					}), idfn)
				}
				default: false;
			}
		}
		TNodeOverload(uniques, overloads, __): {
			switch (right) {
				TNodeOverload(runiques, __, __): !isEmptySet(intersectSets(uniques, runiques));
				default: false;
			}
		}
		TNodeSupertype(uniques, __, __, __): {
			switch (right) {
				TNodeSupertype(runiques, __, __, __): !isEmptySet(intersectSets(uniques, runiques));
				default: false;
			}
		}
	}
}

makeTNode(tmap : TMap, t : TType, reason : string, pos : int) -> TNode {
	error = \ -> {
		println("ERROR: Could not make TNode for " + prettyTType(t));
		TNodeName("", [], pos);
	}
	switch (t) {
		TTypeName(id, typars): makeTNodeName(tmap, t, reason, pos);
		TTypeEClass(eclass): {
			getUnionMapValue(tmap.tmap, eclass);
		}
		TTypeFunction(args, returnType): makeTNodeName(tmap, t, reason, pos);
		TTypeOverload(unique, overloads): {
			uid = findTNode(tmap, unique);
			uniques = if (uid == -1) {
				error();
				makeSet();
			} else makeSet1(uid);
			simplifyTNode(tmap, TNodeOverload(
				uniques,
				map(overloads, \st -> makeTNodeName(tmap, st, reason, pos)),
				pos
			))
		}
		TTypeSupertype(unique, subtypes, maxed): {
			emptySuper = TNodeSupertype(makeSet1(unique), [], makeSet(), pos);
			super = fold(subtypes, emptySuper, \acc, st -> extractSupers(tmap, acc, st));
			simplifyTNode(tmap, super);
		}
	}
}

// Add t to this supertype as a subtype. If t is a supertype, add all members of that
extractSupers(tmap : TMap, acc : TNodeSupertype, t : TType) -> TNodeSupertype {
	addName = \n : TNodeName -> {
		//if (hasSupertype(tmap, n)) {
			// println("TODO: Wrap the children in supertype if not resolved! " + prettyTNode(tmap, n));
		// }
		TNodeSupertype(acc with subtypes = arrayPush(acc.subtypes, n));
	}
	addEClass = \e : int -> {
		TNodeSupertype(acc with unknownSubtypes = insertSet(acc.unknownSubtypes, e));
	}
	switch (t) {
		TTypeSupertype(__, sub, __): {
			fold(sub, acc, \acc2, st -> extractSupers(tmap, acc2, st));
		}
		TTypeEClass(eclass): {
			node = getUnionMapValue(tmap.tmap, eclass);
			switch (node) {
				TNodeName(name, typars, __): {
					if (isEmptyTNode(node)) {
						addEClass(eclass);
					} else {
						addName(node);
					}
				}
				TNodeOverload(unique, overloads, pos): {
					if (exists(overloads, isFlowNode)) {
						TNodeSupertype(acc with subtypes = arrayPush(acc.subtypes, TNodeName("flow", [], pos)));
					} else {
						println("TODO: Figure out how to represent this overload as a named type: " + prettyTType(t));
						acc;
					}
				}
				TNodeSupertype(uniques, subtypes, usub, pos): {
					TNodeSupertype(acc with
						subtypes = concat(acc.subtypes, subtypes),
						unknownSubtypes = mergeSets(acc.unknownSubtypes, usub),
					);
				}
			}
		}
		TTypeName(__, __): {
			addName(makeTNodeName(tmap, t, "extractsupers", acc.pos));
		}
		TTypeFunction(args, returnType): {
			addName(makeTNodeName(tmap, t, "extractsupers", acc.pos));
		}
		TTypeOverload(unique, overloads): {
			println("TODO: Figure out how to represent this overload as a named node: " + prettyTType(t));
			acc;
		}
	}
}

// Ensure that we get a named type out of this type. Used for the args of overloads and supertypes
makeTNodeName(tmap : TMap, t : TType, reason : string, pos : int) -> TNodeName {
	error = \ -> {
		println("ERROR: Could not make TNodeName for " + prettyTType(t));
		TNodeName("", [], pos);
	};
	switch (t) {
		TTypeName(id, typars): {
			TNodeName(id, map(typars, \tp -> findOrMakeTNodeClass(tmap, tp, reason, pos)), pos);
		}
		TTypeFunction(args, returnType): {
			TNodeName("", 
				arrayPush(
					map(args, \a -> 
						findOrMakeTNodeClass(tmap, a, reason, pos)
					),
					findOrMakeTNodeClass(tmap, returnType, reason, pos)
				), pos
			)
		}
		TTypeEClass(eclass): {
			node = getUnionMapValue(tmap.tmap, eclass);
			switch (node) {
				TNodeName(__, __, __): node;
				default: {
					println("TODO: Lift this up to super or overload: " + prettyTNode(tmap, node));
					error();
				}
			}
		}
		TTypeOverload(unique, overloads): error();
		TTypeSupertype(unique, subtypes, maxed): error();
	}
}

// Given a node, simplify overload and supertypes as much as possible.
// - If overloads are unique, pick the one it is
// - If a supertype has unknown subtypes, see if any are known
// - If a supertype has all subtypes known, find the potential supers

simplifyTNode(tmap : TMap, node : TNode) -> TNode {
	switch (node) {
		TNodeName(name, typars, pos): {
			// The typars are eclasses, to they will be simplified elsewhere
			node;
		}
		TNodeOverload(unique, overloads, __): {
			// The overloads are assumed to be simplified already
			if (length(overloads) == 1) {
				overloads[0];
			} else {
				node;
			}
		}
		TNodeSupertype(uniques, subtypes, unknownSubtypes, pos): {
			if (!isEmptySet(unknownSubtypes)) {
				// We have some typevars in here. See if any of those are
				// resolved
				resolved = foldSet(unknownSubtypes, Pair([], makeSet()), 
						\acc : Pair<[TNodeName], Set<int>>, st : int -> {
					unode = getUnionMapValue(tmap.tmap, st);
					unknown = \ -> {
						Pair(acc.first, insertSet(acc.second, st));
					}
					switch (unode) {
						TNodeName(name, typars, __): {
							if (isEmptyTNode(unode)) {
								unknown();
							} else {
								Pair(arrayPush(acc.first, unode), acc.second)
							}
						}
						TNodeSupertype(nuniques, nsubtypes, nunknownSubtypes, npos): {
							if (nsubtypes != []) {
								Pair(concat(acc.first, nsubtypes), acc.second);
							} else unknown();
						}
						default: unknown();
					}
				});
				if (resolved.first != []) {
					cleaned = TNodeSupertype(uniques, concat(subtypes, resolved.first), resolved.second, pos);
					// println("Cleaned unknown " + prettyTNode(tmap, cleaned));
					simplifyTNode(tmap, cleaned);
				} else {
					node;
				}
			} else {
				// OK, we can calculate potential super types here
				// and reduce them to an overload or a given type
				named = getPossibleTSupers(tmap, node);
				nnamed = sizeSet(named);

				// Here we have the names that are possible
				if (nnamed == 1) {
					fnode = instantiateTNodeName(tmap, set2array(named)[0], subtypes, pos);
					unifyTNodeNameWithSuper(tmap, fnode, node);
				} else {
					// Unify the typars of identical typenames
					nameGroups : Tree<string, [TNodeName]> = fold(subtypes, makeTree(), \acc, st -> {
						treePushToArrayUnique(acc, st.name, st)
					});
					unis : Pair<[TNodeName], [TNode]> = foldTree(nameGroups, Pair([], []), \name, group, acc -> {
						if (length(group) > 1) {
							merged = foldi(tail(group), group[0], \i, nn, acc2 : TNode -> {
								mergeTNodes(tmap, acc2, nn);
							});
							switch (merged) {
								TNodeName(__, __, __): Pair(arrayPush(acc.first, merged), acc.second);
								default: {
									Pair(acc.first, arrayPush(acc.second, merged));
								}
							}
						} else Pair(concat(acc.first, group), acc.second);
					});
					if (unis.second == []) {
						TNodeSupertype(uniques, unis.first, unknownSubtypes, pos);
					} else {
						println("TODO: We found a non-named thing in a supertype");
						println(unis.second);
						TNodeSupertype(uniques, unis.first, unknownSubtypes, pos);
					}
				}
			}
		}
	}
}

// Are there any direct supertypes of this node?
hasSupertype(tmap : TMap, node : TNodeName) -> bool {
	supertype = TNodeSupertype(makeSet(), [node], makeSet(), 0);
	named = getPossibleTSupers(tmap, supertype);
	sizeSet(named) > 1;
}

// Could there be some supertype placement in this one?
isEClassResolved(tmap : TMap, eclass : int) -> bool {
	node = getUnionMapValue(tmap.tmap, eclass);
	switch (node) {
		TNodeName(name, typars, pos): {
			!isEmptyTNode(node) && forall(typars, \tp -> isEClassResolved(tmap, tp))
		}
		TNodeOverload(unique, overloads, pos): false;
		TNodeSupertype(uniques, subtypes, unknownSubtypes, pos): false;
	}
}

// Could there be a different subtype that this one?
hasSubtype(tmap : TMap, node : TNodeName) -> bool {
	subtypes = ^(tmap.resolveSubtypes)(node.name);
	length(subtypes) > 1;
}

// We know we want a given name, and we have a set of candidates to pick from which
// help figure out the required number of type-parameters.
// It constructs type classes for each typar
instantiateTNodeName(tmap : TMap, name : string, nodes : [TNodeName], pos : int) -> TNodeName {
	node = filter(nodes, \n -> n.name == name);	
	if (length(node) > 0) {
		TNodeName(
			name, map(node[0].typars, \tp -> {
				 makeTNodeClass(tmap)
			}), pos
		)
	} else {
		munion = ^(tmap.resolveUnionName)(name);
		switch (munion) {
			None(): {
				typars = if (name == "array" || name == "ref") 1 else 0;
				TNodeName(name, generate(0, typars, \__ -> makeTNodeClass(tmap)), pos);
			}
			Some(union): {
				typars = map(union.typars, \tp -> makeTNodeClass(tmap));
				TNodeName(name, typars, pos);
			}
		}
	}
}

//
// The pure unification
//

mergeTNodes(tmap : TMap, left : TNode, right : TNode) -> TNode {
	if (isDebuggingTopid(tmap)) {
		lclass = findTNodeClass(tmap, left);
		rclass = findTNodeClass(tmap, right);
		if (isDebuggingEClass(tmap, lclass) || isDebuggingEClass(tmap, rclass)) {
			println(^uindent + "Merge nodes " + prettyTNode(tmap, left) + " and " + prettyTNode(tmap, right));
		}
	}
	// println(^uindent + "Merge nodes " + prettyTNode(tmap, left) + " and " + prettyTNode(tmap, right));
	todo = \ -> {
		println("TODO: Merge nodes " + prettyTNode(tmap, left) + " and " + prettyTNode(tmap, right));
		left;
	}
	error = \pos -> {
		lclass = findUnionMap(tmap.tmap, \i, val : TNode -> {
				isSameTNode(tmap, left, val)
			}, -1);

		rclass = findUnionMap(tmap.tmap, \i, val : TNode -> {
				isSameTNode(tmap, right, val)
			}, -1);
		tmap.onError(pos, "ERROR: Merge " + prettyTNode(tmap, left) + " and " + prettyTNode(tmap, right) + " (e" + i2s(lclass) + " and e" + i2s(rclass) + ")");
		// dumpTNodes(tmap);
		left;
	}
	if (isEmptyTNode(left)) simplifyTNode(tmap, right)
	else if (isEmptyTNode(right)) simplifyTNode(tmap, left)
	else if (isSameTNode(tmap, left, right)) left
	else switch (left) {
		TNodeName(lname, ltypars, pos): {
			switch (right) {
				TNodeName(rname, rtypars, rpos): {
					if (lname != rname) {
						if (lname == "flow" || rname == "flow") {
							// OK, we model it as an overload
							TNodeOverload(makeSet1(tmap.mkUnique()), [left, right], min(pos, rpos));
						} else if (isSingleUnionName(tmap, lname, rname)) {
							// As a special case, if one of these
							// is a singleton union with the other element,
							// it is ok
							left;
						} else {
							if (trim2(lname, "?") == "" && trim2(rname, "?") == "") {
								// ? vs ?? is not a problem
								left;
							} else {
								error(max(pos, rpos));
							}
						}
					} else if (length(ltypars) != length(rtypars)) {
						error(max(pos, rpos));
					} else {
						simplifyTNode(tmap, TNodeName(lname, mapi(ltypars, \i, lt -> {
							joinTNodes(tmap, lt, rtypars[i]);
						}), pos))
					}
				}
				TNodeOverload(unique, overloads, __): {
					mergeTNodes(tmap, right, left);
				}
				TNodeSupertype(unique, subtypes, __, __): {
					unifyTNodeNameWithSuper(tmap, left, right);
				}
			}
		}
		TNodeOverload(lunique, loverloads, lpos): {
			switch (right) {
				TNodeName(name, typars, pos): {
					// OK: Find which of the overloads potentially match this one
					overloads = filter(loverloads, \lo : TNodeName -> {
						c = incompatibleTNodeNames(tmap, right, lo);
						if (c) {
							// println("Ignoring incompatible overload " + prettyTNode(tmap, lo) + " for " + prettyTNode(tmap, right));
							false;
						} else {
							true;
						}
					});
					if (overloads == []) {
						error(max(lpos, pos));
					} else if (length(overloads) == 1) {
						mergeTNodes(tmap, overloads[0], right);
					} else {
						// If we have identical information already, we do not
						// need to pend it
						if (!exists(overloads, \o -> {
							isSameTNode(tmap, o, right)
						})) {
							// OK, we can not clarify it, so push it to pending
							noverload = TNodeOverload(lunique, overloads, pos);
							tmap.pending := Cons(Pair(noverload, right), ^(tmap.pending));
						}
						// println("From " + prettyTNode(tmap, left) + " to " + prettyTNode(tmap, noverload));
						right;
					}
				}
				TNodeOverload(unique, overloads, pos): {
					flows = filter(concat(loverloads, overloads), isFlowNode);
					if (flows != []) {
						// OK, we have a flow type, so just pick that
						flows[0];
					} else {
						println("TODO: Find the intersection between " + prettyTNode(tmap, left) + " and " + prettyTNode(tmap, right));
						left;
					}
				}
				TNodeSupertype(uniques, subtypes, usub, pos): {
					// We handle it in the opposite case
					mergeTNodes(tmap, right, left);
				}
			}
		}
		TNodeSupertype(lunique, lsubtypes, lusub, lpos): {
			switch (right) {
				TNodeName(name, typars, pos): {
					unifyTNodeNameWithSuper(tmap, right, left);
				}
				TNodeOverload(runique, roverloads, pos): {
					flows = filter(roverloads, isFlowNode);
					if (flows != []) {
						// OK, we resolve to the flow type
						flows[0];
					} else {
						todo();
					}
				}
				TNodeSupertype(runique, rsubtypes, rusub, pos): {
					simplifyTNode(tmap, TNodeSupertype(
						mergeSets(lunique, runique), 
						concat(lsubtypes, rsubtypes),
						mergeSets(lusub, rusub),
						max(pos, lpos)
					));
				}
			}
		}
	}
}

// OK, we have a named type against a super.
unifyTNodeNameWithSuper(tmap : TMap, node : TNodeName, super : TNodeSupertype) -> TNode {
	// println(^uindent + "Unifying " + prettyTNode(tmap, node) + " vs " + prettyTNode(tmap, super));
	found = ref false;
	iter(super.subtypes, \st -> {
		found := unifyTNodeNameWithSubtype(tmap, node, st) || ^found;
	});

	if (!isEmptySet(super.unknownSubtypes)) {
		eclass = findOrMakeTNode(tmap, node, "unifynodevssuper");
		iterSet(super.unknownSubtypes, \st -> {
			// println(^uindent + "Joining e" + i2s(eclass) + " and e" + i2s(st));
			joinTNodes(tmap, eclass, st);
			found := true;
		});
	}

	if (!^found) {
		tmap.onError(node.pos, "TODO: Join " + prettyTNode(tmap, node) + " not complete against " + prettyTNode(tmap, super));
	}

	node;
}

// Try to unify this super type against a subtype. Return true if successful
unifyTNodeNameWithSubtype(tmap : TMap, node : TNodeName, subtype : TNodeName) -> bool {
	if (subtype.name == node.name) {
		if (isDebuggingTopid(tmap)) {
			println(^uindent + "Sub with node " + prettyTNode(tmap, subtype) + " vs " + prettyTNode(tmap, node));
		}
		// OK, the same name, just go and subtype the typars
		if (length(subtype.typars) == length(node.typars)) {
			iteri(subtype.typars, \i, tp -> {
				subtypeTNodes(tmap, tp, node.typars[i], subtype.pos);
				{}
			});
			true;
		} else {
			tmap.onError(node.pos, "ERROR: Mismatch typars of " + prettyTNode(tmap, node) + " against " + prettyTNode(tmap, subtype));
			false;
		}
	} else if (node.name == "flow" || subtype.name == "flow") {
		true;
	} else {
		// OK, we know that the node has to be a supertype of st
		munion = ^(tmap.resolveUnionName)(node.name);
		switch (munion) {
			None(): {
				// OK, it is not a union, so they have to be the same
				tmap.onError(node.pos, "Expected union " + prettyTNode(tmap, node) + " against " + prettyTNode(tmap, subtype));
				false;
			}
			Some(union): {
				stype : Maybe<DTypeName> = find(union.types, \tn -> tn.id == subtype.name);
				stype ?? {
					// OK, we have the relation from the union to the struct in this union
					unifyTNodeNameAgainstSubtype(tmap, node, subtype, union, stype);
					true;
				} : {
					msubunion : Maybe<DTypeName> = find(union.types, \tn -> {
						subs = collectSubtypes(tmap, makeSet(), tn.id);
						containsSet(subs, subtype.name)
					});
					switch (msubunion) {
						None(): {
							tmap.onError(node.pos, "ERROR: Unknown subtype " + prettyTNode(tmap, node) + " from " + prettyTNode(tmap, subtype));
							false;
						}
						Some(subunion): {
							// OK, this is a stepping stone: We know this subunion contains our subtype
							misub = instantiateTNodeNameAgainstSubtype(tmap, node, subtype, 
								union, subunion);
							switch (misub) {
								None(): {
									tmap.onError(node.pos, "ERROR: Unknown subtype " + prettyTNode(tmap, node) + " from " + prettyTNode(tmap, subtype));
									false;
								}
								Some(isub): {
									// OK, inch closer
									unifyTNodeNameWithSubtype(tmap, isub, subtype)
								}
							}
						}
					}
				}
			}
		}
	}
}

// We have PExp and the expansion [PValue, PCall];
// We need to find PBool.
collectSubtypes(tmap : TMap, acc : Set<string>, typename : string) -> Set<string> {
	nacc = insertSet(acc, typename);
	munion = ^(tmap.resolveUnionName)(typename);
	switch (munion) {
		None(): nacc;
		Some(un): {
			fold(un.types, nacc, \acc2, tn -> {
				if (containsSet(acc2, tn.id)) acc2
				else collectSubtypes(tmap, acc2, tn.id)
			})
		}
	}
}

// OK, we have a union on the left hand side, and a subtype on the right hand side
// We have to figure out how those typars relate to each other.
// Thus, we have unionDef and the corresponding typename instantiation
unifyTNodeNameAgainstSubtype(tmap : TMap, unionNode : TNodeName, subNode : TNodeName, 
		unionDef : DUnion, subDef : DTypeName) -> void {
	msubInstantiated : Maybe<TNodeName>= instantiateTNodeNameAgainstSubtype(tmap, unionNode, subNode, 
		unionDef, subDef);
	msubInstantiated ?? {
		subtypes = msubInstantiated.typars;
		// println("    " + prettyTNode(tmap, subInstantiated) + " vs " + prettyTNode(tmap, subNode));
		if (length(subtypes) == length(subNode.typars)) {
			iteri(subtypes, \i, tp -> {
				if (tp != -1) {
					joinTNodes(tmap, tp, subNode.typars[i]);
					{}
				} else {
					tmap.onError(unionNode.pos, "ERROR: Could not match typars " + prettyTNode(tmap, subNode) + " vs " + prettyTNode(tmap, unionNode));
				}
			{}
			});
		} else {
			tmap.onError(unionNode.pos, "ERROR: Expected typars for " + prettyTNode(tmap, subNode) + " vs " + prettyTNode(tmap, unionNode));
		}
	} : {
		tmap.onError(unionNode.pos, "ERROR: Expected typars for " + prettyTNode(tmap, subNode) + " vs " + prettyTNode(tmap, unionNode));
	}
}

// Instantiates a typename that we know is in the union
instantiateTNodeNameAgainstSubtype(tmap : TMap, unionNode : TNodeName, subNode : TNodeName, 
		unionDef : DUnion, subDef : DTypeName) -> Maybe<TNodeName> {
	// println("  Node " + prettyTNode(tmap, unionNode) + " vs " + prettyTNode(tmap, subNode));
	if (length(unionNode.typars) == length(unionDef.typars)) {
		// OK, map from the typar to the eclass it is bound to
		typars : Tree<string, int> = foldi(unionDef.typars, makeTree(), \i, acc, tp : DTypePar -> {
			setTree(acc, tp.id, unionNode.typars[i]);
		});

		// Consider
		// Maybe<?> ::= None, Some<?>
		// If we are in the None, case, notice we have one too little typars
		sdtype : DTypeName = if (length(subDef.typars) == 0) {
			// So we implicitly extend it when there are none
			DTypeName(subDef with typars = unionDef.typars)
		} else subDef;
		subtypes = map(sdtype.typars, \tp -> {
			dtype2eclass(tmap, typars, tp)
		});
		// OK, instantiate the struct from the union typars
		subInstantiated = TNodeName(subNode.name, subtypes, subNode.pos);
		Some(subInstantiated)
	} else {
		None();
	}	
}

joinTNodes(tmap : TMap, left : int, right : int) -> int {
	root = unionUnionMap(tmap.tmap, left, right);
	
	if (false) {
		lnode = getUnionMapValue(tmap.tmap, left);
		rnode = getUnionMapValue(tmap.tmap, right);
		
		println("  Joining e" + i2s(left) + " and e" + i2s(right) + " to e" + i2s(root) + ": " + debugTNode(tmap, root)
			+ " from " + prettyTNode(tmap, lnode) + " and " + prettyTNode(tmap, rnode));
	}
	root;
}

// We know that the eclass "sub" is a subclass of "super".
subtypeTNodes(tmap : TMap, sub : int, super : int, pos : int) -> void {
	postpone = \ -> {
		tmap.pendingSubtypes := Cons(Triple(sub, super, pos), ^(tmap.pendingSubtypes));
	}
	supernode = getUnionMapValue(tmap.tmap, super);
	subnode = getUnionMapValue(tmap.tmap, sub);
	// println(^uindent + "Subtyping " + prettyTNode(tmap, subnode) + " vs " + prettyTNode(tmap, supernode) + "  // e" + i2s(sub) + " vs e" + i2s(super));
	switch (subnode) {
		TNodeSupertype(__, __, __, __): {
			if (isEmptyTNode(supernode)) {
				postpone();
			} else {
				// This is optimistic, but we just take the chance
				joinTNodes(tmap, sub, super);
				{}
			}
		}
		TNodeName(name, typars, __): {
			if (hasSupertype(tmap, subnode)) {
				switch (supernode) {
					TNodeName(__, __, __): {
						if (isEmptyTNode(supernode)) {
							supertype = TNodeSupertype(makeSet(), [subnode], makeSet(), 0);
							supers = getPossibleTSupers(tmap, supertype);
							nsupers = sizeSet(supers);
							if (nsupers == 1) {
								println("TODO: We could infer that sub is " + toString(set2array(supers)));
							}
							postpone();
						} else {
							// println("Unifying subtype for e" + i2s(sub) + ": " + prettyTNode(tmap, subnode) + " vs " + prettyTNode(tmap, supernode));
							unifyTNodeNameWithSubtype(tmap, supernode, subnode);
							{}
						}
					}
					TNodeSupertype(suniques, stypes, seclass, spos): {
						mega = TNodeSupertype(suniques, arrayPush(stypes, subnode), seclass, spos);
						mergeTNodes(tmap, supernode, mega);
						{}
					}
					TNodeOverload(unique, overloads, __): postpone();
				}
			} else {
				if (!isEClassResolved(tmap, sub) && !isEClassResolved(tmap, super)) {
					// println(^(tmap.topid) + ": TODO: This is wrong. We should supertype the typars " + prettyTNode(tmap, subnode) + " vs " + prettyTNode(tmap, supernode));
					postpone();
				} else {
					joinTNodes(tmap, sub, super);
					{}
				}
			}
		}
		TNodeOverload(__, __, __): postpone();
	}
}


//
// At the end, extract the types
//

resolveTNodes(tmap : TMap, iterations : int, verbose : bool) -> Tree<int, TType> {
	pending = ^(tmap.pending);
	tmap.pending := makeList();
	iterList(pending, \p : Pair<TNode, TNode> -> {
		mergeTNodes(tmap, p.first, p.second);
		{}
	});
	pendingSubtypes = ^(tmap.pendingSubtypes);
	tmap.pendingSubtypes := makeList();
	iterList(pendingSubtypes, \p : Triple<int, int, int> -> {
		// println("Subtype " + prettyEClass(tmap, p.first) + " sub " + prettyEClass(tmap, p.second));
		subtypeTNodes(tmap, p.first, p.second, p.third);
	});
	if (iterations == 0
		|| (isEmptyList(^(tmap.pending)) && isEmptyList(^(tmap.pendingSubtypes)))
	) {
		pendingSubtypes2 = ^(tmap.pendingSubtypes);
		switch (pendingSubtypes2) {
			EmptyList(): {
				if (isDebuggingTopid(tmap)) {
					iterList(^(tmap.pending), \p -> {
						println("Ignoring " + prettyTNode(tmap, p.first) + " vs " + prettyTNode(tmap, p.second));
					});
					iterList(^(tmap.pendingSubtypes), \t -> {
						println("Ignoring " + prettyEClass(tmap, t.first) + " sub " + prettyEClass(tmap, t.second));
					});
				}
				extractTNodes(tmap, verbose);
			}
			Cons(head, ltail): {
				// OK, we will just switch to join instead, and then continue
				// println("Joining " + prettyEClass(tmap, head.first) + " sub " + prettyEClass(tmap, head.second));
				joinTNodes(tmap, head.first, head.second);
				tmap.pendingSubtypes := ltail;
				resolveTNodes(tmap, 0, verbose);
			}
		};
	} else {
		resolveTNodes(tmap, iterations - 1, verbose);
	}
}

extractTNodes(tmap : TMap, verbose : bool) -> Tree<int, TType> {
	roots = getTNodes(tmap);
	types = ref makeTree();
	visited = ref makeSet();

	iterSet(roots, \root -> {
		node = getUnionMapValue(tmap.tmap, root);
		if (!isEmptyTNode(node)) {
			t = resolveTNodeClass(tmap, types, visited, root);
			if (verbose) {
				println("e" + i2s(root) + " = " + rpad(prettyTType(t), " ", 30) + "   from " + debugTNode(tmap, root));
			}
		}
	});

	^types
}

resolveTNodeClass(tmap : TMap, acc : ref Tree<int, TType>, visited : ref Set<int>, eclass : int) -> TType {
	mkClass = \ee -> {
		lookupTreeDef(^acc, ee, TTypeEClass(ee))
	}
	if (containsSet(^visited, eclass)) {
		mkClass(eclass)
	} else {
		visited := insertSet(^visited, eclass);
		node = getUnionMapValue(tmap.tmap, eclass);
		resolveTNode(tmap, acc, visited, eclass, node);
	}
}

resolveTNode(tmap : TMap, acc : ref Tree<int, TType>, visited : ref Set<int>, eclass : int, node : TNode) {
	mkClass = \ee -> {
		lookupTreeDef(^acc, ee, TTypeEClass(ee))
	}
	set = \tt -> {
		acc := setTree(^acc, eclass, tt);
		tt;
	}

	switch (node) {
		TNodeName(name, typars, pos): {
			if (name == "" && typars == []) {
				mkClass(eclass)
			} else if (name == "") {
				args = subrange(typars, 0, length(typars) - 1);
				rt = typars[length(typars) - 1];
				set(TTypeFunction(
					map(args, \a -> {
						resolveTNodeClass(tmap, acc, visited, a)
					}),
					resolveTNodeClass(tmap, acc, visited, rt)
				))
			} else {
				set(TTypeName(name, map(typars, \tp -> {
					resolveTNodeClass(tmap, acc, visited, tp)
				})))
			}
		}
		TNodeOverload(unique, overloads, pos): {
			simpler = simplifyTNode(tmap, node);
			if (simpler != node) {
				resolveTNode(tmap, acc, visited, eclass, simpler);
			} else if (length(overloads) > 0) {
				nonflow = filter(overloads, \t -> {
					!isFlowNode(t)
				});
				res = if (length(nonflow) == 1) {
					nonflow[0];
				} else if (length(nonflow) != length(overloads)) {
					// There is a flow in there
					TNodeName("flow", [], pos);
				} else {
					if (length(overloads) != 1) {
						println("TODO: Picking random overload: " + prettyTNode(tmap, node));
					}
					overloads[0];
				}
				resolveTNode(tmap, acc, visited, eclass, res);
			} else {
				println("TODO: Resolve overload: " + prettyTNode(tmap, node));
				mkClass(eclass);
			}
		}
		TNodeSupertype(unique, subtypes, __, pos): {
			simpler = simplifyTNode(tmap, node);
			if (simpler != node) {
				resolveTNode(tmap, acc, visited, eclass, simpler);
			} else if (subtypes != []) {
				mflow = find(subtypes, \st -> st.name == "flow");
				mflow ?? {
					resolveTNode(tmap, acc, visited, eclass, mflow);
				} : {
					if (length(subtypes) != 1) {
						tmap.onError(pos, "TODO: Picking random supertype: " + prettyTNode(tmap, node));
					}
					resolveTNode(tmap, acc, visited, eclass, subtypes[0]);
				}
			} else {
				tmap.onError(pos, "Could not resolve supertype: " + prettyTNode(tmap, node));
				mkClass(eclass);
			}
		}
	}
}
