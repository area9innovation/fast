import plow/types/ugraph/type;
import plow/types/pretty;

export {
	makeTMap(onError : (int, string) -> void, nextEClass : ref int) -> TMap;
	unifyTNodes(tmap : TMap, left : TType, right : TType) -> void;

	dumpTMap(t : TMap) -> void;
}

makeTMap(onError : (int, string) -> void, nextEClass : ref int) -> TMap {
	self = TMap(
		makeUnionFindMap(defaultTNode(), \l, r -> {
			println("Not supposed to happen");
			l
		}),
		onError,
		nextEClass,
	);
	TMap(
		self with tmap =
			UnionFindMap(self.tmap with mergeFn = \l, r -> {
				mergeTNodes(self, l, r);
			})
	);
}

defaultTNode() -> TNode {
	TNodeName("", []);
}

unifyTNodes(tmap : TMap, left : TType, right : TType) -> void {
	// println("Unify " + prettyTType(left) + " and " + prettyTType(right));
	lclass = findTNode(tmap, left);
	rclass = findTNode(tmap, right);
	if (lclass != -1 && rclass != -1) {
		unionUnionMap(tmap.tmap, lclass, rclass);
		{}
	} else if (lclass != -1) {
		addTTypeToEClass(tmap, lclass, right);
	} else if (rclass != -1) {
		addTTypeToEClass(tmap, rclass, left);
	} else {
		println("TODO: Unify unknown " + prettyTType(left) + " and " + prettyTType(right));
	}
}

// We promise there is no node for this
addTTypeToEClass(t : TMap, eclass : int, type : TType) -> void {
	switch (type) {
		TTypeEClass(nclass): {
			unionUnionMap(t.tmap, eclass, nclass);
			{}
		}
		default: {
			tnode1 = getUnionMapValue(t.tmap, eclass);
			tnode2 = makeTNode(t, type);
			nnode = mergeTNodes(t, tnode1, tnode2);
			setUnionMapValue(t.tmap, eclass, nnode)
		}
	}

}

makeTNode(tmap : TMap, t : TType) -> TNode {
	error = \ -> {
		println("ERROR: Could not make TNode for " + prettyTType(t));
		TNodeName("", []);
	}
	switch (t) {
		TTypeName(id, typars): makeTNodeName(tmap, t);
		TTypeEClass(eclass): {
			getUnionMapValue(tmap.tmap, eclass);
		}
		TTypeFunction(args, returnType): makeTNodeName(tmap, t);
		TTypeOverload(unique, overloads): {
			uid = findTNode(tmap, unique);
			if (uid == -1) {
				error();
				{}
			}
			TNodeOverload(
				uid, 
				map(overloads, \st -> makeTNodeName(tmap, st))
			)
		}
		TTypeSupertype(unique, subtypes, maxed): {
			TNodeSupertype(
				unique, 
				map(subtypes, \st -> makeTNodeName(tmap, st))
			)
		}
	}
}

makeTNodeName(tmap : TMap, t : TType) -> TNodeName {
	error = \ -> {
		println("ERROR: Could not make TNodeName for " + prettyTType(t));
		TNodeName("", []);
	};
	switch (t) {
		TTypeName(id, typars): {
			TNodeName(id, map(typars, \tp -> findOrMakeTNodeClass(tmap, tp)));
		}
		TTypeFunction(args, returnType): {
			TNodeName("", 
				arrayPush(
					map(args, \a -> 
						findOrMakeTNodeClass(tmap, a)
					),
					findOrMakeTNodeClass(tmap, returnType)
				)
			)
		}
		TTypeEClass(eclass): {
			node = getUnionMapValue(tmap.tmap, eclass);
			switch (node) {
				TNodeName(__, __): node;
				default: error();
			}
		}
		default: error();
	}
}

findOrMakeTNodeClass(tmap : TMap, type : TType) -> int {
	eclass = findTNode(tmap, type);
	if (eclass != -1) {
		eclass
	} else {
		node = makeTNode(tmap, type);

		nclass = ^(tmap.nextEClass);
		tmap.nextEClass := nclass + 1;

		setUnionMapValue(tmap.tmap, nclass, node);

		nclass;
	}
}

mergeTNodes(t : TMap, left : TNode, right : TNode) -> TNode {
	todo = \ -> {
		println("TODO: Merge nodes " + prettyTNode(left) + " and " + prettyTNode(right));
		left;
	}
	error = \ -> {
		println("ERROR: Merge " + prettyTNode(left) + " and " + prettyTNode(right));
		left;
	}
	switch (left) {
		TNodeName(lname, ltypars): {
			if (lname == "" && ltypars == []) {
				right;
			} else {
				switch (right) {
					TNodeName(rname, rtypars): {
						if (rname == "" && rtypars == []) {
							left
						} else if (lname != rname) {
							todo()
						} else if (length(ltypars) != length(rtypars)) {
							error();
						} else {
							TNodeName(lname, mapi(ltypars, \i, lt -> {
								unionUnionMap(t.tmap, lt, rtypars[i])
							}))
						}
					}
					TNodeOverload(unique, overloads): {
						todo();
					}
					TNodeSupertype(unique, subtypes): {
						todo();
					}
				}
			}
		}
		TNodeOverload(unique, overloads): {
			todo();
		}
		TNodeSupertype(unique, subtypes): {
			todo();
		}
	}
}

findTNode(tmap : TMap, type : TType) -> int {
	switch (type) {
		TTypeEClass(eclass): {
			findUnionMapRoot(tmap.tmap, eclass);
		}
		default: {
			findUnionMap(tmap.tmap, \i, val : TNode -> {
				c = isTTypeInTNode(tmap, type, i, val);
				// println(i2s(i) + " has " + prettyTType(type) + " is " + b2s(c));
				c;
			}, -1);
		}
	}
}

isTTypeInTNode(tmap : TMap, t : TType, nclass : int, n : TNode) -> bool {
	todo = \ -> {
		println("TODO: Check if type " + prettyTType(t) + " is node " + prettyTNode(n));
		false;
	}
	isSameEClass = \ec -> {
		findUnionMapRoot(tmap.tmap, ec) == findUnionMapRoot(tmap.tmap, nclass)
	}
	switch (n) {
		TNodeName(name, typars): {
			switch (t) {
				TTypeName(id, ttypars): {
					if (id == name) areTTypesInTNodes(tmap, ttypars, typars) else false;
				}
				TTypeFunction(args, returnType): {
					if (name == "" && length(typars) == length(args) + 1) {
						areTTypesInTNodes(tmap, args, subrange(typars, 0, length(args)))
						&& areTTypesInTNodes(tmap, [returnType], [typars[length(args)]])
					} else {
						false;
					}
				}
				TTypeEClass(eclass): isSameEClass(eclass);
				TTypeOverload(unique, overloads): false;
				TTypeSupertype(unique, subtypes, maxed): false;
			}
		}
		TNodeOverload(unique, overloads): {
			switch (t) {
				TTypeOverload(tunique, __): {
					uid = findTNode(tmap, tunique);
					uid == unique;
				}
				TTypeEClass(eclass): isSameEClass(eclass);
				default: false;
			}
		}
		TNodeSupertype(unique, subtypes): {
			switch (t) {
				TTypeSupertype(tunique, __, maxed): unique == tunique;
				TTypeEClass(eclass): isSameEClass(eclass);
				default: false;
			}
		}
	}
}

areTTypesInTNodes(tmap : TMap, ts : [TType], ns : [int]) -> bool {
	length(ts) == length(ns)
	&& forall(mapi(ts, \i, t -> {
		eclass = ns[i];
		node = getUnionMapValue(tmap.tmap, eclass);
		isTTypeInTNode(tmap, t, eclass, node)
	}), idfn)
}

prettyTNode(t : TNode) -> string {
	switch (t) {
		TNodeName(name, typars): {
			if (name == "") {
				if (typars == []) "Îµ"
				else {
					args = subrange(typars, 0, length(typars) - 1);
					rt = typars[length(typars) - 1];
					"(" + superglue(args, \e -> "e" + i2s(e), ", ") + ")"
					+ "->e" + i2s(rt)
				}
			} else {
				name
				+ (if (typars != []) "<" + superglue(typars, \e -> "e" + i2s(e), ",") + ">" else "");
			}
		}
		TNodeOverload(unique, overloads): {
			"overload" + i2s(unique) + "{"
			+ superglue(overloads, \o -> prettyTNode(o), ", ")
			+ "}";
		}
		TNodeSupertype(unique, subtypes): {
			"super" + i2s(unique) + "{"
			+ superglue(subtypes, \o -> prettyTNode(o), ", ")
			+ "}";
		}
	}
}

dumpTMap(t : TMap) -> void {
	aroots = getUnionMapRoots(t.tmap);
	roots = filterSet(aroots, \r -> {
		r < ^(t.nextEClass)
	});

	iterSet(roots, \root -> {
		node = getUnionMapValue(t.tmap, root);

		childClasses = foldRange(0, ^(t.nextEClass), [], \acc2, ec -> {
			r = findUnionMapRoot(t.tmap, ec);
			if (r == root) {
				arrayPush(acc2, ec)
			} else acc2;
		});

		println("e" + rpad(i2s(root), " ", 3) + "= " + rpad(prettyTNode(node), " ", 40) + "   covers " + superglue(childClasses, \c -> "e" + i2s(c), " "));
	});
}
