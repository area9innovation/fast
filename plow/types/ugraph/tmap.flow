import ds/union_find_map;
import plow/dexp/dexp;
import plow/tracing;

export {
	TMap(
		// The union/find map of tnodes for each equivalence class
		tmap : UnionFindMap<TNode>,
		// To help find a type name in the union find map
		typenameEClasses : ref Tree<string, [int]>,
		// The helpers we need to do the unification
		resolveUnionName : ref (string) -> Maybe<DUnion>,
		resolveSupertypes : ref (string) -> [string],
		resolveSubtypes : ref (string) -> [string],
		// For error reporting
		onError : (int, string) -> void,
		// The next eclass
		nextEClass : ref int,
		// Make a unique id for supertypes
		mkUnique : () -> int,
		// A list of pending unifications that we could not do
		pending : ref List<Pair<TNode, TNode>>,
		// A list of pending subtypings we could not do
		pendingSubtypes : ref List<Triple<int, int, int>>,
		// Are we at a point where we have to make up our mind about 
		// supertypes and overloads even if they are ambigious?
		finalPhase : ref bool,
		// For debugging
		tracing : Tracing
	);

	// Our nodes in the type graph
	TNode ::= TNodeName, TNodeOverload, TNodeSupertype;
		// If the name is empty, it is a function. If name is empty, and typars empty, null
		TNodeName(name : string, typars : [int], pos : int);
		TNodeOverload(
			unique : Set<int>, 
			// When we do not know what overload to pick, we keep candidates here
			overloads : [TNodeName], 
			pos : int
		);
		TNodeSupertype(
			uniques : Set<int>, 
			// When we know what the name is of a subtype, it goes here
			subtypes : [TNodeName],
			// When we do not know what the subtype is called, it goes here
			unknownSubtypes : Set<int>,
			pos : int
		);
}
