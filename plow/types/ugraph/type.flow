import ds/union_find_map;
import plow/dexp/dexp;

export {
	TypeGraph(
		// What is the id of the next eclass?
		nextEClass : ref int, 

		// The union/find map of tnodes for each equivalence class
		tmap : TMap,

		// To help report errors, we have this friend
		onError : (int, string) -> void,
	);

	TMap(
		tmap : UnionFindMap<TNode>,
		resolveUnionName : ref (string) -> Maybe<DUnion>,
		resolveSupertypes : ref (string) -> [string],
		onError : (int, string) -> void,
		nextEClass : ref int,
	);

	TNode ::= TNodeName, TNodeOverload, TNodeSupertype;
		// If the name is empty, it is a function. If name is empty, and typars empty, null
		TNodeName(name : string, typars : [int]);
		TNodeOverload(unique : Set<int>, overloads : [TNodeName]);
		TNodeSupertype(
			uniques : Set<int>, 
			subtypes : [TNodeName],
			unknownSubtypes : Set<int>,
		);
}
