import plow/types/pretty;
import plow/types/ugraph/tnode;
import ds/treeutils;

// TODO: Unless we start to collect something here,
// we can just use the TMap directly.
export {
	// Construct a new graph of our types
	makeTypeGraph(
		onError : (int, string) -> void, 
		nextEClass : ref int,
		mkUnique : () -> int,
	) -> TypeGraph;

	setTypeGraphResolver(
		t : TypeGraph,
		resolveUnionName : (string) -> Maybe<DUnion>,
		resolveSupertypes : (string) -> [string], 
	) -> TypeGraph;

	// Prepare an empty equivalence class
	emptyTTypeClass(tg : TypeGraph) -> int;

	// Given this eclass, what is the root equivalence class?
	rootTTypeEClass(tg : TypeGraph, eclass : int) -> int;
}

makeTypeGraph(
		onError : (int, string) -> void, 
		nextEClass : ref int,
		mkUnique : () -> int,
	) -> TypeGraph {
	TypeGraph(
		makeTMap(onError, nextEClass, mkUnique),
	)
}

setTypeGraphResolver(
	t : TypeGraph,
	resolveUnionName : (string) -> Maybe<DUnion>,
	resolveSupertypes : (string) -> [string], 
) -> TypeGraph {
	TypeGraph(t with tmap = setTMapResolvers(t.tmap, resolveUnionName, resolveSupertypes));
}

emptyTTypeClass(tg : TypeGraph) -> int {
	makeTNodeClass(tg.tmap);
}

rootTTypeEClass(tg : TypeGraph, eclass : int) -> int {
	findUnionMapRoot(tg.tmap.tmap, eclass)
}
