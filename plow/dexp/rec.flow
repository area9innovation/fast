import plow/dexp/dexp;
import ds/rvalue_api;

export {
	foldDExp(x : DExp, init : ?, fn : (?, DExp) -> ?) -> ?;
	getDExpChildren(e : DExp) -> [DExp];
}

getDExpChildren(e : DExp) -> [DExp] {
	switch (e) {
		DValue(): [];
		DStringInclude(path, pos): [];
		DVar(id, pos, tyvar): [];
		DLet(id, value, body, pos, tyvar): [value, body];
		DIf(cond, then, else_, pos, tyvar): [cond, then, else_];
		DCall(fn, args, pos, tyvar): concat([fn], args);
		DCallOp(op, args, pos, tyvar): args;
		DConstruct(structid, args, pos, tyvar): args;
		DLambda(args, body, pos, tyvar): [body];
		DRef(value, pos, tyvar): [value];
		DField(value, field, pos, tyvar): [value];
		DSetMutable(lhs, field, value, pos, tyvar): [lhs, value];
		DArray(exps, pos, tyvar): exps;
		DSequence(exps, pos, tyvar): exps;
		DSwitch(value, type, cases, defaultCase, pos, tyvar): {
			cc = concat([value], map(cases, \c -> c.body));
			defaultCase ?? {
				arrayPush(cc, defaultCase);
			} : cc
		}
		DCast(value, target, pos): [value];
		DDowncast(var, subtype, scope, pos, tyvar): [scope];
		DTyped(value, subtype, pos): [value];
		DWith(struct, value, fields, pos, tyvar): concat([value], map(fields, \f -> f.value));
	}
}

dexpApi = RecApi(
	// Clear out recursive children to make the parent value canonical to comparison
	\e : DExp -> {
		v = DVoid(0);
		switch (e) {
			DValue(): e;
			DStringInclude(path, pos): e;
			DVar(id, pos, tyvar): e;
			DLet(id, value, body, pos, tyvar): DLet(id, v, v, pos, tyvar);
			DIf(cond, then, else_, pos, tyvar): DIf(v, v, v, pos, tyvar);
			DCall(fn, args, pos, tyvar): DCall(v, [], pos, tyvar);
			DCallOp(op, args, pos, tyvar): DCallOp(op, [], pos, tyvar);
			DConstruct(structid, args, pos, tyvar): DConstruct(structid, [], pos, tyvar);
			DLambda(args, body, pos, tyvar): DLambda(args, v, pos, tyvar);
			DRef(value, pos, tyvar): DRef(v, pos, tyvar);
			DField(value, field, pos, tyvar): DField(v, field, pos, tyvar);
			DSetMutable(lhs, field, value, pos, tyvar): DSetMutable(v, field, v, pos, tyvar);
			DArray(exps, pos, tyvar): DArray([], pos, tyvar);
			DSequence(exps, pos, tyvar): DSequence([], pos, tyvar);
			DSwitch(value, type, cases, defaultCase, pos, tyvar): DSwitch(value, type, [], None(), pos, tyvar);
			DCast(value, target, pos): DCast(v, target, pos);
			DDowncast(var, subtype, scope, pos, tyvar): DDowncast(var, subtype, v, pos, tyvar);
			DTyped(value, subtype, pos): DTyped(v, subtype, pos);
			DWith(struct, value, fields, pos, tyvar): DWith(struct, v, [], pos, tyvar);
		};
		e
	},
	// Extract the recursive children of a value
	getDExpChildren,
	// Reconstitute a value from the parent with these children
	\h : DExp, c : [DExp] -> {
		switch (h) {
			DValue(): h;
			default: {
				println("TODO");
				h;
			}
		}
	}
);

foldDExp(x : DExp, init : ?, fn : (?, DExp) -> ?) -> ? {
	recfold(dexpApi, x, init, fn)
}
