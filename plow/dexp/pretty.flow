import plow/dexp/dexp;
import plow/types/typeof;
import plow/types/pretty;
import string;
import text/blueprint;

export {
	prettyDModule(env : TTypeEnv, d : DModule) -> void;
	prettyDExp(env : TTypeEnv, input : string, i : string, d : DExp) -> void;
}

prettyDModule(env : TTypeEnv, d : DModule) -> void {
	input = getFileContent(d.fullpath);
	println(d.flowpath + " (" + d.fullpath + "):");

	iter(d.imports, \i : DImport -> {
		println("  import " + i.path);
	});
	iter(d.forbids, \f : DForbid -> {
		println("  forbid " + f.path);
	});
	// TODO:
	//	exported : DExport, 
	traverseInOrder(d.structs, \sid, s : DStruct -> {
		println("  struct " + prettyDStruct(input, s));
	});
	//	unions : Tree<string, DUnion>,
	//	typedefs : Tree<string, DTypeDef>,
	//	natives : Tree<string, DNative>,
	iter(d.order, \id -> {
		mglobal = lookupTree(d.globals, id);
		mglobal ?? {
			println(" " + id + "<" + strGlue(mglobal.typars, ", ") + ">" + "=");
			prettyDExp(env, input, "  ", mglobal.value);
		} : {}
	});
}


prettyDExp(env : TTypeEnv, input : string, i : string, d : DExp) -> void {
	rec = \e -> prettyDExp(env, input, i + " ", e);
	type = \t -> println(i + " " + prettyDType(input, t));
	pr = \s : string -> {
		line = if (d.pos == -1) "MISSING POS " + d.structname else substring(input, d.pos, 20);
		pre = i + s;
		dtype = dexpType(env, d);
		eclass = addEExp(env.egraph, dtype);
		etype = lookupTreeDef(env.etypes, eclass, dtype);
		typ = prettyTType(etype);
		println(rpad(pre, " ", 60) + " " + rpad(i2s(eclass) + " = " + typ + " (was " + prettyTType(dtype) + ")", " ", 60) + " " + takeBefore(line, "\n", line));
	}
	switch (d : DExp) {
		DVoid(pos): pr("void");
		DBool(v, pos): pr("bool");
		DInt(v, pos): pr("int");
		DDouble(v, pos): pr("double");
		DString(v, pos): pr("string");
		DStringInclude(path, pos): {
			pr("String include " + path);
		}
		DLambda(args, body, pos, eclass): {
			pr("lambda " + superglue(args, \a : DArgType -> (if (a.id != "") a.id + ":" else "MISSING LAMBDA ARG NAME") + prettyDType(input, a.type), ","));
			rec(body);
		}
		DVar(var, pos, eclass): {
			pr("'" + var + "'");
		}
		DLet(var, value, body, pos, eclass): {
			pr("let " + var);
			rec(value);
			rec(body);
		}
		DIf(cond, then, else_, pos, eclass): {
			pr("if");
			rec(cond);
			rec(then);
			rec(else_);
		}
		DCall(fn, args, pos, eclass): {
			pr("call");
			rec(fn);
			iter(args, rec);
		}
		DRef(value, pos, eclass): {
			pr("ref");
			rec(value);
		}
		DField(value, field, pos, eclass): {
			pr("field ." + field);
			rec(value);
		}
		DSetMutable(lhs, field, value, pos, eclass): {
			pr("set mutable field" + field);
			rec(lhs);
			rec(value);
		}
		DArray(exps, pos, eclass): {
			pr("array");
			iter(exps, rec);
		}
		DSequence(exps, pos, eclass): {
			pr("sequence");
			iter(exps, rec);
		}
		DSwitch(value, typ, cases, mdef, pos, eclass): {
			pr("switch");
			rec(value);
			type(typ);
			iter(cases, \case : DCase -> {
				pr("  case " + case.id);
				prettyDExp(env, input, i + "    ", case.body);
			});
			mdef ?? {
				pr("  default:");
				rec(mdef)
			} : {}
		}
		DCast(value, target, pos): {
			pr("cast");
			rec(value);
			type(target);
		}
		DTyped(value, typ, pos): {
			pr("typed : " + prettyDType(input, typ));
			rec(value);
		}
		DWith(struct, value, fields, pos, eclass): {
			pr("with " + struct);
			rec(value);
			// iter(fields, rec);
		}
		DConstruct(structid, args, pos, eclass): {
			pr("construct " + structid);
			iter(args, rec);
		}
		DDowncast(var, subtype, scope, pos, eclass): {
			pr("downcast " + var);
			type(subtype);
			rec(scope);
		}
	}
}

prettyDType(input : string, d : DType) -> string {
	switch (d) {
		DTypePar(id, pos): id;
		DTypeName(id, typars, pos): id + (if (typars == []) "" else "<" + superglue(typars, \tt -> prettyDType(input, tt), ", ") + ">");
		DTypeFunction(args, returnType, pos): "(" + superglue(args, \tt -> prettyDType(input, tt), ", ") + ") -> " + prettyDType(input, returnType);
	}
}

prettyDStruct(input : string, s : DStruct) -> string {
	s.id + "<" + strGlue(s.typars, ", ") 
	+ ">(" + superglue(s.structArgs, \sa : DStructArg -> {
		(if (sa.ismutable) "mutable " else "") 
		+ sa.id + " : " + prettyDType(input, sa.type)
	}, ", ") + ")";
}
