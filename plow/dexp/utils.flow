import plow/dexp/dexp;

export {
	DTypeOrStructOrUnion ::= DType, DStruct, DUnion;
	// Find the typenames that are used in this struct
	extractTypeNamesDType(acc : Set<string>, t : DTypeOrStructOrUnion, structs : Tree<string, DStruct>, unions : Tree<string, DUnion>) -> Set<string>;
}

extractTypeNamesDType(acc : Set<string>, t : DTypeOrStructOrUnion, structs : Tree<string, DStruct>, unions : Tree<string, DUnion>) -> Set<string> {
	switch (t) {
		DTypeName(id, typars, __): {
			if (containsSet(acc, id)) acc else {
				fold(typars, insertSet(acc, id), \ac, typar -> 
					extractTypeNamesDType(ac, typar, structs, unions)
				);
			}
		}
		DTypePar(id,__): {
			switch (lookupTree(structs, id)) {
				Some(s): extractTypeNamesDType(acc, s, structs, unions);
				None(): {
					switch (lookupTree(unions, id)) {
						Some(u): extractTypeNamesDType(acc, u, structs, unions);
						None(): {
							// Unresolved(?) (free?) typar?
							acc;
						}
					}
				}
			}
		}
		DTypeFunction(args, returnType, __): {
			fold(args, extractTypeNamesDType(acc, returnType, structs, unions), \ac, arg_type -> 
				extractTypeNamesDType(ac, arg_type, structs, unions)
			);
		}
		DStruct(id, typars, structArgs, __): {
			if (containsSet(acc, id)) acc else {
				fold(structArgs, 
					fold(typars, insertSet(acc, id), \ac, typar -> 
						extractTypeNamesDType(ac, DTypePar(typar, 0), structs, unions)
					),
					\ac, struct_arg -> 
						extractTypeNamesDType(ac, struct_arg.type, structs, unions)
				);
			}
		}
		DUnion(id, typars, types, __): {
			if (containsSet(acc, id)) acc else {
				fold(types, 
					fold(typars, insertSet(acc, id), \ac, typar -> 
						extractTypeNamesDType(ac, typar, structs, unions)
					),
					\ac, type -> 
						extractTypeNamesDType(ac, type, structs, unions)
				);
			}
		}
	}
}
