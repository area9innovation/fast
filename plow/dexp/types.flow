import plow/dexp/rec;

export {
	extractDTyparsFromDExp(e : DExp) -> Set<string>;

	// Visit all types in this expression
	foldDTypesInDExp(e : DExp, i : ?, fn : (?, DType) -> ?) -> ?;

	// Find all type-pars in this type
	extractDTypars(acc : Set<string>, d : DType) -> Set<string>;

	// Build a map from field to structs that have that field
	makeDFieldMap(structs : Tree<string, DStruct>) -> Tree<string, [string]>;

	// Build a map from a type name to the super types it might have
	makeDSupers(unions : Tree<string, DUnion>) -> Tree<string, [string]>;

	// Build a map from a type name to the subtypes it might have
	makeDSubtypes(unions : Tree<string, DUnion>) -> Tree<string, [string]>;

	// Build a map from field names to what unions have all those fields
	makeDUnionFields(unions : Tree<string, DUnion>, structs : Tree<string, DStruct>) -> Tree<string, Set<string>>;
}

extractDTyparsFromDExp(e : DExp) -> Set<string> {
	foldDTypesInDExp(e, makeSet(), extractDTypars);
}

foldDTypesInDExp(e : DExp, acc : ?, fn : (?, DType) -> ?) -> ? {
	switch (e) {
		DLambda(args, body, __, eclass): {
			nacc = fold(args, acc, \nacc, a -> {
				fn(nacc, a.type)
			});
			foldDTypesInDExp(body, nacc, fn)
		}
		DSwitch(value, type, cases, defaultCase, pos, eclass): {
			acc0 = foldDTypesInDExp(value, fn(acc, type), fn);
			acc1 = fold(cases, acc0, \cacc, case -> {
				foldDTypesInDExp(case.body, cacc, fn)
			});
			defaultCase ?? {
				foldDTypesInDExp(defaultCase, acc1, fn)
			} : acc1;
		}
		DDowncast(oldid, newid, subtype, supertype, scope, pos, eclass): {
			nacc = fn(acc, subtype);
			foldDTypesInDExp(scope, nacc, fn)
		}
		DCast(value, target, pos): {
			foldDTypesInDExp(value, fn(acc, target), fn);
		}
		DTyped(value, subtype, pos, eclass): {
			foldDTypesInDExp(value, fn(acc, subtype), fn);
		}
		default: {
			ch = getDExpChildren(e);
			fold(ch, acc, \nacc, ee -> {
				foldDTypesInDExp(ee, nacc, fn)
			})
		}
	}
}

extractDTypars(acc : Set<string>, d : DType) -> Set<string> {
	switch (d) {
		DTypePar(id, pos): insertSet(acc, id);
		DTypeName(id, typars, pos): fold(typars, acc, extractDTypars);
		DTypeFunction(args, returnType, pos): {
			nacc = fold(args, acc, extractDTypars);
			extractDTypars(nacc, returnType);
		}
	}
}

makeDFieldMap(structs : Tree<string, DStruct>) -> Tree<string, [string]> {
	foldTree(structs, makeTree(), \st, stru, acc -> {
		fold(stru.structArgs, acc, \acc2, sa -> {
			treePushToArrayValue(acc2, sa.id, st)
		})
	});
}

makeDSupers(unions : Tree<string, DUnion>) -> Tree<string, [string]> {
	foldTree(unions, makeTree(), \un, uni, acc -> {
		fold(uni.types, acc, \acc2, tn -> {
			treePushToArrayValue(acc2, tn.id, un)
		})
	});
}

makeDSubtypes(unions : Tree<string, DUnion>) -> Tree<string, [string]> {
	foldTree(unions, makeTree(), \un, uni, acc -> {
		fold(uni.types, acc, \acc2, tn -> {
			treePushToArrayValue(acc2, un, tn.id)
		})
	});
}

makeDUnionFields(unions : Tree<string, DUnion>, structs : Tree<string, DStruct>) -> Tree<string, Set<string>> {
	typenameFields = makeDStructFields(structs);
	foldTree(unions, makeTree(), \un, uni, acc -> {
		fields = getDTypenameFields(unions, typenameFields, un);
		if (!isEmptySet(fields)) {
			// println(un + " has " + toString(set2array(fields)));
			setTree(acc, un, fields);
		} else acc;
	});
}

getDTypenameFields(
	unions : Tree<string, DUnion>, 
	typenameFields : Tree<string, [string]>,
	typename : string,
) -> Set<string> {
	munion = lookupTree(unions, typename);
	munion ?? {
		foldi(munion.types, makeSet(), \i, acc, type -> {
			fields = getDTypenameFields(unions, typenameFields, type.id);
			if (i == 0) {
				fields;
			} else {
				intersectSets(fields, acc);
			}
		});
	} : {
		buildSet(getTreeArrayValue(typenameFields, typename));
	}
}

// What fields does each struct have?
makeDStructFields(structs : Tree<string, DStruct>) -> Tree<string, [string]> {
	foldTree(structs, makeTree(), \st, stru, acc -> {
		fold(stru.structArgs, acc, \acc2, sa -> {
			treePushToArrayValue(acc2, st, sa.id)
		})
	});
}
