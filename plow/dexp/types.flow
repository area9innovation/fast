import plow/dexp/rec;

export {
	extractDTyparsFromDExp(e : DExp) -> Set<string>;

	// Visit all types in this expression
	foldDTypesInDExp(e : DExp, i : ?, fn : (?, DType) -> ?) -> ?;

	// Find all type-pars in this type
	extractDTypars(acc : Set<string>, d : DType) -> Set<string>;

	// Build a map from field to structs that have that field
	makeDFieldMap(structs : Tree<string, DStruct>) -> Tree<string, [string]>;
}

extractDTyparsFromDExp(e : DExp) -> Set<string> {
	foldDTypesInDExp(e, makeSet(), extractDTypars);
}

foldDTypesInDExp(e : DExp, acc : ?, fn : (?, DType) -> ?) -> ? {
	switch (e) {
		DLambda(args, body, __, tyvar): {
			nacc = fold(args, acc, \nacc, a -> {
				fn(nacc, a.type)
			});
			foldDTypesInDExp(body, nacc, fn)
		}
		DSwitch(value, type, cases, defaultCase, pos, tyvar): {
			acc0 = foldDTypesInDExp(value, fn(acc, type), fn);
			acc1 = fold(cases, acc0, \cacc, case -> {
				foldDTypesInDExp(case.body, cacc, fn)
			});
			defaultCase ?? {
				foldDTypesInDExp(defaultCase, acc1, fn)
			} : acc1;
		}
		DDowncast(var, subtype, scope, pos, tyvar): {
			nacc = fn(acc, subtype);
			foldDTypesInDExp(scope, nacc, fn)
		}
		DCast(value, target, pos): {
			foldDTypesInDExp(value, fn(acc, target), fn);
		}
		DTyped(value, subtype, pos): {
			foldDTypesInDExp(value, fn(acc, subtype), fn);
		}
		default: {
			ch = getDExpChildren(e);
			fold(ch, acc, \nacc, ee -> {
				foldDTypesInDExp(ee, nacc, fn)
			})
		}
	}
}

extractDTypars(acc : Set<string>, d : DType) -> Set<string> {
	switch (d) {
		DTypePar(id, pos): insertSet(acc, id);
		DTypeName(id, typars, pos): fold(typars, acc, extractDTypars);
		DTypeFunction(args, returnType, pos): {
			nacc = fold(args, acc, extractDTypars);
			extractDTypars(nacc, returnType);
		}
	}
}

makeDFieldMap(structs : Tree<string, DStruct>) -> Tree<string, [string]> {
	foldTree(structs, makeTree(), \st, stru, acc -> {
		fold(stru.structArgs, acc, \acc2, sa -> {
			treePushToArrayValue(acc2, sa.id, st)
		})
	});
}
