import plow/types/ugraph/tmap;

test(tmap, subtypes, uniques, unknownSubtypes, pos) {
	// Unify the typars of identical typenames
	nameGroups : Tree<string, [TNodeName]> = fold(subtypes, makeTree(), \acc, st -> {
		treePushToArrayUnique(acc, st.name, st)
	});
	unis : Pair<[TNodeName], [TNode]> = foldTree(nameGroups, Pair([], []), \name, group, acc -> {
		if (length(group) > 1) {
			merged = foldi(tail(group), group[0], \i, nn, acc2 : TNode -> {
				mergeTNodes(tmap, acc2, nn);
			});
			switch (merged) {
				TNodeName(__, __, __): Pair(arrayPush(acc.first, merged), acc.second);
				default: {
					Pair(acc.first, arrayPush(acc.second, merged));
				}
			}
		} else Pair(concat(acc.first, group), acc.second);
	});
	if (unis.second == []) {
		TNodeSupertype(uniques, unis.first, unknownSubtypes, pos);
	} else {
		println("TODO: We found a non-named thing in a supertype");
		println(unis.second);
		TNodeSupertype(uniques, unis.first, unknownSubtypes, pos);
	}
}

mergeTNodes(tmap : TMap, left : TNode, right : TNode) -> TNode {
	left
}
