import plow/dexp/dexp;
import plow/dexp/pretty;
import plow/types/typeenv;
import plow/types/builtin;
import plow/bexp/bexp;

export {
	dexp2bexp(env : BExpEnv, d : DExp) -> BExp;

	BExpEnv(
		egraph : EGraph<TType>,
		eclassType : Tree<int, TType>,
	);

	resolveBType(env : BExpEnv, tyvar : int) -> BType;
}

resolveBType(env : BExpEnv, tyvar : int) -> BType {
	eclass = addEExp(env.egraph, TTypeVar(tyvar));
	// println("a" + i2s(tv) + " is in " + i2s(eclass) );
	mtype = lookupTree(env.eclassType, eclass);
	mtype ?? {
		ttype2btype(env, mtype)
	} : {
		println("TODO: Report type error for " + i2s(tyvar) + "!");
		BTypeName("Error!", []);
	}
}

dexp2bexp(env : BExpEnv, d : DExp) -> BExp {
	todo = \ -> {
		println("TODO: dexp2bexp for " + d.structname);
		// prettyDExp("", "", d);
		BString("ERROR!");
	}
	rec = \ee -> {
		dexp2bexp(env, ee);
	}
	type = \tv : int -> resolveBType(env, tv);
	switch (d) {
		DVoid(pos): BVoid();
		DBool(v, pos): BBool(v);
		DInt(v, pos): BInt(v);
		DDouble(v, pos): BDouble(v);
		DString(v, pos): BString(v);
		DStringInclude(path, pos): {
			BString(getFileContent(path));
		}
		DVar(id, pos, tyvar): BVar(id, type(tyvar));
		DLet(id, value, body, pos, tyvar): BLet(id, rec(value), rec(body), type(tyvar));
		DIf(cond, then, else_, pos, tyvar): BIf(rec(cond), rec(then), rec(else_), type(tyvar));
		DCall(fn, args, pos, tyvar): {
			BCall(rec(fn), map(args, rec), type(tyvar))
		}
		DConstruct(structid, args, pos, tyvar): {
			todo();
		}
		DLambda(args, body, pos, tyvar): {
			BLambda(map(args, \a -> a.id), rec(body), type(tyvar));
		}
		DRef(value, pos, tyvar): {
			typ = type(tyvar);
			// The type of __ref is not right, but should not matter. It is really (typar_0_of(typ)) -> typ
			BCall(BVar("__ref", typ), [rec(value)], typ);
		}
		DField(value, field, pos, tyvar): todo();
		DSetMutable(lhs, field, value, pos, tyvar): todo();
		DArray(exps, pos, tyvar): todo();
		DSequence(exps, pos, tyvar): BSequence(map(exps, rec), type(tyvar));
		DSwitch(value, stype, cases, defaultCase, pos, tyvar): {
			swtype = type(value.tyvar);
			BSwitch(
				BVar(value.id, swtype), swtype,
				map(cases, \case : DCase -> {
					BCase(case.id, rec(case.body))
				}),
				defaultCase ?? {
					Some(rec(defaultCase))
				} : None(),
				type(tyvar)
			);
		}
		DCast(value, target, pos): todo();
		DDowncast(value, subtype, scope, pos, tyvar): todo();
		DTyped(value, subtype, pos): rec(value);
		DWith(struct, value, fields, pos, tyvar): todo();
	}
}

ttype2btype(env : BExpEnv, type : TType) -> BType {
	switch (type) {
		TTypeName(id, typars): BTypeName(id, map(typars, \tp -> ttype2btype(env, tp)));
		TTypeVar(tyvar): {
			BTypeName("ERROR TYVAR " + i2s(tyvar), []);
		}
		TTypeFunction(args, returnType): {
			BTypeFunction(map(args, \a -> ttype2btype(env, a)), ttype2btype(env, returnType));
		}
		TTypeOverload(tt, overloads): {
			println(overloads);
			BTypeName("ERROR overload " + toString(tt), []);
		}
		TTypeSupertype(__, subtypes): {
			BTypeName("ERROR supertype", []);
		}
	}
}
