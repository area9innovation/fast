import plow/dexp/desugar;
import plow/modules;
import ds/set;
import sys/concurrent;

export {
	// A structure to help do lookups in the modules import tree
	BLookupFromImport(
		// A function to lookup a name in a module (not transitively)
		lookup : (BModule, string) -> Maybe<?>,
		// A function to check if this name is exported
		isExported : (BModule, string) -> bool,
		// An error reporter
		onError : (flowpath : string, value : ?, error : string) -> void,
		// A cache to speed up the matching
		cache : ref Tree<string, ?>,
		// During a lookup, we keep track of what modules have been visited
		visited : ref Set<string>,
	);
	
	// This is the main function to find a given id
	lookupFromImport(modules : BModules, m : BLookupFromImport<?>, imports : [DImport], name : string) -> Maybe<?>;
}

lookupFromImport(modules : BModules, m : BLookupFromImport<?>, imports : [DImport], name : string) -> Maybe<?> {
	m.visited := makeSet();
	doImportLookup(modules, m, imports, name);

	// TODO: If none, then we could check all modules to try to find it as a fallback
}

doImportLookup(modules : BModules, m : BLookupFromImport<?>, imports : [DImport], name : string) -> Maybe<?> {
	seen = lookupTree(^(m.cache), name);
	seen ?? {
		Some(seen)
	} : {
		mfind = fold(imports, None(), \acc, impor : DImport -> {
			if (acc == None()) {
				module : BModule = getCachedBModule(modules, impor.path);
				modfind = m.lookup(module, name);
				switch (modfind) {
					None(): {
						// OK, not found in our module, so we have to check the imports
						m.visited := insertSet(^(m.visited), impor.path);
						doImportLookup(modules, m, module.imports, name);
					}
					Some(f): {
						if (!m.isExported(module, name)) {
							m.onError(module.fullpath, f, name + " is not exported");
						};
						Some(f);
					}
				}
			} else acc;
		});
		mfind ?? {
			// OK, add to the cache
			m.cache := setTree(^(m.cache), name, mfind);
			Some(mfind);
		} : {
			None();
		}
	}
}
