

Compiling tests/array.fast

array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:33:8: a15 = Array<a44> which was already Array<a38>
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
Saved ./obj/array.flow (already had correct content)
TODO: Type for C FTypeCall("?", [])
TODO: Type for C FTypeCall("??", [])
TODO: Type for C FTypeCall("?", [])
TODO: Type for C FTypeCall("??", [])
TODO: Type for C FTypeCall("Array", [FTypeInt(32)])
TODO: Type for C FTypeCall("Array", [FTypeInt(32)])
TODO: Type for C FTypeCall("Array", [FTypeInt(32)])
Saved ./obj/array.c (already had correct content)
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
Saved ./obj/array/array.java (already had correct content)
Made 'array' java library
GCC failed
./obj/array.c: In function ‘test’:
./obj/array.c:22:9: warning: incompatible implicit declaration of built-in function ‘index’ [enabled by default]
 println(index(c0, 0, 0));
         ^
./obj/array.c:22:1: warning: passing argument 1 of ‘index’ makes pointer from integer without a cast [enabled by default]
 println(index(c0, 0, 0));
 ^
./obj/array.c:22:1: note: expected ‘const char *’ but argument is of type ‘int32_t’
./obj/array.c:22:1: error: too many arguments to function ‘index’
./obj/array.c:22:1: warning: passing argument 1 of ‘println’ makes integer from pointer without a cast [enabled by default]
./obj/array.c:9:6: note: expected ‘int32_t’ but argument is of type ‘char *’
 void println(int32_t s) {
      ^
./obj/array.c:23:1: warning: passing argument 1 of ‘index’ makes pointer from integer without a cast [enabled by default]
 println(index(c0, 1, 0));
 ^
./obj/array.c:23:1: note: expected ‘const char *’ but argument is of type ‘int32_t’
./obj/array.c:23:1: error: too many arguments to function ‘index’
./obj/array.c:23:1: warning: passing argument 1 of ‘println’ makes integer from pointer without a cast [enabled by default]
./obj/array.c:9:6: note: expected ‘int32_t’ but argument is of type ‘char *’
 void println(int32_t s) {
      ^
./obj/array.c:24:1: warning: passing argument 1 of ‘index’ makes pointer from integer without a cast [enabled by default]
 println(index(c0, 2, 0));return;
 ^
./obj/array.c:24:1: note: expected ‘const char *’ but argument is of type ‘int32_t’
./obj/array.c:24:1: error: too many arguments to function ‘index’
./obj/array.c:24:1: warning: passing argument 1 of ‘println’ makes integer from pointer without a cast [enabled by default]
./obj/array.c:9:6: note: expected ‘int32_t’ but argument is of type ‘char *’
 void println(int32_t s) {
      ^


1
Compilation failed
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: i32
Saved ./obj/array.js (already had correct content)
Saved ./www/array.js
All done


Compiling tests/client_server.fast

array.fast:31:59: a15 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
Saved ./obj/docker-compose.yaml (already had correct content)
Saved ./out/docker-compose.yaml
All done
Saved ./obj/dockerfile_local (already had correct content)
Saved ./out/dockerfile_local.
All done
Saved ./obj/dockerfile_production (already had correct content)
Saved ./out/dockerfile_production.
All done
Saved ./obj/server.flow (already had correct content)
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
Saved ./obj/server/server.java (already had correct content)
Made 'server' java library
Java succeeded
Made executable 'server.jar'
Run with 'java -cp server.jar server.server'
All done
Implement in HTML backend: flow::client_main()/* i0*/ 
Saved ./obj/client.html (already had correct content)
Saved ./obj/client.flow (already had correct content)
Saved ./www/client.html
All done


Compiling tests/compiletime.fast

Saved ./obj/output.fast (already had correct content)
Saved ./out/output.fast
All done


Compiling tests/dynamic_loading.fast

dynamic_loading.fast:12:15: a62 = Promise<a57, a58> which was already Promise<a63, a64>
dynamic_loading.fast:12:15: a62 = Promise<a63, a64> which was already Promise<a57, a58>
dynamic_loading.fast:12:15: a62 = Promise<a57, a58> which was already Promise<a63, a64>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
tests/dynamic_loading.fast:10:4: Type check: Unresolved overload of 'done : (Promise<i0, string>, () -> i0, () -> i0) -> i0'. Candidates: (Promise<?, ??>, (?) -> i0) -> i0, (Promise<?, ??>, (?) -> i0, (??) -> i0) -> i0
tests/dynamic_loading.fast:10:4: Type check: Unresolved overload of 'done : (Promise<i0, string>, () -> i0, () -> i0) -> i0'. Candidates: (Promise<?, ??>, (?) -> i0) -> i0, (Promise<?, ??>, (?) -> i0, (??) -> i0) -> i0
Saved ./obj/dynamic_library.js (already had correct content)
Saved ./www/dynamic_library.js
All done
Saved ./obj/dynamic_loading.js (already had correct content)
Saved ./www/dynamic_loading.js
All done


Compiling tests/euler1.fast

promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
TODO: Type for C FTypeCall("?", [])
TODO: Type for C FTypeCall("??", [])
TODO: Type for C FTypeCall("?", [])
TODO: Type for C FTypeCall("??", [])
Saved ./obj/euler1.c (already had correct content)
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
Saved ./obj/euler1/euler1.java (already had correct content)
Made executable './out/euler1'
Java succeeded
Made executable 'euler1.jar'
Run with 'java -cp euler1.jar euler1.euler1'
All done
Saved ./obj/euler1.html (already had correct content)
Saved ./obj/euler1.js (already had correct content)
Saved ./obj/euler1.flow (already had correct content)
TODO: We assume recursion in foldRange is tail-recursion
Saved ./obj/euler1.wat (already had correct content)
Made 'euler1_lib.flow.js'
Made './www/euler1.wasm'
Saved ./www/euler1.html
Saved ./www/euler1.js
Made './www/euler1.wasm'
All done


Compiling tests/fact.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 12, 29))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 12, 29))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 12, 29))
Saved ./obj/fact.html (already had correct content)
Saved ./obj/fact.js (already had correct content)
Saved ./obj/fact.flow (already had correct content)
TODO: WASM does not support calling polymorphic function println in js
TODO: Type for wasm FTypeCall("?", [])
Saved ./obj/fact.wat (already had correct content)
Made 'fact_lib.flow.js'
Made './www/fact.wasm'
Saved ./www/fact.html
Saved ./www/fact.js
Made './www/fact.wasm'
All done


Compiling tests/fact_c.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
Saved ./obj/fact.c (already had correct content)
Made executable './out/fact'
All done


Compiling tests/fact_flow.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
Saved ./obj/fact_flow.flow (already had correct content)
Saved ./obj/fact_flow/fact_flow.java (already had correct content)
Made 'fact_flow' host java runtime
Java succeeded
Made executable 'fact_flow.jar'
Run with 'java -cp fact_flow.jar fact_flow.fact_flow'
All done


Compiling tests/fact_flow_js.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
Saved ./obj/fact1JS.js (already had correct content)
Saved ./obj/fact1JS.flow (already had correct content)
Made 'fact1JS_lib.flow.js'
Saved ./www/fact1JS.js
All done
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
Saved ./obj/fact2JS.js (already had correct content)
Saved ./obj/fact2JS.flow (already had correct content)
Made 'fact2JS_host.flow.js' host JS runtime
Saved ./www/fact2JS.js
All done


Compiling tests/fact_java.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
Saved ./obj/fact_java.flow (already had correct content)
Saved ./obj/fact_java/fact_java.java (already had correct content)
Made 'fact_java' java library
Java succeeded
Made executable 'fact_java.jar'
Run with 'java -cp fact_java.jar fact_java.fact_java'
All done


Compiling tests/fact_java_specialized.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
Saved ./obj/fact1.flow (already had correct content)
Saved ./obj/fact1/fact1.java (already had correct content)
Made 'fact1' java library
Java succeeded
Made executable 'fact1.jar'
Run with 'java -cp fact1.jar fact1.fact1'
All done
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 4, 29))
Saved ./obj/fact2.flow (already had correct content)
Saved ./obj/fact2/fact2.java (already had correct content)
Made 'fact2' host java runtime
Java succeeded
Made executable 'fact2.jar'
Run with 'java -cp fact2.jar fact2.fact2'
All done


Compiling tests/fact_js.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
Saved ./obj/fact_js.html (already had correct content)
Saved ./obj/fact_js.js (already had correct content)
Saved ./www/fact_js.html
Saved ./www/fact_js.js
All done


Compiling tests/fact_js_calls_c.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
Saved ./obj/test.js (overwrote existing file)
Saved ./obj/test.c (already had correct content)
Saved ./www/test.js
EMCC failed
/bin/bash: emcc: command not found


127
Compilation failed


Compiling tests/fact_js_calls_rust.fast

TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 7, 12))
Saved ./obj/test.js (overwrote existing file)
Saved ./obj/test.rs (already had correct content)
Saved ./www/test.js (overwrote existing file)
Creating a rust library 'rust_lib_test' with cargo failed
Maybe cargo is not installed?
/bin/bash: cargo: command not found


127
Compilation failed


Compiling tests/fact_rust.fast

array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 5, 29))
Saved ./obj/fact.rs (already had correct content)
rustc failed
/bin/bash: rustc: command not found


127
Compilation failed


Compiling tests/first_order.fast

Saved ./obj/first_order.c (already had correct content)
Made executable './out/first_order'
All done


Compiling tests/floats.fast

Saved ./obj/floats/floats.java (already had correct content)
Java succeeded
Made executable 'floats.jar'
Run with 'java -cp floats.jar floats.floats'
All done


Compiling tests/inference.fast

Saved ./obj/inference/inference.java (already had correct content)
Java succeeded
Made executable 'inference.jar'
Run with 'java -cp inference.jar inference.inference'
All done


Compiling tests/keywords.fast

Saved ./obj/keywords.c (already had correct content)
Made executable './out/keywords'
All done


Compiling tests/meta.fast

 
 
tests/meta: 102:45: Expected , or > after type. Got id 'type1'
tests/meta: 102:45: Expected ; after typedef. Got id 'type1'
tests/meta.fast:102:35: Type check: Unknown id typeof
tests/meta.fast:102:35: Type check: Can only call function type, not infer
tests/meta.fast:102:41: Type check: Unknown type a223
tests/meta.fast:102:35: Type check: Unknown id typeof
tests/meta.fast:102:35: Type check: Can only call function type, not infer
tests/meta.fast:102:41: Type check: Unknown type a223
TODO: Could not resolve overload to fact
FastOverload("", "fact", [FTypeInt(32)], [FEffectInfer()])
[Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])), Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()]))]
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
TODO: Could not resolve overload to fact
FastOverload("", "fact", [FTypeInt(32)], [FEffectInfer()])
[Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])), Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()]))]
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
TODO: Could not resolve overload to fact
FastOverload("", "fact", [FTypeInt(32)], [FEffectInfer()])
[Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])), Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()]))]
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
TODO: Could not resolve overload to fact
FastOverload("", "fact", [FTypeInt(32)], [FEffectInfer()])
[Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])), Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()]))]
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
TODO: Could not resolve overload to fact
FastOverload("", "fact", [FTypeInt(32)], [FEffectInfer()])
[Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])), Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()]))]
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
TODO: Could not resolve overload to fact
FastOverload("", "fact", [FTypeInt(32)], [FEffectInfer()])
[Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])), Pair(0, FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()]))]
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
FastOverload("", "fact__fi32ri0", [FTypeInt(32)], [FEffectInfer()])
TODO: Assuming side effects in call to FVar("fact", FInfo(FTypeFunction([FTypeInt(32)], FTypeInt(32)), FEffectInfer(), 92, 13))
Saved ./obj/meta.js (already had correct content)
Saved ./www/meta.js
All done


Compiling tests/outputs.fast

Saved ./obj/output1.js (already had correct content)
Saved ./www/output1.js
All done
Saved ./obj/output2.js (already had correct content)
Saved ./www/output2.js
All done


Compiling tests/overload.fast

Saved ./obj/overload/overload.java (already had correct content)
Java succeeded
Made executable 'overload.jar'
Run with 'java -cp overload.jar overload.overload'
All done


Compiling tests/parser.fast

promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
Saved ./obj/parser.js (already had correct content)
Saved ./www/parser.js
All done


Compiling tests/partial_call_test.fast



             



             

array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:33:8: a15 = Array<a44> which was already Array<a38>
tests/partial_call_test.fast:24:44: TODO: Unify ?? and i32
tests/partial_call_test.fast:24:44: TODO: Unify ??? and i32
partial_call.fast:31:25: Type check: Unknown id getFreshIdCounter
partial_call.fast:31:25: Type check: Can only call function type, not infer
partial_call.fast:31:25: Type check: Unknown id getFreshIdCounter
partial_call.fast:31:25: Type check: Can only call function type, not infer
tests/partial_call_test.fast:1:0: Type check: Unknown type (i32) -> a527
tests/partial_call_test.fast:1:0: Type check: Unknown type (i32) -> a527
tests/partial_call_test.fast:16:4: Type check: Unknown id quit
tests/partial_call_test.fast:16:4: Type check: Can only call function type, not infer
tests/partial_call_test.fast:16:4: Type check: Unknown id quit
tests/partial_call_test.fast:16:4: Type check: Can only call function type, not infer
Unresolved tyvar 527
Unresolved tyvar 527
Unresolved tyvar 528
Unresolved tyvar 528
Unresolved tyvar 528
Saved ./obj/partial_call.flow (already had correct content)
All done


Compiling tests/pointers.fast

Saved ./obj/pointers.c (already had correct content)
Made executable './out/pointers'
All done


Compiling tests/polymorphism.fast

Saved ./obj/polymorphism/polymorphism.java (already had correct content)
Java succeeded
Made executable 'polymorphism.jar'
Run with 'java -cp polymorphism.jar polymorphism.polymorphism'
All done
Saved ./obj/polymorphism.js (already had correct content)
Saved ./obj/polymorphism.flow (already had correct content)
Saved ./obj/polymorphism.wat (already had correct content)
Made './www/polymorphism.wasm'
Saved ./www/polymorphism.js
Made './www/polymorphism.wasm'
All done


Compiling tests/promise.fast

promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
promise.fast:41:4: Type check: Can only call function type, not Promise<?, ??>
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
TODO: Type for Java FTypeCall("?", [])
TODO: Type for Java FTypeCall("??", [])
Could not find first-order type ((inline java{String}) -> i0, (inline java{String}) -> i0) -> i0
  First_order_fn_type0:(inline java{String}) -> i0
TODO: Type for Java FTypeFunction([FTypeFunction([FInlineType("java", [FInlineString("String", 14, 37)], [])], FTypeInt(0)), FTypeFunction([FInlineType("java", [FInlineString("String", 14, 37)], [])], FTypeInt(0))], FTypeInt(0))
Could not find first-order type ((inline java{String}) -> i0, (inline java{String}) -> i0) -> i0
  First_order_fn_type0:(inline java{String}) -> i0
TODO: Type for Java FTypeFunction([FTypeFunction([FInlineType("java", [FInlineString("String", 14, 37)], [])], FTypeInt(0)), FTypeFunction([FInlineType("java", [FInlineString("String", 14, 37)], [])], FTypeInt(0))], FTypeInt(0))
Could not find first-order type ((inline java{String}) -> i0, (inline java{String}) -> i0) -> i0
  First_order_fn_type0:(inline java{String}) -> i0
TODO: Type for Java FTypeFunction([FTypeFunction([FInlineType("java", [FInlineString("String", 14, 37)], [])], FTypeInt(0)), FTypeFunction([FInlineType("java", [FInlineString("String", 14, 37)], [])], FTypeInt(0))], FTypeInt(0))
Saved ./obj/promise/promise.java (already had correct content)
javac failed: -cp . @sources_promise -encoding UTF-8
C:\fast\obj\promise\promise.java:22: error: int cannot be dereferenced
		promise.invoke(fulfill, reject);return;}
		       ^
C:\fast\obj\promise\promise.java:25: error: cannot find symbol
		done__faPromiseastring_astring_fastringri0_fastringri0ri0(promise, fulfill, ignore_first_order_fn);return;}
		                                                                            ^
  symbol:   variable ignore_first_order_fn
  location: class promise
C:\fast\obj\promise\promise.java:29: error: cannot find symbol
		p = fetch.invoke("https://ghibliapi.herokuapp.com/people");
		    ^
  symbol:   variable fetch
  location: class promise
3 errors


1
Compilation failed
Saved ./obj/promise.js (already had correct content)
Saved ./obj/promise.flow (already had correct content)
Made 'promise_lib.flow.js'
Saved ./www/promise.js
All done


Compiling tests/reflection.fast

Saved ./obj/reflection.c (already had correct content)
Made executable './out/reflection'
All done


Compiling tests/specialize.fast

Saved ./obj/specialize/specialize.java (already had correct content)
Java succeeded
Made executable 'specialize.jar'
Run with 'java -cp specialize.jar specialize.specialize'
All done


Compiling tests/statement.fast

Saved ./obj/statement.flow (already had correct content)
Saved ./obj/statement.c (already had correct content)
Saved ./obj/statement/statement.java (already had correct content)
Made 'statement' java library
Made executable './out/statement'
Java succeeded
Made executable 'statement.jar'
Run with 'java -cp statement.jar statement.statement'
All done
Saved ./obj/statement.js (already had correct content)
Saved ./obj/statement.flow (already had correct content)
Saved ./obj/statement.wat (already had correct content)
Made 'statement_lib.flow.js'
Made './www/statement.wasm'
Saved ./www/statement.js
Made './www/statement.wasm'
All done


Compiling tests/string2int.fast

array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:43:18: a43 = Array<a44> which was already Array<a38>
array.fast:43:18: a43 = Array<a38> which was already Array<a44>
array.fast:33:8: a15 = Array<a44> which was already Array<a38>
tests/string2int.fast:34:4: Type check: Unknown id quit
tests/string2int.fast:34:4: Type check: Can only call function type, not infer
tests/string2int.fast:34:4: Type check: Unknown id quit
tests/string2int.fast:34:4: Type check: Can only call function type, not infer
TODO: Assuming side effects in call to FVar("i2s", FInfo(FTypeFunction([FTypeInt(32)], FTypeCall("string", [])), FEffectInfer(), 57, 15))
TODO: Assuming side effects in call to FVar("digit2s", FInfo(FTypeFunction([FTypeInt(32)], FTypeCall("string", [])), FEffectInfer(), 64, 22))
TODO: Assuming side effects in call to FVar("i2s", FInfo(FTypeFunction([FTypeInt(32)], FTypeCall("string", [])), FEffectInfer(), 64, 14))
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: string
TODO: Assuming side effects in call to FVar("array__fa_ri0", FInfo(FTypeFunction([FTypeCall("string", [])], FTypeCall("Array", [FTypeCall("string", [])])), FEffectInfer(), 22, 24))
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: string
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: string
TODO: Assuming side effects in call to FVar("digit2i", FInfo(FTypeFunction([FTypeCall("string", [])], FTypeInt(32)), FEffectInfer(), 36, 30))
TODO: Assuming side effects in call to FVar("digit2i", FInfo(FTypeFunction([FTypeCall("string", [])], FTypeInt(32)), FEffectInfer(), 36, 30))
TODO: Assuming side effects in call to FVar("digit2i", FInfo(FTypeFunction([FTypeCall("string", [])], FTypeInt(32)), FEffectInfer(), 36, 30))
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: ?
TODO: When inlining, we should instantiate the polymorphism in the body like this:
?: ?
Saved ./obj/str2i_test.flow (already had correct content)
All done


Compiling tests/string_test.fast

Saved ./obj/string_test/string_test.java (already had correct content)
Java succeeded
Made executable 'string_test.jar'
Run with 'java -cp string_test.jar string_test.string_test'
All done
Saved ./obj/string_test.js (already had correct content)
Saved ./www/string_test.js
All done


Compiling tests/tuples.fast

Saved ./obj/tuples.c (already had correct content)
Saved ./obj/tuples/tuples.java (already had correct content)
Made executable './out/tuples'
Java succeeded
Made executable 'tuples.jar'
Run with 'java -cp tuples.jar tuples.tuples'
All done
Saved ./obj/tuples.js (already had correct content)
Saved ./obj/tuples.flow (already had correct content)
Made 'tuples_lib.flow.js'
Saved ./www/tuples.js
All done


Compiling tests/type_expr.fast

Saved ./obj/type_expr/type_expr.java (already had correct content)
Java succeeded
Made executable 'type_expr.jar'
Run with 'java -cp type_expr.jar type_expr.type_expr'
All done
