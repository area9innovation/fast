import ds/reducer;
import material/material;
import material/material2tropic;

/*
TODO:
- Update the RAssign. Have a wrapper which uses behaviours?
- Try a version using HTML. Can we express a reducer for HTML?

  html.body.p = "Hello world";
  html.body.p.style = "Bold";

- Figure out how assignments can be compositional
*/

REditor(
	document : Behaviour<[RAssign<?>]>,
	// Where are the cursors?
	cursor : Behaviour<[RLValue]>,
	// What leading path are we focusing on?
	focus : Behaviour<RLValue>,
	// What elements are selected?
	selected : Behaviour<[RLValue]>,
	// What elements are collapsed?
	collapsed : Behaviour<[RLValue]>,
	// How to edit a given value
	editValue : (e : RAssign<?>, cursor : bool, selected : bool) -> Material,
);

makeView(e : REditor<?>) -> Material {
	MSelect3(
		e.document, e.cursor, e.selected,
		\assigns : [RAssign<?>], cursor, selected -> {
			MLines(
				map(
					assigns,
					\a -> {
						e.editValue(a, contains(cursor, a.lvalue), contains(selected, a.lvalue))
					}
				)
			)
		}
	);
}

makeREditor(doc : [RAssign<?>], editFn : (e : RAssign<?>, cursor : bool, selected : bool) -> Material) -> REditor {
	REditor(
		make(doc),
		make(if (doc != []) [doc[0].lvalue] else []),
		make(RLeaf()),
		make([]),
		make([]),
		editFn
	);
}


viewRAssignJson(l : RAssign<Json>, cursor : bool, selected : bool) -> Material {
	todo = \ -> MText("todo", []);
	MBaselineCols([
		viewRLValue(l.lvalue),
		switch (l.value : Json) {
			JsonObject(members): todo();
			JsonArray(value): todo();
			JsonNull(): MText("null", []);
			JsonBool(v): MCheckBox(MText("bool",[]), make(v), []);
			JsonString(s): MTextInput(make(s), [], []);
			JsonDouble(value): MTextInput(make(d2s(value)), [], []);
		}
	])
}

viewRLValue(l : RLValue) -> Material {
	switch (l) {
		RLeaf(): MText(": ", []);
		RLObject(key, rvalue): MCols([MText(key + ".", []), viewRLValue(rvalue)]);
		RLArray(rvalue): MCols([MText("[]", []), viewRLValue(rvalue)]);
	}
}

main() {
	json1 = parseJson("
		{
			a: 0,
			b: [
				1,
				2,
				3
			],
			c: {
				d: true,
				e: null
			}
		}
	");

	editor = makeREditor(rreduceJson(json1, rarray()), viewRAssignJson);

	mrender(
		makeMaterialManager([]), true,
		makeView(editor)
	);
}


/*
RAssigns(
	assignments : [RAssign]
)

renderComap(p : Topic) -> RAssigns {
	html.body.p = renderTopic(p);
}

renderComap(Reducer<Topic>) -> Reducer<Html>;

Curator:


renderTopic(p : Topic) -> RAssigns {
	RAssigns(
		[
			table.tr[0] = RAssigns([
				td[0] = p.topic;
				rowspan = length(p.children());
				yalign = center;
			]),
			mapi(p.children(), \i, child -> {
				table.tr[i].td[1] = renderTopic(child);
			})
		]
	)
}

htmlRAssign(acc : MHTMLStage, assign : RAssign<string>) -> MHTMLStage {

}

*/
