import material/material2tropic;
import material/material_ui;

import ds/reducer;

displayHtml(html : string) -> Material {
	wh = make(WidthHeight(0.0, 0.0));
	MInspect([IAvailable(wh)], 
		MHTMLStage(wh, \stage -> {
			element = createElement("div");

			setAttribute(element, "innerHTML", html);
			appendChild(stage, element);
			\ -> {
				removeElementChild(stage, element);
			}
		})
	)	
}

htmlRAssign(element : native, assign : RAssign<string>) -> native {
	switch (assign.lvalue) {
		RLeaf(): {
			setAttribute(element, "innerHTML", assign.value);
			element;
		}
		RLObject(key, rvalue): {
			if (contains([
					"html", "body", "td", "p", "h1", "h2", "h3", "div", "pre", "blockquote", "ol", "ul", "li",
					"a", "em", "i", "b", "strong", "code", "table", "thead", "tbody", "td", "tr", "th",
					"span", "u", "sup", "sub", "br", "hr", "img"
				], key)) {
				// A new element
				nelement = createElement(key);
				appendChild(element, nelement);
				htmlRAssign(nelement, RAssign(rvalue, assign.value));
			} else {
				// OK, we assume it is an attribute
				println("TODO: Figure out how to set attribute on this element");
				element;
			}
		}
		RLArray(rvalue): {
			println("TODO: Figure out how to set array value");
			element;
		}
	}
}

