import runtime;

export {
	partialCall(fn : (?) -> ??, arg : ?) -> () -> ??;

	partialCall(fn : (?, ??) -> ???, arg : ?) -> (??) -> ???;
	partialCall(fn : (?, ??) -> ???, arg1 : ?, arg2 : ??) -> () -> ???;

	partialCall(fn : (?, ??, ???) -> ????, arg : ?) -> (??, ???) -> ????;
	partialCall(fn : (?, ??, ???) -> ????, arg1 : ?, arg2 : ??) -> (???) -> ????;
	partialCall(fn : (?, ??, ???) -> ????, arg1 : ?, arg2 : ??, arg3 : ???) -> () -> ????;
	
	partialCall(fn : (?, ??, ???, ????) -> ?????, arg : ?) -> (??, ???, ????) -> ?????;
	partialCall(fn : (?, ??, ???, ????) -> ?????, arg1 : ?, arg2 : ??) -> (???, ????) -> ?????;
	partialCall(fn : (?, ??, ???, ????) -> ?????, arg1 : ?, arg2 : ??, arg3 : ???) -> (????) -> ?????;
	partialCall(fn : (?, ??, ???, ????) -> ?????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????) -> () -> ?????;

	partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg : ?) -> (??, ???, ????, ?????) -> ??????;
	partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??) -> (???, ????, ?????) -> ??????;
	partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??, arg3 : ???) -> (????, ?????) -> ??????;
	partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????) -> (?????) -> ??????;
	partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????, arg5 : ?????) -> () -> ??????;

	partialCall(fn : (?, ??, ???, ????, ?????, ??????) -> ???????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????) -> (?????, ??????) -> ???????;
}

// Unary function

compiletime::partialCall(fn : (?) -> ??, arg : ?) -> () -> ?? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}() -> infer {
			${fn}(${arg})
		}
	} : () -> ??
}

// Binary function

compiletime::partialCall(fn : (?, ??) -> ???, arg : ?) -> (??) -> ??? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(b : infer) -> infer {
			${fn}(${arg}, b);
		}
	} : (??) -> ???
}

compiletime::partialCall(fn : (?, ??) -> ???, arg1 : ?, arg2 : ??) -> () -> ??? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}() -> infer {
			${fn}(${arg1}, ${arg2});
		}
	} : () -> ???
}

// Ternary function

compiletime::partialCall(fn : (?, ??, ???) -> ????, arg : ?) -> (??, ???) -> ???? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(b : infer, c : infer) -> infer {
			${fn}(${arg}, b, c);
		}
	} : (??, ???) -> ????
}

compiletime::partialCall(fn : (?, ??, ???) -> ????, arg1 : ?, arg2 : ??) -> (???) -> ???? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(c : infer) -> infer {
			${fn}(${arg1}, ${arg2}, c);
		}
	} : (???) -> ????
}

compiletime::partialCall(fn : (?, ??, ???) -> ????, arg1 : ?, arg2 : ??, arg3 : ???) -> () -> ???? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}() -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3});
		}
	} : () -> ????
}


// Quaterary function

compiletime::partialCall(fn : (?, ??, ???, ????) -> ?????, arg : ?) -> (??, ???, ????) -> ????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(b : infer, c : infer, d : infer) -> infer {
			${fn}(${arg}, b, c, d);
		}
	} : (??, ???, ????) -> ?????
}


compiletime::partialCall(fn : (?, ??, ???, ????) -> ?????, arg1 : ?, arg2 : ??) -> (???, ????) -> ????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(c : infer, d : infer) -> infer {
			${fn}(${arg1}, ${arg2}, c, d);
		}
	} : (???, ????) -> ?????
}


compiletime::partialCall(fn : (?, ??, ???, ????) -> ?????, arg1 : ?, arg2 : ??, arg3 : ???) -> (????) -> ????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(d : infer) -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3}, d);
		}
	} : (????) -> ?????
}

compiletime::partialCall(fn : (?, ??, ???, ????) -> ?????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????) -> () -> ????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}() -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3}, ${arg4});
		}
	} : () -> ?????
}


// Quinterary function

compiletime::partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg : ?) -> (??, ???, ????, ?????) -> ?????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(b : infer, c : infer, d : infer, e : infer) -> infer {
			${fn}(${arg}, b, c, d, e);
		}
	} : (??, ???, ????, ?????) -> ??????
}


compiletime::partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??) -> (???, ????, ?????) -> ?????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(c : infer, d : infer, e : infer) -> infer {
			${fn}(${arg1}, ${arg2}, c, d, e);
		}
	} : (???, ????, ?????) -> ??????
}


compiletime::partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??, arg3 : ???) -> (????, ?????) -> ?????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(d : infer, e : infer) -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3}, d, e);
		}
	} : (????, ?????) -> ??????
}

compiletime::partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????) -> (?????) -> ?????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(e : infer) -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3}, ${arg4}, e);
		}
	} : (?????) -> ??????
}

compiletime::partialCall(fn : (?, ??, ???, ????, ?????) -> ??????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????, arg5 : ?????) -> () -> ?????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}() -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3}, ${arg4}, ${arg5});
		}
	} : () -> ??????
}






compiletime::partialCall(fn : (?, ??, ???, ????, ?????, ??????) -> ???????, arg1 : ?, arg2 : ??, arg3 : ???, arg4 : ????) -> (?????, ??????) -> ??????? {
	id = gensym();
	inline fast {
		${makeFVar(id)}
	} require function {
		${makeFVar(id)}(e : infer, f : infer) -> infer {
			${fn}(${arg1}, ${arg2}, ${arg3}, ${arg4}, e, f);
		}
	} : (?????, ??????) -> ???????
}
