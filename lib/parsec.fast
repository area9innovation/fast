import partial_call;
import combinators;
import tuples;
import array;

export {
    // Parser combinator library.
    // Each parser combinator generates a parser function of following two signatures:
    // 
    //    (input : string,  position : i32) -> Tuple<i32, ?>;
    //    (input : string,  position : i32, acc : ?) -> Tuple<i32, ?>;
    //
    // The return tuple components:
    // - the first one (i32) - is a new position after action of parser. In case of match failure it is -1.
    // - the second one - the result of semantic action processing on the inputs.
    //
    // Arguments to the parser combinators:
    // - other parsers: 
    //     par_1 : (string, i32) -> Tuple<i32, ?>, 
    //     par_2 : (string, i32) -> Tuple<i32, ??>, 
    //       ... 
    //     par_k : (string, i32) -> Tuple<i32, ???...?>
    //
    // - semantic_action: 
    //     (arg_1 : ?, arg_2 : ?? , ... , arg_k : ???..?) -> ???...??
    //
    // - failure value


    // Empty sequence parser combinator
    emptyParseC(
        sem_act : () -> ?
    ) -> (string, i32) -> Tuple<i32, ?>;
    emptyParseC1() -> (string, i32, ?) -> Tuple<i32, ?>;

    // Triggers at the end of the input
    inputEndParseC(
        sem_act : () -> ?,
        fail : ?
    ) -> (string, i32) -> Tuple<i32, ?>;
    inputEndParseC1() -> (string, i32, ?) -> Tuple<i32, ?>;

    // Range of chars: 'lower'-'upper' parser combinator
    rangeParseC(
        lower : i32, 
        upper : i32, 
        sem_act : (i32) -> ?,
        fail : ?
    ) -> (string, i32) -> Tuple<i32, ?>;
    rangeParseC1(lower : i32, upper : i32) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Fixed string parser combinator
    tokenParseC(
        pattern : string, 
        sem_act : (string) -> ?,
        fail : ?,
    ) -> (string, i32) -> Tuple<i32, ?>;
    tokenParseC1(pattern : string) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Apply a semantic action to a parser output
    modifyParseC(
        parser : (string, i32) -> Tuple<i32, ?>,
        sem_act : (?) -> ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;

    // Signature of semantic action:
    //    acc : ?
    //    input : string,
    //    start : i32,
    //    len : i32
    modifyParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>,
        sem_act : (?, string, i32, i32) -> ?,
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Semantic action: addVerbatim
    //    acc : ?
    //    s : string
    addVerbatimParseC1(
        sem_act : (?, string) -> ?,
        act_id : string
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Semantic action: addMatched
    //    acc : ?
    //    s : string
    addMatchedParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>,
        sem_act : (?, string) -> ?,
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Sequential parsers
    sequenceParseC(
        parser1 : (string, i32) -> Tuple<i32, ?>,
        parser2 : (string, i32) -> Tuple<i32, ??>,
        sem_act : (?, ??) -> ???,
        fail : ???
    ) -> (string, i32) -> Tuple<i32, ???>;
    sequenceParseC1(
        parser1 : (string, i32, ?) -> Tuple<i32, ?>,
        parser2 : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Ordered choice of two parsers. If some triggers, further are not operated.
    choiceParseC(
        parser1 : (string, i32) -> Tuple<i32, ?>,
        parser2 : (string, i32) -> Tuple<i32, ?>,
        sem_act : (?) -> ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    choiceParseC1(
        parser1 : (string, i32, ?) -> Tuple<i32, ?>,
        parser2 : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Ordered choice of an array of parsers. If some triggers, further are not operated.
    choiceManyParseC(
        parsers : Array<(string, i32) -> Tuple<i32, ?> >,
        sem_act : (?) -> ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    choiceManyParseC1(
        parsers : Array<(string, i32, ?) -> Tuple<i32, ?> >
    ) -> (string, i32, ?) -> Tuple<i32, ?>;


    // Kleene star
    starParseC(
        parser : (string, i32) -> Tuple<i32, ?>,
        sem_act : (Array<?>) -> ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    starParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Kleene plus
    plusParseC(
        parser : (string, i32) -> Tuple<i32, ?>,
        sem_act : (Array<?>) -> ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    plusParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Optional: may parse or not
    optionalParseC(
        parser : (string, i32) -> Tuple<i32, ?>,
        sem_act : (?) -> ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    optionalParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // And predicate: must match the input, but do not consume input stream
    andPredicateParseC(
        parser : (string, i32) -> Tuple<i32, ?>,
        success : ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    andPredicateParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;

    // Not predicate: must mismatch the input, do not consume input stream
    notPredicateParseC(
        parser : (string, i32) -> Tuple<i32, ?>,
        success : ??,
        fail : ??
    ) -> (string, i32) -> Tuple<i32, ??>;
    notPredicateParseC1(
        parser : (string, i32, ?) -> Tuple<i32, ?>
    ) -> (string, i32, ?) -> Tuple<i32, ?>;
}

compiletime::emptyParseC(
    sem_act : () -> ?
) -> (string, i32) -> Tuple<i32, ?> {
    compiletime::partialCall(emptyParseCimpl, sem_act);
}

emptyParseCimpl(sem_act : () -> ?, input : string, i : i32) -> Tuple<i32, ?> {
    tuple(i, sem_act());
}

compiletime::emptyParseC1() -> (string, i32, ?) -> Tuple<i32, ?> {
    emptyParseCimpl1;
}

emptyParseCimpl1(input : string, i : i32, acc : ?) -> Tuple<i32, ?> {
    tuple(i, acc);
}


compiletime::inputEndParseC(
    sem_act : () -> ?,
    fail : ?
) -> (string, i32) -> Tuple<i32, ?> {
    compiletime::partialCall(inputEndParseCimpl, sem_act, fail)
}

inputEndParseCimpl(sem_act : () -> ?, fail : ?, input : string, i : i32) -> Tuple<i32, ?> {
    if (i == length(input)) {
        tuple(i, sem_act());
    } else {
        tuple(-(1), fail);
    }
} 

compiletime::inputEndParseC1() -> (string, i32, ?) -> Tuple<i32, ?> {
    inputEndParseCimpl1;
}

inputEndParseCimpl1(
    input : string, 
    i : i32, 
    acc : ?
) -> Tuple<i32, ?> {
    if (i == length(input)) {
        tuple(i, acc);
    } else {
        tuple(-(1), acc);
    }
} 


compiletime::rangeParseC(
    lower : i32, 
    upper : i32, 
    sem_act : (i32) -> ?,
    fail : ?
) -> (string, i32) -> Tuple<i32, ?> {
    compiletime::partialCall(rangeParseCimpl, lower, upper, sem_act, fail);
}

rangeParseCimpl(
    lower : i32, 
    upper : i32, 
    sem_act : (i32) -> ?, 
    fail : ?, 
    input : string, 
    i : i32
) -> Tuple<i32, ?> {
    if (i == length(input)) {
        tuple(-(1), fail);
    } else {
        code = charCodeAt(input, i) : i32;
        if (lower <= code) {
            if (code <= upper) {
                tuple(i + 1, sem_act(code));
            } else {
                tuple(-(1), fail);    
            }
        } else {
            tuple(-(1), fail);
        }
    }
}

compiletime::rangeParseC1(lower : i32, upper : i32) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(rangeParseCimpl1, lower, upper);
}

rangeParseCimpl1(
    lower : i32, 
    upper : i32,
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    if (i == length(input)) {
        tuple(-(1), acc);
    } else {
        code = charCodeAt(input, i) : i32;
        if (lower <= code) {
            if (code <= upper) {
                tuple(i + 1, acc);
            } else {
                tuple(-(1), acc);    
            }
        } else {
            tuple(-(1), acc);
        }
    }
}


compiletime::tokenParseC(
    pattern : string, 
    sem_act : (string) -> ?, 
    fail : ?
) -> (string, i32) -> Tuple<i32, ?> {
    compiletime::partialCall(tokenParseCimpl, pattern, sem_act, fail);
}

tokenParseCimpl(
    pattern : string, 
    sem_act : (string) -> ?, 
    fail : ?, 
    input : string, 
    i : i32
) -> Tuple<i32, ?> {
    doTokenParseCimpl(pattern, sem_act, fail, input, i, 0);
} 

doTokenParseCimpl(
    pattern : string, 
    sem_act : (string) -> ?, 
    fail : ?, 
    input : string, 
    i : i32, 
    j : i32
) -> Tuple<i32, ?> {
    if (j == length(pattern)) {
        tuple(i + j, sem_act(pattern));
    } else {
        a = index(input, i + j);
        b = index(pattern, j);
        if (a != b) {
            tuple(-(1), fail);
        } else {
            doTokenParseCimpl(pattern, sem_act, fail, input, i, j + 1);
        }
    }
}

compiletime::tokenParseC1(pattern : string) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(tokenParseCimpl1, pattern);
}

tokenParseCimpl1(
    pattern : string,
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    doTokenParseCimpl1(pattern, input, i, acc, 0);
} 

doTokenParseCimpl1(pattern : string, input : string, i : i32, acc : ?, j : i32) -> Tuple<i32, ?> {
    if (j == length(pattern)) {
        tuple(i + j, acc);
    } else {
        a = index(input, i + j);
        b = index(pattern, j);
        if (a != b) {
            tuple(-(1), acc);
        } else {
            doTokenParseCimpl1(pattern, input, i, acc, j + 1);
        }
    }
}

compiletime::modifyParseC(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (?) -> ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(modifyParseCimpl, parser, sem_act, fail);
}

modifyParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>, 
    sem_act : (?) -> ??, 
    fail : ??, 
    input : string, 
    i : i32
) -> Tuple<i32, ??> {
    p = parser(input, i) : Tuple<i32, ??>;
    j = first(p) : i32;
    x = second(p);
    y = sem_act(x);
    if (j == -(1)) {
        tuple(-(1), fail);
    } else {
        tuple(j, y);
    }
}

compiletime::modifyParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    sem_act : (?, string, i32, i32) -> ?
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(modifyParseCimpl1, parser, sem_act);
}

modifyParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>, 
    sem_act : (?, string, i32, i32) -> ?,
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p) : i32;
    if (j == -(1)) {
        tuple(-(1), acc);
    } else {
        y = second(p);
        tuple(j, sem_act(y, input, i, j - i));
    }
}



compiletime::addVerbatimParseC1(
    sem_act : (?, string) -> ?,
    act_id : string
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(addVerbatimParseCimpl1, sem_act, act_id);
}

addVerbatimParseCimpl1(
    sem_act : (?, string) -> ?,
    act_id : string, 
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    tuple(i, sem_act(acc, act_id));
}

compiletime::addMatchedParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    sem_act : (?, string) -> ?
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(addMatchedParseCimpl1, parser, sem_act);
}

addMatchedParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>, 
    sem_act : (?, string) -> ?, 
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p) : i32;
    if (j == -(1)) {
        tuple(-(1), acc);
    } else {
        y = second(p);
        matched = substring(input, i, j - i);
        tuple(j, sem_act(y, matched));
    }
}

compiletime::sequenceParseC(
    parser1 : (string, i32) -> Tuple<i32, ?>,
    parser2 : (string, i32) -> Tuple<i32, ??>,
    sem_act : (?, ??) -> ???,
    fail : ???
) -> (string, i32) -> Tuple<i32, ???> {
    compiletime::partialCall(sequenceParseCimpl, parser1, parser2, sem_act, fail);
}

sequenceParseCimpl(
    parser1 : (string, i32) -> Tuple<i32, ?>,
    parser2 : (string, i32) -> Tuple<i32, ??>,
    sem_act : (?, ??) -> ???,
    fail : ???,
    input : string, 
    i : i32
) -> Tuple<i32, ???> {
    t1 = parser1(input, i) : Tuple<i32, ?>;
    if (0 > first(t1)) {
        tuple(-(1), fail);
    } else {
        t2 = parser2(input, first(t1)) : Tuple<i32, ??>;
        if (0 > first(t2)) {
            tuple(-(1), fail);
        } else {
            tuple(first(t2), sem_act(second(t1), second(t2)));
        }
    }
}

compiletime::sequenceParseC1(
    parser1 : (string, i32, ?) -> Tuple<i32, ?>,
    parser2 : (string, i32, ?) -> Tuple<i32, ?>
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(sequenceParseCimpl1, parser1, parser2);
}

sequenceParseCimpl1(
    parser1 : (string, i32, ?) -> Tuple<i32, ?>,
    parser2 : (string, i32, ?) -> Tuple<i32, ?>,
    input : string, 
    i : i32, 
    acc : ?
) -> Tuple<i32, ?> {
    t1 = parser1(input, i, acc) : Tuple<i32, ?>;
    if (0 > first(t1)) {
        tuple(-(1), acc);
    } else {
        x1 = second(t1) : ?;
        t2 = parser2(input, first(t1), x1) : Tuple<i32, ?>;
        if (0 > first(t2)) {
            tuple(-(1), x1);
        } else {
            t2
        }
    }
}

compiletime::choiceParseC(
    parser1 : (string, i32) -> Tuple<i32, ?>,
    parser2 : (string, i32) -> Tuple<i32, ?>,
    sem_act : (?) -> ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(choiceParseCimpl, parser1, parser2, sem_act, fail);
}

choiceParseCimpl(
    parser1 : (string, i32) -> Tuple<i32, ?>,
    parser2 : (string, i32) -> Tuple<i32, ?>,
    sem_act : (?) -> ??,
    fail : ??,
    input : string, 
    i : i32
) -> Tuple<i32, ??> {
    t1 = modifyParseCimpl(parser1, sem_act, fail, input, i);
    if (0 <= first(t1)) {
        t1;
    } else {
        modifyParseCimpl(parser2, sem_act, fail, input, i);
    }
}

compiletime::choiceParseC1(
    parser1 : (string, i32, ?) -> Tuple<i32, ?>,
    parser2 : (string, i32, ?) -> Tuple<i32, ?>
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(choiceParseCimpl1, parser1, parser2);
}

choiceParseCimpl1(
    parser1 : (string, i32, ?) -> Tuple<i32, ?>,
    parser2 : (string, i32, ?) -> Tuple<i32, ?>,
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    t1 = parser1(input, i, acc) : Tuple<i32, ?>;
    if (0 <= first(t1)) {
        t1;
    } else {
        parser2(input, i, acc);
    }
}

compiletime::choiceManyParseC(
    parsers : Array<(string, i32) -> Tuple<i32, ?> >,
    sem_act : (?) -> ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(choiceManyParseCimpl, parsers, sem_act, fail);
}

choiceManyParseCimpl(
    parsers : Array<(string, i32) -> Tuple<i32, ?> >,
    sem_act : (?) -> ??,
    fail : ??,
    input : string, 
    i : i32
) -> Tuple<i32, ??> {
    doChoiceManyParseCimpl(parsers, sem_act, fail, input, i, 0);
}

doChoiceManyParseCimpl(
    parsers : Array<(string, i32) -> Tuple<i32, ?> >,
    sem_act : (?) -> ??,
    fail : ??,
    input : string, 
    i : i32,
    k : i32
) -> Tuple<i32, ??> {
    if (k == length(parsers)) {
        tuple(-(1), fail);
    } else {
        parser = index(parsers, k);
        t1 = modifyParseCimpl(parser, sem_act, fail, input, i);
        if (0 <= first(t1)) {
            t1;
        } else {
            doChoiceManyParseCimpl(parsers, sem_act, fail, input, i, k + 1);
        }
    }
}

compiletime::choiceManyParseC1(
    parsers : Array<(string, i32, ?) -> Tuple<i32, ?> >
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(choiceManyParseCimpl1, parsers);
}

choiceManyParseCimpl1(
    parsers : Array<(string, i32, ?) -> Tuple<i32, ?> >,
    input : string, 
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    doChoiceManyParseCimpl1(parsers, input, i, acc, 0);
}

doChoiceManyParseCimpl1(
    parsers : Array<(string, i32, ?) -> Tuple<i32, ?> >,
    input : string, 
    i : i32,
    acc : ?,
    k : i32
) -> Tuple<i32, ?> {
    if (k == length(parsers)) {
        tuple(-(1), acc);
    } else {
        parser = index(parsers, k);
        t1 = parser(input, i, acc) : Tuple<i32, ?>;
        if (0 <= first(t1)) {
            t1;
        } else {
            doChoiceManyParseCimpl1(parsers, input, i, acc, k + 1);
        }
    }
}

compiletime::starParseC(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (Array<?>) -> ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(starParseCimpl, parser, sem_act, fail);
}

starParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (Array<?>) -> ??,
    fail : ??,
    input : string,
    i : i32
) -> Tuple<i32, ??> {
    doStarParseCimpl(parser, sem_act, fail, input, i, array());
}

compiletime::starParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(starParseCimpl1, parser);
}

starParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    input : string,
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    doStarParseCimpl1(parser, input, i, acc);
}

compiletime::plusParseC(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (Array<?>) -> ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(plusParseCimpl, parser, sem_act, fail);
}

plusParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (Array<?>) -> ??,
    fail : ??,
    input : string,
    i : i32
) -> Tuple<i32, ??> {
    p = parser(input, i) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(-(1), fail);
    } else {
        doStarParseCimpl(parser, sem_act, fail, input, j, array(second(p)));
    }
}

compiletime::plusParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(plusParseCimpl1, parser);
}

plusParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    input : string,
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(-(1), acc);
    } else {
        x = second(p) : ?;
        doStarParseCimpl1(parser, input, j, x);
    }
}

doStarParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (Array<?>) -> ??,
    fail : ??,
    input : string,
    i : i32,
    acc : Array<?>
) -> Tuple<i32, ??> {
    p = parser(input, i) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(i, sem_act(acc));
    } else {
        x = second(p) : ?;
        new_acc = acc + array(x);
        doStarParseCimpl(parser, sem_act, fail, input, j, new_acc);
    }
}

doStarParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    input : string,
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(i, acc);
    } else {
        new_acc = second(p) : ?;
        doStarParseCimpl1(parser, input, j, new_acc);
    }
}

compiletime::optionalParseC(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (?) -> ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(optionalParseCimpl, parser, sem_act, fail);
}

optionalParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>,
    sem_act : (?) -> ??,
    fail : ??,
    input : string,
    i : i32
) -> Tuple<i32, ??> {
    p = parser(input, i) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(i, fail);
    } else {
        x = second(p) : ?;
        tuple(j, sem_act(x));
    }
}

compiletime::optionalParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(optionalParseCimpl1, parser);
}

optionalParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    input : string,
    i : i32, 
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(i, acc);
    } else {
        p;
    }
}



compiletime::andPredicateParseC(
    parser : (string, i32) -> Tuple<i32, ?>,
    success : ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(andPredicateParseCimpl, parser, success, fail);
}

andPredicateParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>,
    success : ??,
    fail : ??,
    input : string,
    i : i32
) -> (string, i32) -> Tuple<i32, ??> {
    p = parser(input, i) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(-(1), fail);
    } else {
        tuple(i, success);
    }
}

compiletime::andPredicateParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>
) -> (string, i32, ?) -> Tuple<i32, ?> {
    compiletime::partialCall(andPredicateParseCimpl1, parser);
}

andPredicateParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    input : string,
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(-(1), acc);
    } else {
        x = second(p) : ?;
        tuple(i, x);
    }
}

notPredicateParseC(
    parser : (string, i32) -> Tuple<i32, ?>,
    success : ??,
    fail : ??
) -> (string, i32) -> Tuple<i32, ??> {
    compiletime::partialCall(notPredicateParseCimpl, parser, success, fail);
}

notPredicateParseCimpl(
    parser : (string, i32) -> Tuple<i32, ?>,
    success : ??,
    fail : ??,
    input : string,
    i : i32
) -> Tuple<i32, ??> {
    p = parser(input, i) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        tuple(i, success);
    } else {
        tuple(-(1), fail);
    }
}

notPredicateParseC1(
    parser : (string, i32, ?) -> Tuple<i32, ?>
) -> (string, i32, ?) -> Tuple<i32, ??> {
    compiletime::partialCall(notPredicateParseCimpl1, parser);
}

notPredicateParseCimpl1(
    parser : (string, i32, ?) -> Tuple<i32, ?>,
    input : string,
    i : i32,
    acc : ?
) -> Tuple<i32, ?> {
    p = parser(input, i, acc) : Tuple<i32, ?>;
    j = first(p);
    if (j == -(1)) {
        x = second(p) : ?; 
        tuple(i, x);
    } else {
        tuple(-(1), acc);
    }
}
