export {
	// Out of bounds gives the empty string
	index(s : string, i : i32) -> string;

	// Concatenation
	+(a : string, b : string) -> string;
	==(l : string, r : string) -> i1;
	!=(l : string, r : string) -> i1;
	<=(l : string, r : string) -> i1;

	length(a : string) -> i32;

	// Considering the string as UCS-2, get the unicode character code at index i (starting from 0)
	charCodeAt(s : string, i : i32) -> i32;
	// non-inlined version of charCodeAt
	fnCharCodeAt(s : string, i : i32) -> i32;

	// Convert a UCS-2 unicode character code to a string
	fromCharCode(c : i32) -> string;
	// non-inlined version of fromCharCode
	fnFromCharCode(c : i32) -> string;
}

typedef flow::string = inline flow { string };
typedef java::string = inline java { String };
typedef js::string = inline js { string };
typedef c::string = inline c { char路const路* };
typedef rust::string = inline rust { String };

// TODO: Find out with wasm. It is probably just a pointer
// TODO: Add for Rust, C...

fnCharCodeAt(s : string, i : i32) -> i32 {
	charCodeAt(s, i);
}

fnFromCharCode(c : i32) -> string {
	fromCharCode(c);
}

// Flow

flow::inline +(a : string, b : string) -> string {
	inline flow { ${a} + ${b} }
}

flow::inline length(a : string) -> i32 {
	inline flow { strlen($a) }
	require import { import string; }
}

flow::inline index(s : string, i : i32) -> string {
	inline flow { getCharAt(${s}, ${i}) }
	require import { import string; }
}

flow::inline charCodeAt(s : string, i : i32) -> string {
	inline flow { getCharCodeAt(${s}, ${i}) }
	require import { import string; }
}

flow::inline fromCharCode(c : i32) -> string {
	inline flow { fromCharCode(${c}) }
	require import { import string; }
}

flow::inline ==(l : string, r : string) -> i1 { inline flow { ($l) == ($r) } }
flow::inline !=(l : string, r : string) -> i1 { inline flow { ($l) != ($r) } }
flow::inline <=(l : string, r : string) -> i1 { inline flow { ($l) <= ($r) } }

// JavaScript

js::inline +(a : string, b : string) -> string {
	inline js { ${a} + ${b} }
}

js::inline length(a : string) -> i32 {
	inline js { ${a}.length }
}

js::inline index(s : string, i : i32) -> string {
	inline js { ${s}.charAt(${i}) }
}

js::inline ==(l : string, r : string) -> i1 { inline js { ($l) === ($r) } }
js::inline !=(l : string, r : string) -> i1 { inline js { ($l) !== ($r) } }
js::inline <=(l : string, r : string) -> i1 { inline js { ($l) <= ($r) } }


// Java

java::inline +(a : string, b : string) -> string {
	inline java { ${a} + ${b} }
}

java::inline length(a : string) -> i32 {
	inline java { ${a}.length() }
}

java::inline index(s : string, i : i32) -> string {
	inline java { ( ${i} < ${s}.length()) ? ${s}.substring(${i}, ${i} + 1)路:路"" }
}
