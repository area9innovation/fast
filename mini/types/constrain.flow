import mini/types/typeenv;
import mini/types/type_ast;
import mini/types/polymorphism;
import mini/util/position;
import mini/util/trace;
import mini/exp/pretty;
import mini/types/tyvarinfo;
import mini/types/pretty;
import mini/types/subtype;
import mini/types/type_intersect;

export {
	// Extract constraints from this type pairing. lhs should be a subtype of rhs
	constrainMiniType(env : MiniTypeEnv, lhsp : MiniTypePos, rhsp : MiniTypePos, reason : string) -> void;

	// Sets both upper and lower bounds, when we know the final type
	setMiniTypeBounds(env : MiniTypeEnv, tyvar : int, type : MiniTypePos) -> void;
}

constrainMiniType(env : MiniTypeEnv, lhsp : MiniTypePos, rhsp : MiniTypePos, reason : string) -> void {
	lhs = lhsp.type;
	rhs = rhsp.type;
	if (containsSet(^(env.constraintCache), Pair(lhs, rhs))
		|| lhs == MiniTypeCall("auto", [])
		|| rhs == MiniTypeCall("auto", [])) {
		// OK, already handled
	} else {
		env.constraintCache := insertSet(^(env.constraintCache), Pair(lhs, rhs));
		
		if (isDebuggingId(env.ast, StageTypeConstrain(), lhsp.id) || isDebuggingId(env.ast, StageTypeConstrain(), rhsp.id)) {
			fileinfo1 = getFileLineInfo(env.ast, lhsp.id, lhsp.pos);
			fileinfo2 = getFileLineInfo(env.ast, rhsp.id, rhsp.pos);
			println(
				fileinfo1 + "Constrain " + reason + " " + debugMiniType(env, lhs) + " ≤ " + debugMiniType(env, rhs)
				+ (if (fileinfo1 != fileinfo2) fileinfo2 else "")
			);
		}

		error = \ -> {
			env.onError(lhsp.id, lhsp.pos, "Type violation " + miniType2string(lhs) + " < " + miniType2string(rhs) + " due to constraints " + reason);
			if (lhsp.id == rhsp.id && lhsp.pos == rhsp.pos) {
			} else {
				env.onError(rhsp.id, rhsp.pos, "with here");
			}
		};
		right = \ -> {
			switch (rhs) {
				MiniTypeVar(rid): {
					parentId = unionFind(env.unionFind, rid);
					addMiniLowerBound(env, parentId, lhsp, reason);
				}
				MiniTypeCall(rid, rtypars): {
					if (rid == "flow"  && rtypars == []) {
						// This is fine
					} else error();
				}
				default: error();
			}
		}

		switch (lhs) {
			MiniTypeInt(lbits): {
				switch (rhs) {
					MiniTypeInt(rbits): if (lbits != rbits) error();
					default: right();
				}
			}
			MiniTypeFunction(largs, lreturnType): {
				switch (rhs) {
					MiniTypeFunction(rargs, rreturnType): {
						// (Function(l0, r0), Function(l1, r1)) => constrain(l1, l0); constrain(r0, r1)
						if (length(largs) != length(rargs)) {
							error();
						} else {
							iteri(largs, \i, larg -> {
								constrainMiniType(env, 
									MiniTypePos(rhsp with type = rargs[i]), 
									MiniTypePos(lhsp with type = larg), 
									reason + " arg" + i2s(i)
								);
							});
							constrainMiniType(env, 
								MiniTypePos(lhsp with type = lreturnType), 
								MiniTypePos(rhsp with type = rreturnType),
								reason + " return"
							);
						}
					}
					default: right();
				}
			}
			MiniTypeCall(lid, ltypars): {
				switch (rhs) {
					MiniTypeCall(rid, rtypars): {
						constrainMiniTypeCalls(env, lhsp.id, lhsp.pos, constrainMiniType, lhs, rhs, reason);
					}
					MiniTypeRecord(rfields): {
						mrecord = typeCall2MiniRecord(env.ast, lhs);
						mrecord ?? {
							constrainMiniType(env, MiniTypePos(lhsp with type = mrecord), rhsp, reason + " record");
						} : {
							error();
						}
					}
					default: right();
				}
			}
			MiniTypeVar(lid): {
				parentId = unionFind(env.unionFind, lid);
				switch (rhs) {
					MiniTypeVar(rid): {
						rparentId = unionFind(env.unionFind, rid);
						if (parentId != rparentId) {
							unifyMiniTyvars(env, lhsp, parentId, rhsp, rparentId);
						}
					};
					default: {
						addMiniUpperBound(env, parentId, rhsp, reason);
					}
				}
			}
			MiniTypePar(lid): {
				switch (rhs) {
					MiniTypePar(rid): {
						if (lid != rid) {
							error();
						}
					}
					default: right();
				}
			}
			MiniTypeRecord(lfields): {
				switch (rhs) {
					MiniTypeRecord(rfields): {
						iteri(rfields, \i, fs1 : MiniTypeField -> {
							lfield = find(lfields, \lf : MiniTypeField -> lf.name == fs1.name);
							lfield ?? {
								if (lfield.isMutable && !fs1.isMutable) {
									env.onError(lhsp.id, lhsp.pos, "Field " + fs1.name + " should be mutable in " + miniType2string(rhs));
								} 
								constrainMiniType(env, 
									MiniTypePos(lhsp with type = lfield.type), 
									MiniTypePos(rhsp with type = fs1.type),
									reason + " ." + fs1.name
								);
							} : {
								env.onError(lhsp.id, lhsp.pos, "Expected field " + fs1.name + " in " + miniType2string(lhs));
							}
						});
						/*
						(Record(fs0), Record(fs1)) =>
							fs1.foreach { 
								case (n1, t1) =>
									fs0.find(_._1 == n1) match {
										None => err("missing field: " + n1 + " in " + lhs);
										Some((_, t0)) => constrain(t0, t1) 
									}
							}
						*/
					}
					default: right();
				}
			}
		}
	}
}

//
// Handling lower/upper constraints
//

setMiniTypeBounds(env : MiniTypeEnv, tyvar : int, type : MiniTypePos) -> void {
	parentId = unionFind(env.unionFind, tyvar);
	// TODO: Maybe we should not do it like this,
	// but rather set it directly to the known type
	addMiniLowerBound(env, parentId, type, "set");
	addMiniUpperBound(env, parentId, type, "set");
}

// We know the tyvar id is the current parent tyvar
addMiniLowerBound(env : MiniTypeEnv, tyvar : int, type : MiniTypePos, reason : string) -> void {
	reqs = getMTyvarRequirements(env, tyvar);
	nreqs = MTyvarRequirements(reqs with lower = insertSet(reqs.lower, type.type));
	env.tyvarRequirements := setTree(^(env.tyvarRequirements), tyvar, nreqs);

	// Propagate the bound to the upper bounds as well
	constrainUpperBounds(env, tyvar, nreqs, type, reason);
}

// We know the tyvar id is the current parent tyvar
addMiniUpperBound(env : MiniTypeEnv, tyvar : int, type : MiniTypePos, reason : string) -> void {
	reqs = getMTyvarRequirements(env, tyvar);

	// TODO: We could have another constain which is unify where there is no difference between upper and lower
	nupper = intersectMiniTypes(env, constrainMiniType, reqs.upper, type);

	nreqs = MTyvarRequirements(reqs with upper = nupper);
	env.tyvarRequirements := setTree(^(env.tyvarRequirements), tyvar, nreqs);
	// Propagate the bound to the lower bounds as well
	constrainLowerBounds(env, tyvar, nreqs, type, reason);
}

constrainLowerBounds(env : MiniTypeEnv, tyvar : int, reqs : MTyvarRequirements, typep : MiniTypePos, reason : string) -> void {
	types = reqs.lower;
	id = findMiniTyvarId(env, tyvar);
	pos = findMiniTyvarPos(env, tyvar);
	iterSet(types, \ltype -> {
		constrainMiniType(env, MiniTypePos(id, pos, ltype), typep, reason + " lower-bound")
	});
}

constrainUpperBounds(env : MiniTypeEnv, tyvar : int, reqs : MTyvarRequirements, typep : MiniTypePos, reason : string) -> void {
	types = reqs.upper;
	id = findMiniTyvarId(env, tyvar);
	pos = findMiniTyvarPos(env, tyvar);
	iterSet(types, \utype -> {
		constrainMiniType(env, typep, MiniTypePos(id, pos, utype), reason + " upper-bound")
	});
}

// OK, we know these two tyvars are identical
unifyMiniTyvars(env : MiniTypeEnv, lhs : MiniTypePos, left : int, rhs : MiniTypePos, right : int) -> void {
	leftParent = unionFind(env.unionFind, left);
	rightParent = unionFind(env.unionFind, right);
	if (leftParent != rightParent) {
		joined = unionUnion(env.unionFind, leftParent, rightParent);

		if (isDebuggingId(env.ast, StageTypeConstrain(), lhs.id) || isDebuggingId(env.ast, StageTypeConstrain(), rhs.id)) {
			fileinfo1 = getFileLineInfo(env.ast, lhs.id, lhs.pos);
			fileinfo2 = getFileLineInfo(env.ast, rhs.id, rhs.pos);
			println(fileinfo1 + "Merging tyvars α" + i2s(left) + " and α" + i2s(right) + " to α" + i2s(joined) + (if (fileinfo1 != fileinfo2) " " + fileinfo2 else ""));
		};

		move = \tv1, tv2 -> {
			// Move all info on tv to joined
			if (tv1 != tv2) {
				mergeTyvarBounds(env, lhs, tv1, rhs, tv2, joined);
			}
		};
		move(left, joined);
		move(joined, right);
		move(leftParent, joined);
		move(joined, rightParent);
	}
}

mergeTyvarBounds(env : MiniTypeEnv, lhs : MiniTypePos, tv1 : int, rhs : MiniTypePos, tv2 : int, target : int) -> void {
	left = getMTyvarRequirements(env, tv1);
	right = getMTyvarRequirements(env, tv2);

	merged = mergeMTyvarRequirements(left, right);

	env.tyvarRequirements := setTree(^(env.tyvarRequirements), target, merged);
	looser = if (tv1 == target) tv2 else tv1;
	env.tyvarRequirements := removeFromTree(^(env.tyvarRequirements), looser);

	// Brute force propagation of all combinations.
	// TODO: Optimize this
	iterSet(merged.lower, \ltype -> {
		iterSet(merged.upper, \utype -> {
			constrainMiniType(env, MiniTypePos(lhs with type = ltype), MiniTypePos(rhs with type = utype), "join");
		})
	});
}

mergeMTyvarRequirements(left : MTyvarRequirements, right : MTyvarRequirements) -> MTyvarRequirements {
	fixed = switch (left.fixed) {
		None(): right.fixed;
		Some(lfixed): {
			switch (right.fixed) {
				None(): left.fixed;
				Some(rfixed): {
					// OK, left and right have to match
					if (lfixed != rfixed) {
						println("Collusion " + miniType2string(lfixed) + " and "+ miniType2string(rfixed));
					}
					left.fixed;
				}
			}
		}
	};
	MTyvarRequirements(
		fixed,
		mergeSets(left.lower, right.lower),
		mergeSets(left.upper, right.upper),
	);
}
