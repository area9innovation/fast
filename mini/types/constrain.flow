import mini/types/typeenv;
import mini/types/type_ast;
import mini/types/polymorphism;
import mini/util/position;
import mini/util/trace;
import mini/exp/pretty;
import mini/types/tyvarinfo;
import mini/types/pretty;
import mini/types/subtype;

export {
	// Extract constraints from this type pairing. lhs should be a subtype of rhs
	constrainMiniType(env : MiniTypeEnv, lhsp : MiniTypePos, rhsp : MiniTypePos, reason : string) -> void;

	addMiniLowerBound(env : MiniTypeEnv, tyvar : int, type : MiniType) -> void;
	addMiniUpperBound(env : MiniTypeEnv, tyvar : int, type : MiniType) -> void;
}

constrainMiniType(env : MiniTypeEnv, lhsp : MiniTypePos, rhsp : MiniTypePos, reason : string) -> void {
	lhs = lhsp.type;
	rhs = rhsp.type;
	if (containsSet(^(env.constraintCache), Pair(lhs, rhs))
		|| lhs == MiniTypeCall("auto", [])
		|| rhs == MiniTypeCall("auto", [])) {
		// OK, already handled
	} else {
		env.constraintCache := insertSet(^(env.constraintCache), Pair(lhs, rhs));
		
		if (isDebuggingId(env.ast, StageTypeConstrain(), lhsp.id) || isDebuggingId(env.ast, StageTypeConstrain(), rhsp.id)) {
			fileinfo1 = getFileLineInfo(env.ast, lhsp.id, lhsp.pos);
			fileinfo2 = getFileLineInfo(env.ast, rhsp.id, rhsp.pos);
			println(
				fileinfo1 + "Constrain " + reason + " " + debugMiniType(env, lhs) + " ≤ " + debugMiniType(env, rhs)
				+ (if (fileinfo1 != fileinfo2) fileinfo2 else "")
			);
		}

		error = \ -> {
			env.onError(lhsp.id, lhsp.pos, "Type violation " + miniType2string(lhs) + " < " + miniType2string(rhs) + " due to constraints " + reason);
			if (lhsp.id == rhsp.id && lhsp.pos == rhsp.pos) {
			} else {
				env.onError(rhsp.id, rhsp.pos, "with here");
			}
		};
		right = \ -> {
			switch (rhs) {
				MiniTypeVar(rid): {
					parentId = unionFind(env.requirements.unionFind, rid);
					addMiniLowerBound(env, parentId, lhs);
					constrainUpperBounds(env, parentId, lhsp, reason);
				}
				MiniTypeCall(rid, rtypars): {
					if (rid == "flow"  && rtypars == []) {
						// This is fine
					} else error();
				}
				default: error();
			}
		}

		switch (lhs) {
			MiniTypeInt(lbits): {
				switch (rhs) {
					MiniTypeInt(rbits): if (lbits != rbits) error();
					default: right();
				}
			}
			MiniTypeFunction(largs, lreturnType): {
				switch (rhs) {
					MiniTypeFunction(rargs, rreturnType): {
						// (Function(l0, r0), Function(l1, r1)) => constrain(l1, l0); constrain(r0, r1)
						if (length(largs) != length(rargs)) {
							error();
						} else {
							iteri(largs, \i, larg -> {
								constrainMiniType(env, 
									MiniTypePos(rhsp with type = rargs[i]), 
									MiniTypePos(lhsp with type = larg), 
									reason + " arg" + i2s(i)
								);
							});
							constrainMiniType(env, 
								MiniTypePos(lhsp with type = lreturnType), 
								MiniTypePos(rhsp with type = rreturnType),
								reason + " return"
							);
						}
					}
					default: right();
				}
			}
			MiniTypeCall(lid, ltypars): {
				switch (rhs) {
					MiniTypeCall(rid, rtypars): {
						constrainMiniTypeCalls(env, lhsp.id, lhsp.pos, constrainMiniType, lhs, rhs, reason);
					}
					MiniTypeRecord(rfields): {
						mrecord = typeCall2MiniRecord(env.ast, lhs);
						mrecord ?? {
							constrainMiniType(env, MiniTypePos(lhsp with type = mrecord), rhsp, reason + " record");
						} : {
							error();
						}
					}
					default: right();
				}
			}
			MiniTypeVar(lid): {
				parentId = unionFind(env.requirements.unionFind, lid);
				def = \ -> {
					addMiniUpperBound(env, parentId, rhs);
					constrainLowerBounds(env, parentId, rhsp, reason);
				};

				switch (rhs) {
					MiniTypeVar(rid): {
						rparentId = unionFind(env.requirements.unionFind, rid);
						if (parentId != rparentId) {
							unifyMiniTyvars(env, lhsp, parentId, rhsp, rparentId);
						}
					};
					default: def();
				}
			}
			MiniTypePar(lid): {
				switch (rhs) {
					MiniTypePar(rid): {
						if (lid != rid) {
							error();
						}
					}
					default: right();
				}
			}
			MiniTypeRecord(lfields): {
				switch (rhs) {
					MiniTypeRecord(rfields): {
						iteri(rfields, \i, fs1 : MiniTypeField -> {
							lfield = find(lfields, \lf : MiniTypeField -> lf.name == fs1.name);
							lfield ?? {
								if (lfield.isMutable && !fs1.isMutable) {
									env.onError(lhsp.id, lhsp.pos, "Field " + fs1.name + " should be mutable in " + miniType2string(rhs));
								} 
								constrainMiniType(env, 
									MiniTypePos(lhsp with type = lfield.type), 
									MiniTypePos(rhsp with type = fs1.type),
									reason + " ." + fs1.name
								);
							} : {
								env.onError(lhsp.id, lhsp.pos, "Expected field " + fs1.name + " in " + miniType2string(lhs));
							}
						});
						/*
						(Record(fs0), Record(fs1)) =>
							fs1.foreach { 
								case (n1, t1) =>
									fs0.find(_._1 == n1) match {
										None => err("missing field: " + n1 + " in " + lhs);
										Some((_, t0)) => constrain(t0, t1) 
									}
							}
						*/
					}
					default: right();
				}
			}
		}
	}
}

addMiniLowerBound(env : MiniTypeEnv, tyvar : int, type : MiniType) -> void {
	env.tyvarLowerBounds := insertMultimap(^(env.tyvarLowerBounds), tyvar, type);
}

addMiniUpperBound(env : MiniTypeEnv, tyvar : int, type : MiniType) -> void {
	env.tyvarUpperBounds := insertMultimap(^(env.tyvarUpperBounds), tyvar, type);
}

constrainLowerBounds(env : MiniTypeEnv, tyvar : int, typep : MiniTypePos, reason : string) -> void {
	types = lookupMultimap(^(env.tyvarLowerBounds), tyvar);
	id = findMiniTyvarId(env, tyvar);
	pos = findMiniTyvarPos(env, tyvar);
	iterSet(types, \ltype -> {
		constrainMiniType(env, MiniTypePos(id, pos, ltype), typep, reason + " lower-bound")
	})
}

constrainUpperBounds(env : MiniTypeEnv, tyvar : int, typep : MiniTypePos, reason : string) -> void {
	types = lookupMultimap(^(env.tyvarUpperBounds), tyvar);
	id = findMiniTyvarId(env, tyvar);
	pos = findMiniTyvarPos(env, tyvar);
	iterSet(types, \utype -> {
		constrainMiniType(env, typep, MiniTypePos(id, pos, utype), reason + " upper-bound")
	})
}

unifyMiniTyvars(env : MiniTypeEnv, lhs : MiniTypePos, left : int, rhs : MiniTypePos, right : int) -> void {
	leftParent = unionFind(env.requirements.unionFind, left);
	rightParent = unionFind(env.requirements.unionFind, right);
	if (leftParent != rightParent) {
		joined = unionUnion(env.requirements.unionFind, leftParent, rightParent);

		if (isDebuggingId(env.ast, StageTypeConstrain(), lhs.id) || isDebuggingId(env.ast, StageTypeConstrain(), rhs.id)) {
			fileinfo1 = getFileLineInfo(env.ast, lhs.id, lhs.pos);
			fileinfo2 = getFileLineInfo(env.ast, rhs.id, rhs.pos);
			println(fileinfo1 + "Merging tyvars α" + i2s(left) + " and α" + i2s(right) + " to α" + i2s(joined) + (if (fileinfo1 != fileinfo2) " " + fileinfo2 else ""));
		}

		move = \tv1, tv2 -> {
			// Move all info on tv to joined
			if (tv1 != tv2) {
				lower = mergeTyvarBounds(env.tyvarLowerBounds, tv1, tv2, joined);
				upper = mergeTyvarBounds(env.tyvarUpperBounds, tv1, tv2, joined);
				iterSet(lower, \ltype -> {
					iterSet(upper, \utype -> {
						constrainMiniType(env, MiniTypePos(lhs with type = ltype), MiniTypePos(rhs with type = utype), "join");
					})
				});
			}
		};
		move(left, joined);
		move(joined, right);
		move(leftParent, joined);
		move(joined, rightParent);
	}
}

mergeTyvarBounds(bounds : ref Tree<int, Set<MiniType>>, tv1 : int, tv2 : int, target : int) -> Set<MiniType> {
	left = lookupMultimap(^bounds, tv1);
	right = lookupMultimap(^bounds, tv2);

	merged = mergeSets(left, right);

	bounds := setTree(^bounds, target, merged);
	looser = if (tv1 == target) tv2 else tv1;
	bounds := removeFromTree(^bounds, looser);

	merged;
}
