import mini/types/type;
import mini/types/typeenv;

export {
	initTyparMap(env : MiniTypeEnv) -> void;

	typePars2TypeVars(env : MiniTypeEnv, e : MiniType) -> MiniType;

	localTypePars2TypeVars(env : MiniTypeEnv, e : MiniType) -> MiniType;


	typeVars2TypePars(env : MiniTypeEnv, e : MiniType) -> MiniType;

	makeMiniTypeVar(env : MiniTypeEnv) -> MiniTypeVar;

	extractMiniTypePars(acc : Set<MiniTypePar>, e : MiniType) -> Set<MiniTypePar>;
}

initTyparMap(env : MiniTypeEnv) -> void {
	env.typars := MiniTypeParMap(makeTree(), makeTree());
}

localTypePars2TypeVars(env : MiniTypeEnv, e : MiniType) -> MiniType {
	nenv = MiniTypeEnv(
		env with typars = ref MiniTypeParMap(makeTree(), makeTree())
	);
	typePars2TypeVars(nenv, e);
}

typePars2TypeVars(env : MiniTypeEnv, e : MiniType) -> MiniType {
	switch (e) {
		MiniTypeInt(bits): e;
		MiniTypeFunction(args, returnType): {
			MiniTypeFunction(map(args, \a -> typePars2TypeVars(env, a)), typePars2TypeVars(env, returnType));
		}
		MiniTypeCall(id, typars): {
			MiniTypeCall(id, map(typars, \a -> typePars2TypeVars(env, a)));
		}
		MiniTypeVar(id): e;
		MiniTypePar(id): {
			mtyvarid = lookupTree(^(env.typars).typars, id);
			mtyvarid ?? { MiniTypeVar(mtyvarid) } : {
				tv = makeMiniTypeVar(env);
				addTypeParBinding(env, id, tv.id);
				tv;
			}
		}
		MiniTypeRecord(fields): {
			MiniTypeRecord(map(fields, \f -> {
				MiniTypeField(f.name, f.isMutable, typePars2TypeVars(env, f.type))
			}))
		}
	}
}

typeVars2TypePars(env : MiniTypeEnv, e : MiniType) -> MiniType {
	switch (e) {
		MiniTypeInt(bits): e;
		MiniTypeFunction(args, returnType): {
			MiniTypeFunction(map(args, \a -> typeVars2TypePars(env, a)), typeVars2TypePars(env, returnType));
		}
		MiniTypeCall(id, typars): {
			MiniTypeCall(id, map(typars, \a -> typeVars2TypePars(env, a)));
		}
		MiniTypeVar(id): {
			mtypar = lookupTree(^(env.typars).tyvars, id);
			mtypar ?? {
				MiniTypePar(mtypar)
			} : e;
		}
		MiniTypePar(id): {
			println("Did not expect type par here");
			e;
		}
		MiniTypeRecord(fields): {
			MiniTypeRecord(map(fields, \f -> {
				MiniTypeField(f.name, f.isMutable, typeVars2TypePars(env, f.type))
			}))
		}
	}
}

addTypeParBinding(env : MiniTypeEnv, id : string, tyvar : int) -> void {
	tymap = ^(env.typars);
	env.typars := MiniTypeParMap(
		env.typars with 
		typars = setTree(tymap.typars, id, tyvar),
		tyvars = setTree(tymap.tyvars, tyvar, id),
	)
}



makeMiniTypeVar(env : MiniTypeEnv) -> MiniTypeVar {
	id = ^(env.tyvarId);
	env.tyvarId := id + 1;
	MiniTypeVar(id);
}


extractMiniTypePars(acc : Set<MiniTypePar>, e : MiniType) -> Set<MiniTypePar> {
	switch (e) {
		MiniTypeInt(bits): acc;
		MiniTypeVar(id): acc;
		MiniTypePar(id): insertSet(acc, e);
		MiniTypeFunction(args, returnType): fold(args, extractMiniTypePars(acc, returnType), extractMiniTypePars);
		MiniTypeCall(id, typars): fold(typars, acc, extractMiniTypePars);
		MiniTypeRecord(fields): {
			fold(fields, acc, \acc2, field -> {
				extractMiniTypePars(acc2, field.type)
			})
		}
	}	
}
