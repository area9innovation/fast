import ds/tree;
import mini/types/type;

export {
	// Some common types
	miniTypeVoid : MiniType;
	miniTypeBool : MiniType;
	miniTypeInt : MiniType;
	miniTypeDouble : MiniType;
	miniTypeString : MiniType;

	getBuiltinMiniTypes() -> Tree<string, MiniType>;
}

miniTypeVoid : MiniType = MiniTypeInt(0);
miniTypeBool : MiniType = MiniTypeCall("bool", []);
miniTypeInt : MiniType = MiniTypeInt(32);
miniTypeDouble : MiniType = MiniTypeCall("double", []);
miniTypeString : MiniType = MiniTypeCall("string", []);

getBuiltinMiniTypes() -> Tree<string, MiniType> {

	v = miniTypeVoid;
	b = miniTypeBool;
	i = MiniTypeInt(32);
	s = miniTypeString;

	at = \t -> MiniTypeCall("array", [t]);
	reftype = \t -> MiniTypeCall("ref", [t]);

	ta = MiniTypePar("?");
	tb = MiniTypePar("??");
	tc = MiniTypePar("???");
	td = MiniTypePar("????");

	pairs2tree([
		Pair("__ifte", MiniTypeFunction([b, ta, ta], ta)),
		Pair("__ift", MiniTypeFunction([b, v, v], v)),

		Pair(";", MiniTypeFunction([ta, tb], tb)),

		Pair("||", MiniTypeFunction([b, b], b)),
		Pair("&&", MiniTypeFunction([b, b], b)),

		Pair("==", MiniTypeFunction([ta, ta], b)),
		Pair("!=", MiniTypeFunction([ta, ta], b)),
		Pair("<=", MiniTypeFunction([ta, ta], b)),
		Pair("<", MiniTypeFunction([ta, ta], b)),
		Pair(">=", MiniTypeFunction([ta, ta], b)),
		Pair(">", MiniTypeFunction([ta, ta], b)),

		Pair("+", MiniTypeFunction([ta, ta], ta)),
		Pair("-", MiniTypeFunction([ta, ta], ta)),

		Pair("*", MiniTypeFunction([ta, ta], ta)),
		Pair("/", MiniTypeFunction([ta, ta], ta)),
		Pair("%", MiniTypeFunction([ta, ta], ta)),

		Pair("!", MiniTypeFunction([b], b)),
		Pair("__neg", MiniTypeFunction([ta], ta)),

		// : is special and should probably be grabbed by the type inference?
		Pair(":", MiniTypeFunction([ta, ta], ta)),

		// Array constructs
		Pair("__emptyarray", MiniTypeFunction([], at(ta))),
		Pair("[", MiniTypeFunction([ta], at(ta))),
		Pair(",", MiniTypeFunction([ta, ta], ta)),

		Pair("__index", MiniTypeFunction([at(ta), i], ta)),

	//__switch __case __pattern  __default  __with  __mutassign   __fieldassign

		Pair("__cast", MiniTypeFunction([ta, tb], tb)),

		// References
		Pair("__ref", MiniTypeFunction([ta], reftype(ta))),
		Pair("__deref", MiniTypeFunction([reftype(ta)], ta)),
		Pair(":=", MiniTypeFunction([ta, tb], v)),

		Pair("__void", MiniTypeFunction([], v)),

		Pair("__native", MiniTypeFunction([i, ta, s], ta)),

		// Structs & unions:
		Pair("__construct0", MiniTypeFunction([s], ta)),
		Pair("__construct1", MiniTypeFunction([s, ta], tb)),
		Pair("__construct2", MiniTypeFunction([s, ta, tb], tc)),

		Pair(".", MiniTypeFunction([ta, s], tb)),
		// Used by union to find the value to dispatch from
		Pair("__structname", MiniTypeFunction([ta], tb)),

		// Temporary:
		Pair("__union0", MiniTypeFunction([ta], tb)),
		Pair("__union1", MiniTypeFunction([ta, tb], tc)),
		Pair("__union2", MiniTypeFunction([ta, tb, tc], td)),

		Pair("__typename0", MiniTypeFunction([s], ta)),
		Pair("__typename1", MiniTypeFunction([s, ta], tb)),
		Pair("__typename2", MiniTypeFunction([s, ta, tb], tc)),
	])
}

