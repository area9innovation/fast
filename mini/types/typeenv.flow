import mini/exp/ast;
import mini/types/type;
import mini/types/restype;
import fast/typing/union_find;

export {
	// The environment used when doing type inference
	MiniTypeEnv(
		// The program we are typing
		ast : MiniAst,
		// The types of local ids so far
		localTypes : Tree<string, MiniType>,

		// TODO:
		// Add position info for each local variable
		// as well as the global variable where each local is defined

		// What tyvars are unified?
		unionFind : UnionFind,

		// For the MLSub algorithm, we keep track of bounds:
		tyvarRequirements : ref Tree<int, MTyvarRequirements>,

		// What are the tyvars bound to in terms of resolved types?
		// This is set by the resolution
		tyvars : ref Tree<int, MiniType>,

		// What is the next tyvar id?
		tyvarId : ref int,

		// We keep a cache of constraints to avoid infinite loops
		constraintCache : ref Set<Pair<MiniType, MiniType>>,

		// What tyvar number does this id start with? Used to map back from tyvars to ids
		tyvar2Id : ref Tree<int, string>,
		// What position is this tyvar for?
		tyvar2Pos : ref Tree<int, int>,

		// To report errors
		onError : (name : string, pos : int, error : string) -> void,
	);

	MTyvarRequirements(
		// Do we know what it is?
		fixed : Maybe<MiniType>,
		// What are the transitive lower bounds?
		lower : Set<MiniType>,
		// TODO: Migrate to these
		lowerBounds : MTypeBounds,
		// What are the transitive upper bounds?
		upper : Set<MiniType>,
		// TODO: Migrate to these
		upperBounds : MTypeBounds,
	);

	MTypeBounds(
		isFlow : bool,
		intType : Maybe<MiniTypeInt>,
		fn : Maybe<MiniTypeFunction>,

		tyvars : Set<MiniTypeVar>,
		typars : Set<MiniTypePar>,
		records : Set<MiniTypeRecord>,
		calls : Set<MiniTypeCall>,
		// TODO: Add positions and ids to track positions
	);
}
