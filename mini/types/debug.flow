import mini/exp/pretty_typed;

export {
	debugMiniTypeEnv(env : MiniTypeEnv, verbose : bool) -> void;

	debugMiniType(env : MiniTypeEnv, type : MiniType) -> string;

	// Gets the lower+upper bounds for the tyvar
	debugBounds(env : MiniTypeEnv, tyvarid : int) -> string;

	resType2string(r : ResType) -> string;
}

debugMiniTypeEnv(env : MiniTypeEnv, verbose : bool) -> void {
	if (false && !isEmptyTree(env.ast.types)) {
		println("Top-level types:");
		traverseInOrder(env.ast.types, \name, type -> {
			println(name + " : " + miniType2string(type));
		});
	}

	if (!isEmptyTree(env.localTypes)) {
		println("Local types:");
		traverseInOrder(env.localTypes, \name, type -> {
			println(name + " : " + debugMiniType(env, type));
		});
	}

	if (^(env.tyvarId) > 1) {
		println("Type vars:");
		generate(1, ^(env.tyvarId), \id -> {
			decor = if (verbose) {
				debugBounds(env, id);
			} else "";
			println(miniPrettyTypeVar(env, id) + decor);
		});
		{}
	}
}

debugBounds(env : MiniTypeEnv, id : int) -> string {
	lower = lookupMultimap(^(env.tyvarLowerBounds), id);
	upper = lookupMultimap(^(env.tyvarUpperBounds), id);
	(if (!isEmptySet(lower)) {
		"    Lower: " + superglue(set2array(lower), miniType2string, ", ");
	} else "")
	+ (if (!isEmptySet(upper)) {
		"    Upper: " + superglue(set2array(upper), miniType2string, ", ");
	} else "")
}

debugMiniType(env : MiniTypeEnv, type : MiniType) -> string {
	switch (type) {
		MiniTypeVar(id): {	
			miniPrettyTypeVar(env, id);
		}
		default: " : " + miniType2string(type);
	}
}

resType2string(r : ResType) -> string {
	switch (r) {
		ResUnion(types): {
			if (isEmptySet(types)) "⊥"
			else "(" + superglue(set2array(types), resType2string, " ⋃ ") + ")";
		}
		ResIntersection(types): {
			if (isEmptySet(types)) "⊤"
			else "(" + superglue(set2array(types), resType2string, " ⋂ ") + ")";
		}
		ResRecursiveType(id, type): "rec " + i2s(id) + ": " + resType2string(type);
		ResFunctionType(args, rhs): "(" + superglue(args, resType2string, ", ") + ") -> " + resType2string(rhs);
		ResTypeRecord(fields): "{" + superglue(fields, \f -> f.first + ":" + resType2string(f.second), ", ") + "}";
		ResTypeVar(id): "α" + i2s(id);
		ResIntType(bits): "i" + i2s(bits);
		ResTypeCall(id, typars): id + if (typars != []) "<" + superglue(typars, resType2string, ", ") + ">" else "";
		ResTypePar(id): id;
	}
}
