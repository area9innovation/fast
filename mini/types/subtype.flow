import mini/types/typeenv;
import mini/types/pretty;
import mini/types/util;
import mini/types/debug;

export {
	// Given these two type calls, constrain them against each other
	// Notice this is also used array<?>, ref<?> and such.
	constrainMiniTypeCalls(env : MiniTypeEnv, id : string, pos : int, 
		rec : (MiniTypeEnv,  MiniTypePos, MiniTypePos, string) -> void, lhs : MiniTypeCall, rhs : MiniTypeCall, 
		reason : string
	) -> void;

	// Check if this left name is inside the typename on the right, and if so, return the applied struct in the union
	findMiniStructInUnion(env : MiniAst, left : string, rightUnion : string, rtypars : [MiniType]) -> Maybe<MiniType>;

	// Check if this left name is inside the typename on the right, and if so, lift the left type to the applied union type
	findMiniUnionFromStruct(env : MiniAst, left : string, ltypars : [MiniType], right : string, rtypars : [MiniType]) -> Maybe<MiniType>;

	typeCall2MiniRecord(env : MiniAst, tc : MiniTypeCall) -> Maybe<MiniType>;
}

constrainMiniTypeCalls(env : MiniTypeEnv, id : string, pos : int, 
	rec : (MiniTypeEnv, MiniTypePos, MiniTypePos, string) -> void, 
	lhs : MiniTypeCall, rhs : MiniTypeCall, reason : string) -> void {
	if (lhs.id == "auto" || rhs.id == "auto") {
		// OK, nothing to do.
	} else if (lhs.id == rhs.id || (lhs.id == "" && rhs.id != "") || (rhs.id == "" && lhs.id != "")) {
		// TODO: Figure out how the type-pars align with each other
		if (!env.ast.options.implicitTypePars && length(lhs.typars) != length(rhs.typars)) {
			env.onError(id, pos, "Expected typars to match " + miniType2string(lhs) + " vs  " + miniType2string(rhs));
		} else {
			iteri(lhs.typars, \i, larg -> {
				if (i < length(rhs.typars)) {
					// TODO: The pos is the wrong one
					rec(env, MiniTypePos(id, pos, rhs.typars[i]), MiniTypePos(id, pos, larg), reason + " typar" + i2s(i));
				}
			});
		}
	} else {
		munion = findMiniStructInUnion(env.ast, lhs.id, rhs.id, rhs.typars);
		munion ?? {
			// TODO: Find pos for right hand side
			rec(env, MiniTypePos(id, pos, lhs), MiniTypePos(id, pos, munion), reason + " union struct");
		} : {
			env.onError(id, pos, "Type " + lhs.id + " is not part of type " + rhs.id);
		}
	}
}

// Check if this left name is inside the typename on the right, and if so, return the applied struct
findMiniStructInUnion(env : MiniAst, left : string, right : string, rtypars : [MiniType]) -> Maybe<MiniType> {
	munion = lookupTree(env.unions, right);
	switch (munion) {
		None(): None();
		Some(uniondef): {
			fold(uniondef.typenames, None(), \macc : Maybe<MiniType>, type -> {
				switch (macc) {
					None(): {
						rname = getMiniTypeName(type);
						rinstantiated = instantiateTypars(uniondef.typars, rtypars, type);
						if (rname == left) {
							// OK, instantiate the union typars into this struct
							Some(rinstantiated);
						} else {
							switch (rinstantiated) {
								MiniTypeCall(riname, riargs): {
									// OK, check this one
									findMiniStructInUnion(env, left, riname, riargs)
								}
								default: {
									// Error: Expected a type call
									macc;
								}
							}
						}
					}
					Some(__): macc;
				}
			});
		}
	}
}

// Check if this left name is inside the typename on the right, and if so, lift the left type to the applied union
// 	findMiniUnionFromStruct(Some<int>, Maybe<?>) -> Maybe<int>
findMiniUnionFromStruct(env : MiniAst, left : string, ltypars : [MiniType], right : string, rtypars : [MiniType]) -> Maybe<MiniType> {
	munion = lookupTree(env.unions, right);
	switch (munion) {
		None(): None();
		Some(uniondef): {
			fold(uniondef.typenames, None(), \macc : Maybe<MiniType>, type -> {
				switch (macc) {
					None(): {
						rname = getMiniTypeName(type);
						if (rname == left) {
							// OK, instantiate the union typars into this struct
							linstantiated = if (length(ltypars) == 1 && length(uniondef.typars) <= 1) {
									MiniTypeCall(right, ltypars);
								} else if (length(ltypars) <= 1 && length(uniondef.typars) == 1 && length(rtypars) == 1) {
									MiniTypeCall(right, rtypars);
								} else {
									println("TODO: Figure out how this type parameter mapping works between " + miniType2string(MiniTypeCall(left, ltypars)) + " and " + miniType2string(MiniTypeCall(right, uniondef.typars)));
									MiniTypeCall(right, ltypars)
								};
							Some(linstantiated);
						} else {
							// OK, we have to recurse
							// TODO: OK, if both are structs, we might be able to find a union
							// where both are inside
							// println("Check to see if " + left + " is " + rname);
							findMiniUnionFromStruct(env, left, ltypars, rname, rtypars);
						}
					}
					Some(__): macc;
				}
			});
		}
	}
}

instantiateTypars(typars : [MiniType], args : [MiniType], e : MiniType) -> MiniType {
	foldi(typars, e, \i, acc, typar -> {
		if (i < length(args)) {
			replaceMiniType(typar, args[i], acc)
		} else acc
	});
}



typeCall2MiniRecord(env : MiniAst, tc : MiniTypeCall) -> Maybe<MiniType> {
	mstruct = lookupTree(env.structs, tc.id);
	mstruct ?? {
		rec = MiniTypeRecord(mstruct.fields);
		inst = foldi(tc.typars, rec, \i, acc, arg -> {
			tp = MiniTypePar(strLeft("???????????????", i + 1));
			replaceMiniType(tp, arg, acc)
		});

/*		println("We need to instantiate");
		println(miniType2string(tc));
		println(miniType2string(rec));
		println(miniType2string(inst));
*/
		Some(inst);
	} : {
		None();
	}
}
