import mini/types/typeenv;
import mini/types/pretty;

export {
	mtypeBounds2string(t : MTypeBounds) -> string;
	mtype2Bounds(m : MiniType) -> MTypeBounds;

	// Merge these bounds. If union is true, consider this a union. Otherwise, consider it intersection
	mergeMTypeBounds(env : MiniTypeEnv, typep : MiniTypePos, union : bool, left : MTypeBounds, right : MTypeBounds) -> MTypeBounds;
}

mtypeBounds2string(t : MTypeBounds) -> string {
	mset = \s -> map(set2array(s), miniType2string);
	strGlue(concatA(
		[
			if (t.isFlow) ["flow"] else [],
			switch (t.intType) {
				None(): [];
				Some(tt): [miniType2string(tt)];
			},
			switch (t.fn) {
				None(): [];
				Some(tt): [miniType2string(tt)];
			},
			mset(t.tyvars),
			mset(t.typars),
			mset(t.records),
			mset(t.calls),
			mset(t.unnamedUnions)
		]
	), ",");
}

mtype2Bounds(t : MiniType) -> MTypeBounds {
	b = MTypeBounds(false, None(), None(), makeSet(), makeSet(), makeSet(), makeSet(), makeSet());
	switch (t) {
		MiniTypeInt(bits): MTypeBounds(b with intType = Some(t));
		MiniTypeFunction(args, returnType): MTypeBounds(b with fn = Some(t));
		MiniTypeCall(id, typars): {
			if (id == "flow") MTypeBounds(b with isFlow = true)
			else if (id == "") MTypeBounds(b with unnamedUnions = makeSet1(t))
			else MTypeBounds(b with calls = makeSet1(t));
		}
		MiniTypeVar(id): MTypeBounds(b with tyvars = makeSet1(t));
		MiniTypePar(id): MTypeBounds(b with typars = makeSet1(t));
		MiniTypeRecord(fields): MTypeBounds(b with records = makeSet1(t));
	}
}

mergeMTypeBounds(env : MiniTypeEnv, typep : MiniTypePos, union : bool, left : MTypeBounds, right : MTypeBounds) -> MTypeBounds {
	onError = \ -> {
		env.onError(typep.id, typep.pos, "Can not merge bounds " + mtypeBounds2string(left) + " and " + mtypeBounds2string(right));
	}
	mt = MTypeBounds(
		left.isFlow || right.isFlow,
		mergeMaybeType(left.intType, right.intType, onError),
		mergeMaybeType(left.fn, right.fn, onError),
		mergeSets(left.tyvars, right.tyvars),
		mergeSets(left.typars, right.typars),
		mergeSets(left.records, right.records),
		mergeSets(left.calls, right.calls),
		mergeSets(left.unnamedUnions, right.unnamedUnions),
	);
	simplifyMTypeBounds(env, mt, union, onError);
}

mergeMaybeType(left : Maybe<?>, right : Maybe<?>, onError : () -> void) -> Maybe<?> {
	switch (left) {
		None(): right;
		Some(lleft): {
			switch (right) {
				None(): left;
				Some(rright): {
					if (lleft != rright) {
						onError();
					};
					left;
				}
			}
		}
	}
}

// Simplify these bounds. If union is true, consider this a union. Otherwise, consider it intersection
simplifyMTypeBounds(env : MiniTypeEnv, m : MTypeBounds, union : bool, onError : () -> void) -> MTypeBounds {
	if (union && m.isFlow) {
		// Pure flow type wins
		MTypeBounds(true, None(), None(), makeSet(), makeSet(), makeSet(), makeSet(), makeSet());
	} else {
		isInt = isSome(m.intType);
		isFn = isSome(m.fn);
		ntyvars = sizeSet(m.tyvars);
		ntypars = sizeSet(m.typars);
		nrecords = sizeSet(m.records);
		ncalls = sizeSet(m.calls);
		nunnamed = sizeSet(m.unnamedUnions);
		if (isInt || isFn) {
			if (ntyvars + ntypars + nrecords + ncalls + nunnamed != 0 || (isInt && isFn)) {
				onError();
			}
			m;
		} else if (ntyvars + ntypars + nrecords + ncalls + nunnamed <= 1) {
			m
		} else {
			println("TODO: Simplify " + mtypeBounds2string(m) + " as " + if (union) "union" else "intersection");
			m;
		}
	}
}

/*
	MTypeBounds(
		isFlow : bool,
		intType : Maybe<MiniTypeInt>,
		fn : Maybe<MiniTypeFunction>,

		tyvars : Set<MiniTypeVar>,
		typars : Set<MiniTypePar>,
		records : Set<MiniTypeRecord>,
		calls : Set<MiniTypeCall>,
		unnamedUnion : Set<MiniTypeCall>
	);
*/
