import mini/types/restype;
import mini/types/debug;
import mini/types/type;
import mini/types/subtype;
import mini/types/subtypegraph;
import mini/types/tyvarinfo;

export {
	// Simplifies the res types to mini types
	simplifyResTypes(env : MiniTypeEnv, resTypes : Tree<int, ResType>) -> void;
}

simplifyResTypes(env : MiniTypeEnv, resTypes : Tree<int, ResType>) -> void {
	acc = SimplifyAcc(env, env.tyvars, makeSet(), resTypes);

	traverseInOrder(resTypes, \tv, restype -> {
		resolved = simplifyResType(acc, ResTypeVar(tv));
		if (false) {
			println("a"  + i2s(tv) + " = " + miniType2string(resolved) + " from " + debugBounds(env, tv) + "   giving restype: " + resType2string(restype));
		};
	});
}

SimplifyAcc(
	env : MiniTypeEnv,
	tyvars : ref Tree<int, MiniType>,
	recursive : Set<int>,
	resTypes : Tree<int, ResType>
);

simplifyResType(acc : SimplifyAcc, r : ResType) -> MiniType {
	todo = \ -> {
		acc.env.onError("Can not convert " + resType2string(r));
		MiniTypeCall("flow", []);
	};
	switch (r) {
		ResUnion(types): {
			stypes = mapSet(types, \t -> simplifyResType(acc, t));
			evalResSet(acc.env, stypes, \l, ri -> unionTypes(acc, l, ri), MiniTypeCall("⊥", []));
		}
		ResIntersection(types): {
			stypes = mapSet(types, \t -> simplifyResType(acc, t));
			evalResSet(acc.env, stypes, \l, ri -> intersectTypes(acc, l, ri), MiniTypeCall("⊤", []));
		}
		ResRecursiveType(id, type): {
			nacc = SimplifyAcc(acc with recursive = insertSet(acc.recursive, id));
			simplifyResType(nacc, type);
		}
		ResFunctionType(args, rhs): MiniTypeFunction(map(args, \a -> simplifyResType(acc, a)), simplifyResType(acc, rhs));
		ResTypeRecord(fields): todo();
		ResTypeVar(id): {
			mtype = lookupTree(^(acc.tyvars), id);
			switch (mtype) {
				None(): {
					mrestype = lookupTree(acc.resTypes, id);
					switch (mrestype) {
						None(): {
							if (containsSet(acc.recursive, id)) {
								MiniTypeVar(id);
							} else {
								todo();
							}
						}
						Some(rt): {
							if (containsSet(acc.recursive, id)) {
								MiniTypeVar(id);
							} else {
								// Update onError to know about the tyvar
								nenv = MiniTypeEnv(acc.env with onError = \e -> {
									println(findMiniTyvarInfo(acc.env, id) + e);
								});
								nacc = SimplifyAcc(acc with recursive = insertSet(acc.recursive, id), env = nenv);
								rtype = simplifyResType(nacc, rt);
								acc.tyvars := setTree(^(acc.tyvars), id, rtype);
								rtype;
							}
						}
					}
				}
				Some(t): t;
			}
		}
		ResIntType(bits): MiniTypeInt(bits);
		ResTypeCall(id, typars): MiniTypeCall(id, map(typars, \t -> simplifyResType(acc, t)));
		ResTypePar(id): MiniTypePar(id);
	}
}

evalResSet(env : MiniTypeEnv, types : Set<MiniType>, combine : (MiniType, MiniType) -> Maybe<MiniType>, def : MiniType) -> MiniType {
	mtype = foldSet(types, None(), \acc : Maybe<MiniType>, type -> {
		switch (acc) {
			None(): Some(type);
			Some(l): combine(l, type);
		}
	});
	mtype ?? {
		mtype
	} : {
		def
	}
}

// autofold: structural pairs
unionTypes(acc : SimplifyAcc, left : MiniType, right : MiniType) -> Maybe<MiniType> {
	todo = \ -> {
		acc.env.onError("Can we join these? " + miniType2string(left) + " and " + miniType2string(right));
		None();
	}
	if (left == right) Some(left)
	else {
		rightFn = \ -> {
			switch (right) {
				MiniTypeVar(id): if (containsSet(acc.recursive, id)) Some(left) else None();
				default: todo();
			}
		}
		switch (left) {
			MiniTypeInt(lbits): rightFn();
			MiniTypeFunction(largs, lreturnType): {
				switch (right) {
					MiniTypeFunction(rargs, rreturnType): {
						if (length(largs) == length(rargs)) {
							iargs = filtermapi(largs, \i, larg -> {
								// TODO: Should we intersect the args?
								unionTypes(acc, larg, rargs[i])
							});
							irt = unionTypes(acc, lreturnType, rreturnType);
							irt ?? {
								if (length(iargs) == length(largs)) {
									Some(MiniTypeFunction(iargs, irt));
								} else None();
							} : None();
						} else None();
					}
					default: rightFn();
				}
			}
			MiniTypeCall(lid, ltypars): {
				switch (right) {
					MiniTypeCall(rid, rtypars): {
						unionMiniTypecalls(acc, left, right);
					}
					default: {
						if (lid == "flow") Some(left)
						else rightFn();
					}
				}
			}
			MiniTypeVar(lid): {
				if (containsSet(acc.recursive, lid)) {
					Some(right);
				} else rightFn();
			}
			MiniTypePar(id): {
				rightFn();
			}
			MiniTypeRecord(fields): {
				rightFn();
			}
		}
	}
}

// autofold: structural pairs
intersectTypes(acc : SimplifyAcc, left : MiniType, right : MiniType) -> Maybe<MiniType> {
	todo = \ -> {
		acc.env.onError("Can we intersect these? " + miniType2string(left) + " and " + miniType2string(right));
		None();
	}
	if (left == right) Some(left)
	else {
		rightFn = \ -> {
			switch (right) {
				MiniTypeVar(id): if (containsSet(acc.recursive, id)) Some(left) else None();
				default: todo();
			}
		}
		switch (left) {
			MiniTypeInt(lbits): rightFn();
			MiniTypeFunction(largs, lreturnType): {
				switch (right) {
					MiniTypeFunction(rargs, rreturnType): {
						if (length(largs) == length(rargs)) {
							iargs = filtermapi(largs, \i, larg -> {
								// TODO: Should we union the args?
								intersectTypes(acc, larg, rargs[i])
							});
							irt = intersectTypes(acc, lreturnType, rreturnType);
							irt ?? {
								if (length(iargs) == length(largs)) {
									Some(MiniTypeFunction(iargs, irt));
								} else None();
							} : None();
						} else None();
					}
					default: rightFn();
				}
			}
			MiniTypeCall(lid, ltypars): {
				switch (right) {
					MiniTypeCall(rid, rtypars): {
						intersectMiniTypecalls(acc, left, right);
					}
					default: {
						if (lid == "flow") Some(right)
						else rightFn();
					}
				}
			}
			MiniTypeVar(lid): {
				if (containsSet(acc.recursive, lid)) {
					Some(right);
				} else rightFn();
			}
			MiniTypePar(id): {
				rightFn();
			}
			MiniTypeRecord(fields): {
				rightFn();
			}
		}
	}
}

// Should this be moved to subtype.flow?
unionMiniTypecalls(acc : SimplifyAcc, left : MiniTypeCall, right : MiniTypeCall)  -> Maybe<MiniType> {
	if (left.id == right.id) {
		if (!acc.env.ast.options.implicitTypePars && length(left.typars) != length(right.typars)) {
			None();
		} else {
			len = max(length(left.typars), length(right.typars));
			itypars = generate(0, len, \i -> {
				ltypar = if (i < length(left.typars)) {
					left.typars[i];
				} else right.typars[i];
				rtypar = if (i < length(right.typars)) {
					right.typars[i];
				} else left.typars[i];
				unionTypes(acc, ltypar, rtypar);
			});
			otypars = filtermap(itypars, idfn);
			if (length(otypars) == len) {
				Some(MiniTypeCall(left.id, otypars));
			} else None();
		}
	} else if (left.id == "flow") {
		Some(left)
	} else if (right.id == "flow") {
		Some(right);
	} else {
		mlstruct = findMiniUnionFromStruct(acc.env.ast, left.id, left.typars, right.id, right.typars);
		mlstruct ?? {
			// OK, we lifted to a union
			unionTypes(acc, mlstruct, right)
		} : {
			mrstruct = findMiniUnionFromStruct(acc.env.ast, right.id, right.typars, left.id, left.typars);
			mrstruct ?? {
				// OK, we lifted to a union
				unionTypes(acc, left, mrstruct)
			} : {
				// OK, neither is a subtype of the other. See if they have a common supertype
				lsupers = findMiniSuperTypes(acc.env.ast.subtypeGraph, left.id);
				rsupers = findMiniSuperTypes(acc.env.ast.subtypeGraph, right.id);
				commonSupers = intersectSets(lsupers, rsupers);

				supers = set2array(commonSupers);
				if (length(supers) == 1) {
					// OK, we found a unique supertype we can use
					if (left.typars == []) {
						runion = findMiniUnionFromStruct(acc.env.ast, right.id, right.typars, supers[0], []);
						runion ?? {
							unionTypes(acc, left, runion);
						} : {
							acc.env.onError("Can we union these 3? " + miniType2string(left) + " and " + miniType2string(right));
							acc.env.onError(strGlue(set2array(commonSupers), ", "));
							None();
						}
					} else {
						lunion = findMiniUnionFromStruct(acc.env.ast, left.id, left.typars, supers[0], []);
						lunion ?? {
							unionTypes(acc, lunion, right);
						} : {
							acc.env.onError("Can we union these 2? " + miniType2string(left) + " and " + miniType2string(right));
							acc.env.onError(strGlue(set2array(commonSupers), ", "));
							None();
						}
					}
				} else {
					acc.env.onError("Can we union these? " + miniType2string(left) + " and " + miniType2string(right));
					acc.env.onError(strGlue(set2array(commonSupers), ", "));
					None();
				}
			}
		}
	}
}

intersectMiniTypecalls(acc : SimplifyAcc, left : MiniTypeCall, right : MiniTypeCall)  -> Maybe<MiniType> {
	if (left.id == right.id) {
		if (!acc.env.ast.options.implicitTypePars && length(left.typars) != length(right.typars)) {
			None();
		} else {
			len = max(length(left.typars), length(right.typars));
			itypars = generate(0, len, \i -> {
				ltypar = if (i < length(left.typars)) {
					left.typars[i];
				} else right.typars[i];
				rtypar = if (i < length(right.typars)) {
					right.typars[i];
				} else left.typars[i];
				intersectTypes(acc, ltypar, rtypar);
			});
			otypars = filtermap(itypars, idfn);
			if (length(otypars) == len) {
				Some(MiniTypeCall(left.id, otypars));
			} else None();
		}
	} else if (left.id == "flow") {
		Some(right)
	} else if (right.id == "flow") {
		Some(left);
	} else {
		mlstruct = findMiniStructInUnion(acc.env.ast, left.id, right.id, right.typars);
		mlstruct ?? {
			// OK, we found the struct in the right hand side. Intersect with that
			intersectTypes(acc, left, mlstruct)
		} : {
			mrstruct = findMiniStructInUnion(acc.env.ast, right.id, left.id, left.typars);
			mrstruct ?? {
				// OK, we found the struct in the right hand side. Intersect with that
				intersectTypes(acc, right, mrstruct)
			} : {
				acc.env.onError("Can we intersect these? " + miniType2string(left) + " and " + miniType2string(right));
				None();
			}
		}
	}
}
