import mini/types/typeenv;
import text/blueprint;
import mini/types/pretty;
import mini/types/builtin;

export {
	// Lookup the type
	resolveMiniTypeVar(env : MiniTypeEnv, name : string, pos : int, tyvarId : int) -> MiniType;
}

resolveMiniTypeVar(env : MiniTypeEnv, name : string, pos : int, tyvarId : int) -> MiniType {
	mtype : Maybe<MiniType> = lookupTree(^(env.tyvars), tyvarId);

	mtype ?? {
		mtype
	} : {
		if (tyvarId == 0) {
			miniTypeVoid
		} else {
			lower = lookupMultimap(^(env.tyvarLowerBounds), tyvarId);
			upper = lookupMultimap(^(env.tyvarUpperBounds), tyvarId);
			fn = \l -> "{" + superglue(set2array(l), miniType2string, ", ") + "}";
			env.onError(name, pos, "Could not resolve tyvar " + i2s(tyvarId) + " with " + fn(lower) + ".." + fn(upper));
			MiniTypeVar(tyvarId);
		}
	};
}
