import mini/types/typeenv;

export {
	// Convert type vars to real vars
	resolveMiniType(env : MiniTypeEnv, type : MiniType2) -> MiniType2;
}

resolveMiniType(env : MiniTypeEnv, type : MiniType2) -> MiniType2 {
	switch (type) {
		MiniType2Int(bits): type;
		MiniType2Function(args, returnType): MiniType2Function(resolveMiniTypes(env, args), resolveMiniType(env, returnType));
		MiniType2Call(id, typars): MiniType2Call(id, resolveMiniTypes(env, typars));
		MiniType2Var(id): {
			mtype = lookupTree(env.tyvars, id);
			mtype ?? resolveMiniType(env, mtype) : type;
		}
		MiniType2Par(id): type;
		MiniType2Record(fields): {
			MiniType2Record(map(fields, \field -> {
				MiniType2Field(field.name, resolveMiniType(env, field.type));
			}))
		}
	}
}

resolveMiniTypes(env : MiniTypeEnv, types : [MiniType2]) -> [MiniType2] {
	map(types, \t -> resolveMiniType(env, t))
}
