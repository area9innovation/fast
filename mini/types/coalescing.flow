import mini/types/typeenv;
import mini/types/restype;
import ds/tuples;
import ds/treeutils;

export {
	// Construct a map of how each tyvar is coalescated to a ResType
	coalesceMiniTypeVars(env : MiniTypeEnv) -> Tree<int, ResType>;
}

PolarVariable(id : int, polar : bool);

CoalesceAcc(
	env : MiniTypeEnv,
	recursive : ref Tree<PolarVariable, ResTypeVar>,
	inProcess : Set<PolarVariable>
);

coalesceMiniTypeVars(env : MiniTypeEnv) -> Tree<int, ResType> {
	cenv = CoalesceAcc(env, ref makeTree(), makeSet());
	foldRange(1, ^(env.tyvarId) - 1, makeTree(), \acc, tv -> {
		restype = goCoalesce(cenv, MiniTypeVar(tv), true);
		setTree(acc, tv, restype);
	});
}

coalesceMiniType(env : MiniTypeEnv, type : MiniType) -> ResType {
	goCoalesce(
		CoalesceAcc(env, ref makeTree(), makeSet()), 
		type,
		true
	);
}

goCoalesce(env : CoalesceAcc, type : MiniType, polar : bool) -> ResType {
	switch (type) {
		MiniTypeInt(bits): ResIntType(bits);
		MiniTypeFunction(args, returnType): {
			ResFunctionType(
				map(args, \a -> {
					goCoalesce(env, a, !polar)
				}),
				goCoalesce(env, returnType, polar)
			)
		}
		MiniTypeCall(id, typars): {
			ResTypeCall(id, map(typars, \tp -> {
				goCoalesce(env, tp, polar)
			}));
		}
		MiniTypeVar(id): {
			vspol = PolarVariable(id, polar);
			if (containsSet(env.inProcess, vspol)) {
				mtyvar = lookupTree(^(env.recursive), vspol);
				mtyvar ?? {
					mtyvar
				} : {
					// First time we see this, so we make a new tyvar for it
					tyvar = makeResTypeVar(env.env);
					env.recursive := setTree(^(env.recursive), vspol, tyvar);
					tyvar;
				}
			} else {
				bounds = lookupMultimap(^(if (polar) env.env.tyvarLowerBounds else env.env.tyvarUpperBounds), id);
				nenv = CoalesceAcc(env with inProcess = insertSet(env.inProcess, vspol));
				boundTypes = mapSet(bounds, \b -> {
					goCoalesce(nenv, b, polar)
				});

				mbounds = popMinSet(boundTypes);
				res = mbounds ?? {
					if (isEmptySet(mbounds.rest)) {
						mbounds.value
					} else if (polar) {
						ResUnion(boundTypes)
					} else {
						ResIntersection(boundTypes);
					}
				} : {
					ResTypeVar(id);
				};

				// If this exist in the recursive map, return a recursive type
				mrecid = lookupTree(^(env.recursive), vspol);
				mrecid ?? {
					// ResRecursiveType(mrecid.id, res)
					res;
				} : res;
			}
		}
		MiniTypePar(id): ResTypePar(id);
		MiniTypeRecord(fields): {
			ResTypeRecord(map(fields, \f : MiniTypeField -> {
				Pair(f.name, goCoalesce(env, f.type, polar))
			}))
		}
	}
}

makeResTypeVar(env : MiniTypeEnv) -> ResTypeVar {
	id = ^(env.tyvarId);
	env.tyvarId := id + 1;
	ResTypeVar(id);
}
