import mini/types/type;
import text/blueprint;

export {
	miniType2string(t : MiniType) -> string;
}

miniType2string(t : MiniType) -> string {
	switch (t) {
		MiniTypeInt(bits): "i" + i2s(bits);
		MiniTypeFunction(args, returnType): "(" + superglue(args, miniType2string, ", ") + ") -> " + miniType2string(returnType);
		MiniTypeCall(id, typars): id + if (typars != []) "<" + superglue(typars, miniType2string, ", ") + ">" else "";
		MiniTypeVar(id): "Î±" + i2s(id);
		MiniTypePar(id): id;
		MiniTypeRecord(fields): {
			"{" + superglue(fields, \field -> (if (field.isMutable) "mutable " else "") + field.name + ":" + miniType2string(field.type), ", ") + "}";
		}
	}
}
