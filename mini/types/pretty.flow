import mini/types/type;
import text/blueprint;

export {
	miniType2string(t : MiniType) -> string;

	miniStruct2string(t : MiniStruct) -> string;

	miniUnion2string(t : MiniUnion) -> string;
}

miniType2string(t : MiniType) -> string {
	switch (t) {
		MiniTypeInt(bits): if (bits == 0) "void" else if (bits == 1) "bool" else if (bits == 32) "int" else "i" + i2s(bits);
		MiniTypeFunction(args, returnType): "(" + superglue(args, miniType2string, ", ") + ") -> " + miniType2string(returnType);
		MiniTypeCall(id, typars): id + if (typars != []) "<" + superglue(typars, miniType2string, ", ") + ">" else "";
		MiniTypeVar(id): "Î±" + i2s(id);
		MiniTypePar(id): id;
		MiniTypeRecord(fields): {
			"{" + superglue(fields, \field -> (if (field.isMutable) "mutable " else "") + field.name + ":" + miniType2string(field.type), ", ") + "}";
		}
	}
}

miniStruct2string(t : MiniStruct) -> string {
	miniType2string(MiniTypeCall(t.name, t.typars)) 
	+ "(" + superglue(t.fields, \mtf : MiniTypeField -> {
		(if (mtf.isMutable) "mutable " else "")
		+ mtf.name + " : " + miniType2string(mtf.type)
	}, ", ") + ")";
}

miniUnion2string(u : MiniUnion) -> string {
	miniType2string(MiniTypeCall(u.name, u.typars)) + " ::= " + superglue(u.typenames, miniType2string, ", ")
}
