import mini/types/typeenv;
import mini/types/pretty;
import ds/treeutils;

export {
	makeMiniTypeEnv(ast : MiniAst) -> MiniTypeEnv;
	typeInferenceMiniScope(env : MiniTypeEnv, scope : string, ex : MiniExp) -> MiniTypeEnv;
	setMiniType2(env : MiniTypeEnv, id : string, type : MiniType2) -> MiniTypeEnv;
}

makeMiniTypeEnv(ast : MiniAst) -> MiniTypeEnv {
	MiniTypeEnv(
		ast,
		makeTree(),
		makeTree(),
		makeTree(),
		makeTree(),
		0
	);
}

typeInferenceMiniScope(env : MiniTypeEnv, scope : string, ex : MiniExp) -> MiniTypeEnv {
	// TODO: Set up an environment for this scope where we can remember
	// the types
	type = makeMiniType2Var(env);
	nenv = setMiniType2(env, scope, type);

	rt = typeInferenceMini(nenv, ex);

	// OK, we constrain the type
	constrainMiniType(nenv, type, rt);

	nenv;
}

/*
We follow the algorithm from here:
https://dl.acm.org/doi/abs/10.1145/3409006

There is an implementation here:
https://github.com/LPTK/simple-sub
*/
typeInferenceMini(env : MiniTypeEnv, ex : MiniExp) -> MiniType2 {
	switch (ex) {
		MiniInt(value, __): MiniType2Int(32);
		MiniDouble(value): MiniType2Call("double", []);
		MiniString(value): MiniType2Call("string", []);
		MiniVar(name, __): {
			mlocal = lookupTree(env.types, name);
			mlocal ?? mlocal : {
				mglobal = lookupTree(env.ast.types, name);
				switch (mglobal) {
					None(): {
						println("Unknown name " + name);
						makeMiniType2Var(env);
					}
					Some(t): t;
				}
			}
		}
		MiniLet(name, value, body, __): {
			vtype = typeInferenceMini(env, value);
			nenv = setMiniType2(env, name, vtype);
			typeInferenceMini(nenv, body);
		}
		MiniLambda(args, body, __): {
			argTypes = map(args, \arg -> makeMiniType2Var(env));
			nenv = foldi(args, env, \i, acc, arg -> {
				setMiniType2(acc, arg, argTypes[i])
			});
			typeInferenceMini(nenv, body);
		}
		MiniCall(fn, args, __): {
			resType = makeMiniType2Var(env);
			fnType = typeInferenceMini(env, fn);
			callType = MiniType2Function(
				map(args, \a -> typeInferenceMini(env, a)),
				resType
			);
			constrainMiniType(env, fnType, callType);
			resType;
		}
		MiniTypeInt(bits): MiniType2Int(bits);
		MiniTypeFunction(args, returnType): {
			argTypes = map(args, \a -> {
				typeInferenceMini(env, a)
			});
			retType = typeInferenceMini(env, returnType);
			MiniType2Function(argTypes, retType);
		}
		MiniTypeCall(id, typars): {
			MiniType2Call(id, map(typars, \tp -> typeInferenceMini(env, tp)));
		}
	}
}

constrainMiniType(env : MiniTypeEnv, lhs : MiniType2, rhs : MiniType2) -> void {
	// if cache contains (lhs, rhs) return else cache += (lhs, rhs)

	// println("Constrain " + mtype2string(lhs) + " <: " + mtype2string(rhs));

	error = \ -> {
		println("Cannot constrain " + mtype2string(lhs) + " <: " + mtype2string(rhs));
	}

	rightTyVar = \rid -> {
		addMiniLowerBound(env, rid, lhs);
		constrainUpperBounds(env, rid, lhs);
	}

	todo = \ -> {
		println("TODO: Implement constrain " + mtype2string(lhs) + " <: " + mtype2string(rhs));
	}

	switch (lhs) {
		MiniType2Int(lbits): {
			switch (rhs) {
				MiniType2Int(rbits): if (lbits != rbits) error();
				MiniType2Var(rid): rightTyVar(rid);
				default: error();
			}
		}
		MiniType2Function(largs, lreturnType): {
			switch (rhs) {
				MiniType2Function(rargs, rreturnType): {
					// (Function(l0, r0), Function(l1, r1)) => constrain(l1, l0); constrain(r0, r1)
					if (length(largs) != length(rargs)) {
						error();
					} else {
						iteri(largs, \i, larg -> {
							constrainMiniType(env, rargs[i], larg);
						});
						constrainMiniType(env, lreturnType, rreturnType);
					}
				}
				MiniType2Var(rid): rightTyVar(rid);
				default: error();
			}
		}

		MiniType2Call(lid, ltypars): {
			switch (rhs) {
				MiniType2Call(rid, rtypars): {
					// TODO: Maybe we should instantiate these types?
					if (lid != rid || length(ltypars) != length(rtypars)) {
						error();
					} else {
						iteri(ltypars, \i, larg -> {
							constrainMiniType(env, rtypars[i], larg);
						});
					}
				}
				MiniType2Var(rid): rightTyVar(rid);
				default: error();
			}
		}
		MiniType2Var(lid): {
			addMiniUpperBound(env, lid, rhs);
			constrainLowerBounds(env, lid, rhs);
		}
		MiniType2Par(lid): {
			switch (rhs) {
				MiniType2Par(rid): {
					// OK, maybe we should instantiate these types
					if (lid != rid) {
						error();
					}
				}
				MiniType2Var(rid): rightTyVar(rid);
				default: error();
			}
		}
		MiniType2Record(fields): {
			/*
			(Record(fs0), Record(fs1)) =>
				fs1.foreach { 
					case (n1, t1) =>
						fs0.find(_._1 == n1) match {
							None => err("missing field: " + n1 + " in " + lhs);
							Some((_, t0)) => constrain(t0, t1) 
						}
				}
			*/
			todo();
		}
	}
}

makeMiniType2Var(env : MiniTypeEnv) -> MiniType2Var {
	id = env.tyvarId;
	env.tyvarId ::= id + 1;
	MiniType2Var(id);
}

setMiniType2(env : MiniTypeEnv, id : string, type : MiniType2) -> MiniTypeEnv {
// 	println(id + " = " + toString(type));
	MiniTypeEnv(env with types = setTree(env.types, id, type));
}


addMiniLowerBound(env : MiniTypeEnv, tyvar : int, type : MiniType2) -> void {
	env.tyvarLowerBounds ::= insertMultimap(env.tyvarLowerBounds, tyvar, type);
}

addMiniUpperBound(env : MiniTypeEnv, tyvar : int, type : MiniType2) -> void {
	env.tyvarUpperBounds ::= insertMultimap(env.tyvarUpperBounds, tyvar, type);
}

constrainLowerBounds(env : MiniTypeEnv, tyvar : int, type : MiniType2) -> void {
	types = lookupMultimap(env.tyvarLowerBounds, tyvar);
	iterSet(types, \ltype -> {
		constrainMiniType(env, ltype, type)
	})
}

constrainUpperBounds(env : MiniTypeEnv, tyvar : int, type : MiniType2) -> void {
	types = lookupMultimap(env.tyvarUpperBounds, tyvar);
	iterSet(types, \utype -> {
		constrainMiniType(env, type, utype)
	})
}
