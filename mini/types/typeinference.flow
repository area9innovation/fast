import mini/types/constrain;
import mini/util/trace;

/*import mini/types/typeenv;
import mini/types/pretty;
import mini/types/pretty;
import mini/types/tyvarinfo;
import mini/types/type_ast;
import mini/types/subtype;
import mini/types/polymorphism;
import mini/types/debug;
import mini/exp/pretty;
import mini/util/position;
import ds/treeutils;
*/

export {
	makeMiniTypeEnv(ast : MiniAst) -> MiniTypeEnv;

	// Do type inference on this declaration. If it is recursive, send in a bool
	typeInferenceMiniDeclaration(env : MiniTypeEnv, id : string, recursive : bool, ex : MiniExp) -> MiniTypeEnv;
}

makeMiniTypeEnv(ast : MiniAst) -> MiniTypeEnv {
	MiniTypeEnv(
		ast,
		makeTree(),
		makeUnionFind(0),
		// Reqs
		ref makeTree(),
		// Decided
		ref makeTree(),
		ref 1,
		ref makeSet(),
		ref makeTree(),
		ref makeTree(),
		\name, pos, e -> ast.onError(ast, name, pos, e)
	);
}

typeInferenceMiniDeclaration(env0 : MiniTypeEnv, id : string, recursive : bool, ex : MiniExp) -> MiniTypeEnv {
	pos = getMiniPos(ex);
	if (isDebuggingId(env0.ast, StageTypeInference(), id)) {
		println("Type inference for " + id + " starting at Î±" + i2s(^(env0.tyvarId)));
		if (pos == -1) {
			println("Could not find pos for " + miniPretty(ex));
		}
	};
	inferredType = if (recursive) {
		// OK, we have to add a local variable of this name and constrain it
		type = makeMiniTypeVar(env0);
		nenv = setMiniLocalType(env0, id, type);
		rt = typeInferenceMini(nenv, id, ex);

		// OK, we constrain the type
		constrainMiniType(nenv, MiniTypePos(id, pos, rt), MiniTypePos(id, pos, type), "rec");
		rt;
	} else {
		typeInferenceMini(env0, id, ex);
	};

	// Check if we have a forward declaration, 
	mforward = lookupTree(env0.ast.types, id);
	mforward ?? {
		// When we do, then constraint it, but keep it as the type of this id
		constrainMiniType(env0, 
			MiniTypePos(id, pos, inferredType), 
			MiniTypePos(id, pos, mforward), // TODO: Find the position of the existing definition?
			"forward<" + id + ">"
		);

		if (false) {
			// If this is polymorphic, we could probably resolve it immediately?
			typars = extractMiniTypePars(makeSet(), mforward);
			if (!isEmptySet(typars)) {
				println(id);
				println(typars);
			}
		};

		env0
	} : {
		// No forward, so set the type
		setMiniTypeDeclaration(env0, id, pos, inferredType);
	};
}

setMiniTypeDeclaration(env : MiniTypeEnv, id : string, pos : int, type : MiniType) -> MiniTypeEnv {
	// See if we already have a forward declaration. 
	// If so, that should serve as a constraint.
	mtype = lookupTree(env.ast.types, id);
	mtype ?? {
		// TODO: If we have it, find the existing position
		constrainMiniType(env, MiniTypePos(id, pos, type), MiniTypePos(id, pos, mtype), "forward<" + id + ">");
	} : {};

	MiniTypeEnv(
		env with ast = MiniAst(env.ast with types = setTree(env.ast.types, id, type))
	)
}

/*
We follow the algorithm from here:
https://dl.acm.org/doi/abs/10.1145/3409006

There is an implementation here:
https://github.com/LPTK/simple-sub
*/
typeInferenceMini(env : MiniTypeEnv, id : string, ex : MiniExp) -> MiniType {
	switch (ex) {
		MiniInt(value, __, tv): {
			setMiniTypeVar(env, id, ex, MiniTypeInt(32));
		}
		MiniDouble(value, __): MiniTypeCall("double", []);
		MiniString(value, __): MiniTypeCall("string", []);
		MiniVar(name, pos, __): {
			itype = getMiniVarType(env, id, pos, name);
			setMiniTypeVar(env, id, ex, itype);
		}
		MiniLet(name, value, body, __, tv): {
			vtype = typeInferenceMini(env, id, value);
			nenv = setMiniLocalType(env, name, vtype);
			setMiniTypeVar(nenv, id, ex, typeInferenceMini(nenv, id, body));
		}
		MiniLambda(args, body, __, __): {
			argTypes = map(args, \arg -> makeMiniTypeVar(env));
			nenv = foldi(args, env, \i, acc, arg -> {
				setMiniLocalType(acc, arg, argTypes[i])
			});
			retType = typeInferenceMini(nenv, id, body);
			fnType = MiniTypeFunction(argTypes, retType);
			setMiniTypeVar(nenv, id, ex, fnType);
		}
		MiniCall(fn, args, pos, __): {
			def = \ -> {
				resType = makeMiniTypeVar(env);
				fnType = typeInferenceMini(env, id, fn);
				callType = MiniTypeFunction(
					map(args, \a -> typeInferenceMini(env, id, a)),
					resType
				);
				// TODO: We could separate the pos for the call to the fn, and the args in callType
				constrainMiniType(env, MiniTypePos(id, pos, fnType), MiniTypePos(id, pos, callType), "call");
				setMiniTypeVar(env, id, ex, resType);
			};
			switch (fn) {
				MiniVar(fname, __, __): {
					/*
					 *
					 * Here we handle special functions that have special typing rules
					 *
					 */
					if (fname == "__type" || fname == "__fntype"|| fname == "__uniontype" || fname == "__recordtype") {
						type = convertMiniExpAsType(env, ex);
						setMiniTypeVar(env, id, ex, type);
					} else if (fname == ":") {
						// This is special.
						argType = typeInferenceMini(env, id, args[0]);
						type = convertMiniExpAsType(env, args[1]);

						defc = \ -> {
							// Pick out the position for the type
							typepos0 = getMiniPos(args[1]);
							typepos = if (typepos0 == -1) pos else typepos0;
							constrainMiniType(env, MiniTypePos(id, pos, argType), MiniTypePos(id, typepos, type), ":");
						};

						switch (args[0]) {
							MiniInt(__, __, __): {
								switch (type) {
									MiniTypeInt(__): {
										// This is fine nomatter what, since it is the official way to declare other int types
									}
									default: defc();
								}
							}
							default: defc();
						};
						setMiniTypeVar(env, id, args[1], type);
						setMiniTypeVar(env, id, ex, type);
					} else if (fname == "__downcast") {
						// This is downcast "id : type in body"
						name = getMiniVar(args[0]);
						nameType = typeInferenceMini(env, id, args[0]);
						type = convertMiniExpAsType(env, args[1]);
						body = args[2];

						// OK, relate the type-pars of the subtype to the type-pars of the super-type
						switch (type) {
							MiniTypeCall(subtype, stypars): {
								// Relate type pars of the first name and the type here
								supertype = getMiniVarType(env, id, pos, name);
								// Make a shell union type call with the correct number of type pars
								scalltype = MiniTypeCall("", map(stypars, \__ -> makeMiniTypeVar(env)));
								// Relate this to the super-type
								// TODO: We could potentially find the position of the name
								unifyMiniType(env, 
									MiniTypePos(id, pos, scalltype), 
									MiniTypePos(id, pos, supertype), 
									"downcast-super"
								);

								// and relate the typars to the typars of the subtype
								iteri(scalltype.typars, \i, larg -> {
									constrainMiniType(env, 
										// The typepars of the downcast type
										MiniTypePos(id, pos, stypars[i]), 
										// And the typepar of the supercall
										MiniTypePos(id, pos, larg),
										"downcast-typar" + i2s(i)
									);
								});

								// So construct a type-call with parameters for the type,
								// and then relate supertype with this new type-call?
//								// println("Relating type pars of " + miniType2string(supertype) + " with " + miniType2string(type));
								setMiniTypeVar(env, id, args[0], scalltype);
								{}
							}
							default: {
								env.onError(id, pos, "Downcast only defined for type names, not " + miniType2string(type));
							}
						}

						nenv1 = setMiniLocalType(env, name, type);
						setMiniTypeVar(nenv1, id, args[1], type);
						setMiniTypeVar(nenv1, id, ex, typeInferenceMini(nenv1, id, body));
					} else if (fname == ".") {
						argType = typeInferenceMini(env, id, args[0]);
						field = getMiniString(args[1]);

						fieldType = makeMiniTypeVar(env);
						rec = MiniTypeRecord([MiniTypeField(field, false, fieldType)]);

						fieldpos0 = getMiniPos(args[1]);
						fieldpos = if (fieldpos0 == -1) pos else fieldpos0;

						constrainMiniType(env, MiniTypePos(id, pos, argType), MiniTypePos(id, fieldpos, rec), ".");

						setMiniTypeVar(env, id, ex, fieldType);
					} else {
						def();
					}
				}
				default: def();
			}
		}
	}
}

getMiniVarType(env : MiniTypeEnv, id : string, pos : int, name : string) -> MiniType {
	mlocal = lookupTree(env.localTypes, name);

	type = mlocal ?? mlocal : {
		mglobal = lookupTree(env.ast.types, name);
		switch (mglobal) {
			None(): {
				env.onError(id, pos, "Type inference: Does not know var " + name);
				makeMiniTypeVar(env);
			}
			Some(t): t;
		}
	};

	// OK, we should instantiate this polymorphism
	instantiateTypePars2TypeVars(env, type);
}

// This constraints the given exp to have a tyvar with a given type
setMiniTypeVar(env : MiniTypeEnv, global : string, ex : MiniExp, type : MiniType) -> MiniType {
	def = \tv -> {
		id = if (tv == 0) {
			ttv = makeMiniTypeVar(env);
			switch (ex) {
				MiniInt(value, __, tyvar): ex.tyvar ::= ttv.id;
				MiniVar(name, __, tyvar): ex.tyvar ::= ttv.id;
				MiniLet(name, value, body, __, tyvar): ex.tyvar ::= ttv.id;
				MiniLambda(args, body, __, tyvar): ex.tyvar ::= ttv.id;
				MiniCall(fn, args, __, tyvar): ex.tyvar ::= ttv.id;

				MiniDouble(value, __): {};
				MiniString(value, __): {};
			};
			ttv.id;
		} else tv;

		pos = getMiniPos(ex);
		setMiniTypeBounds(env, id, MiniTypePos(global, pos, type));

		if (pos == -1) {
			if (isUrlParameterTrue("strict")) {
				println("Could not find position for " + miniPretty(ex));
			}
		} else {
			setMiniTyvarInfo(env, id, global, pos);
		}

		type;
	};
	switch (ex) {
		MiniInt(value, __, tyvar): def(tyvar);
		MiniVar(name, __, tyvar): def(tyvar);
		MiniLet(name, value, body, __, tyvar): def(tyvar);
		MiniLambda(args, body, __, tyvar): def(tyvar);
		MiniCall(fn, args, __, tyvar): def(tyvar);

		MiniDouble(value, __): type;
		MiniString(value, __): type;
	}
}

setMiniLocalType(env : MiniTypeEnv, id : string, type : MiniType) -> MiniTypeEnv {
// 	println(id + " = " + toString(type));
	MiniTypeEnv(env with localTypes = setTree(env.localTypes, id, type));
}

// Converts types from exp to types. Also handles auto, and updates the type of this expression
convertMiniExpAsType(env : MiniTypeEnv, e : MiniExp) -> MiniType {
	t = convertMiniExp2Type(e);
	instantiateTypeAuto(env, t);
}
