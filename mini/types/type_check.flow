import mini/types/typeinference;
import mini/types/coalescing;
import mini/types/simplify;
import mini/util/trace;
import mini/exp/topological;
import mini/exp/pretty_typed;
import mini/backends/bprogram_lower;
import mini/backends/flow;
import mini/backends/pretty;
import mini/semantics/unfold;
import mini/semantics/simplify;
import mini/types/debug;

export {
	// Run a type inference and check on these ids
	// and return the resulting environment
	// This also updates the typed backend AST representation
	// with optimizations. It also keeps track of "pure" ids
	typecheckMiniTypes(ast : MiniAst, ids : Set<string>) -> MiniAst;
}

/*
Type checking runs like this on a batch of ids:
- Determine a suitable topological order to type infer from the leaves of dependencies
- Recursively infer MiniType types of each AST node in these ids, 
  collecting lower/upper-bound constraints on tyvars as MiniType
- Coalesce these MiniType bounds into ResTypes for each tyvar, and then convert these
  back into MiniType as the final types
- Then lower the AST to the typed backend representation

TODO:
- Figure out how to simplify unions of type vars, as seen in recursion as an example.
*/

typecheckMiniTypes(ast : MiniAst, ids : Set<string>) -> MiniAst {
	// Find a topological order of these ids
	order = topologicalMiniOrder(ast.idDependents, ids);

	if (false) {
		println("Typing in this order:");
		println(order);
	};
	
	tenv = makeMiniTypeEnv(ast);
	// Do type inference and constraining of all ids
	tenv2 = fold(order, tenv, \acc, id -> {
		mfn = lookupTree(ast.declarations, id);
		mfn ?? {
			// Update the tyvar map
			tenv.tyvar2Id := setTree(^(tenv.tyvar2Id), ^(tenv.tyvarId), id);

			recursive = containsSet(lookupMultimap(ast.idDependents.dependencies, id), id);

			// OK, find the type of this
			typeInferenceMiniDeclaration(acc, id, recursive, mfn);
		} : {
			ast.onError(ast, id, -1, "Unknown name when type checking " + id);
			acc;
		}
	});

	if (false) {
		// println("\nBefore resolution:");
		debugMiniTypeEnv(tenv2, true);

		println("\nMini exp declarations before coalescing:");
		iter(order, \id -> {
			mfn = lookupTree(ast.declarations, id);
			mfn ?? {
				println(id + " = " + miniPrettyTyped(tenv2, mfn));
			} : {}
		});
	};

	cenv = MiniTypeEnv(tenv2 with onError = {
		\name, pos, e -> ast.onError(ast, name, pos, "<unknown>: " + e)
	});

	// OK, resolve the constraints
	resTypes = coalesceMiniTypeVars(cenv);
	simplifyResTypes(cenv, resTypes);

	iter(order, \id -> {
		if (isDebuggingId(ast, id)) {
			mfn = lookupTree(ast.declarations, id);
			mfn ?? {
				println(id + " = " + miniPrettyTyped(cenv, mfn));
			} : {}
		}
	});

	if (false) {
		println("\nMini exp declarations after:");
		iter(order, \id -> {
			mfn = lookupTree(ast.declarations, id);
			mfn ?? {
				println(id + " = " + miniPrettyTyped(cenv, mfn));
			} : {}
		});
	};

	// OK, remove the current set of ids from the pure set
	past = MiniAst(cenv.ast with pureIds = differenceSets(cenv.ast.pureIds, ids));

	if (isDebuggingIds(cenv.ast, buildSet(order))) {
		println("\nStage: Lower to BExp and optimize: " + strGlue(order, ", "));
	}

	// OK, now lower these ids to the backend representation
	nast = fold(order, past, \acc, id -> {
		mfn = lookupTree(acc.declarations, id);
		mfn ?? {
			bdecl = miniExp2BExp(cenv, id, mfn);

			// This is the pipeline of optimizations:
			un = unfoldBExp(bdecl);
			opt = simplifyBExp(acc.pureIds, un);

			if (isDebuggingId(cenv.ast, id)) {
				println(id + " = " + prettyBExp(opt));
			}

			// Check if we are pure and keep that up to date
			isPure = isBExpPure(acc.pureIds, opt);
			acc0 = if (isPure) {
				// println(id + " is pure");
				MiniAst(acc with pureIds = insertSet(acc.pureIds, id));
			} else {
				// println(id + " is NOT pure");
				acc;
			};

			MiniAst(acc0 with typedDeclarations = setTree(acc0.typedDeclarations, id, opt));
		} : {
			acc;
		}
	});

	nast;
}
