import material/material2tropic;
import material/material_snackbar;

import mini/commands/init;
import mini/commands/compiler;
import mini/exp/pretty;
import mini/types/pretty;

viewMiniDb(m : MiniDb) -> Material {
	MLines(
		concat3(
			foldList(m.forth.stack, [MText("Stack:", [])], \acc, st -> {
				arrayPush(acc, MText(miniPretty(st), []))
			}),
			[MFixedY(8.0)],
			foldTree(m.program.declarations, [MText("Ids:",[])], \st, val, acc -> {
				deps = lookupMultimap(m.program.dependencies, st);
				mtype = lookupTree(m.program.types, st);
				typeString = mtype ?? {
					" : " + mtype2string(mtype)
				} : "";
				text = st  + typeString + " =\n\t" + miniPretty(val) + " Â« " + strGlue(set2array(deps), ", ");
				arrayPush(acc, MText(text, []))
			}),
		)
	);
}

main() {
	manager = makeMaterialManager([]);

	db = make(makeMiniDb(["."], \e -> {
		showMSnackbar(manager, e, []);
	}));

	file = make("mini/tests/test.mini");
	line = make("");
	lineFocus = make(true);

	mrender(manager, true, 
		MLines([
			MText("The Mini Compile Server", [MTitle()]),
			MBaselineCols([
				MTextInput(file, [], []),
				MTextButton("COMPILE", \ -> {
					thefile = getValue(file);
					if (thefile != "") {
						next(db, pushMiniCommand(getValue(db), MiniFilename(thefile)));
					}
					next(db, miniCompile(getValue(db)));
				}, [], []),
			]),
			MBaselineCols([
				MTextInput(line, [], [
					MEatKeyDown(\ke -> ke.utf!="enter"), TTextInputFocus(lineFocus)
				]),
				MTextButton("EVALUATE", \ -> {
					theline = getValue(line);
					if (theline != "") {
						commands = strSplit(theline, " ");
						next(db, 
							fold(commands, getValue(db), \acc, command -> {
								miniLine("", acc, command)
							})
						);
					}
					next(db, miniCompile(getValue(db)));
					next(lineFocus, true);
				}, [], [MShortcut("enter")]),
			]),
			MTextButton("RESET", \ -> {
				next(db, makeMiniDb(getValue(db).includes, getValue(db).onError));
			}, [], []),
			MFixedY(8.0),
			MSelect(db, viewMiniDb),
		])
	);
}
