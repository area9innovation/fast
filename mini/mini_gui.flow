import material/material2tropic;
import material/material_snackbar;

import mini/backends/flow;
import mini/backends/js;

import mini/commands/init;
import mini/commands/process;
import mini/exp/pretty;
import mini/types/pretty;

viewMiniDb(m : MiniDb) -> Material {
	MLines(
		concatA([
			[
				MParagraph("Forth definitions: " + strGlue(getTreeKeys(m.forth.definitions), ", "), []),
			],
			foldTree(m.natives, [], \name, def, acc -> {
				arrayPush(acc, MText("  " + name, []))
			}),
			[MFixedY(8.0)],
			foldList(m.forth.stack, [MText("Stack:", [MSubtitle1()])], \acc, st -> {
				arrayPush(acc, MText("  " + miniPretty(st), []))
			}),
			[MFixedY(8.0)],
			foldTree(m.program.declarations, [MText("Ids:", [MSubtitle1()])], \st, val, acc -> {
				deps = getMiniDependencies(m.program.idDependents, st, false);
				mtype = lookupTree(m.program.types, st);
				typeString = mtype ?? {
					" : " + mtype2string(mtype)
				} : "";
				text = st  + typeString + " =\n\t" + miniPretty(val) + " Â« " + strGlue(set2array(deps), ", ");
				arrayPush(acc, MText(text, []))
			}),
		])
	);
}

makeEvalLine(db : DynamicBehaviour<MiniDb>, remaining : DynamicBehaviour<string>, def : string, focus : bool) -> Material {
	line = make(def);
	lineFocus = make(true);

	MBaselineCols([
		MTextInput(line, [], [
			MEatKeyDown(\ke -> ke.utf!="enter"), TTextInputFocus(lineFocus)
		]),
		MTextButton("EVALUATE", \ -> {
			getValue(db).onError("");
			theline = getValue(line);
			if (theline != "") {
				commands = if (startsWith(theline, "def ")) [theline] else strSplit(theline, " ");
				next(db, miniEvalForths("", getValue(db), commands));
			};
			miniProcessCommand(getValue(db), remaining, \done -> {
				next(db, done)
			});
			next(lineFocus, true);
		}, [], [MShortcut("enter")]),
	])
}

main() {
	manager = makeMaterialManager([]);

	error = make("");

	db = make(makeMiniDb([".","c:\\flow9\\lib\\"], \e -> {
		println(e);
		next(error, e);
	}));

	file = make("mini/tests/test.mini");

	remaining = make("");

	mrender(manager, true, 
		MLines([
			MText("The Mini Compile Server", [MTitle()]),
			MBaselineCols([
				MTextInput(file, [], []),
				MTextButton("COMPILE", \ -> {
					thefile = getValue(file);
					if (thefile != "") {
						next(db, pushMiniCommand(getValue(db), MiniProcessFile("", thefile, "evallines")));
					}
					miniProcessCommand(getValue(db), remaining, \done -> {
						next(db, done)
					});
				}, [], []),
			]),
			makeEvalLine(db, remaining, "prepflow", true),
			makeEvalLine(db, remaining, "\"mini/tests/test.flow\" parsefile", false),
			makeEvalLine(db, remaining, "\"ds/simplegraph.flow\" parsefile", false),
			makeEvalLine(db, remaining, "\"a()->int{1}\" parseflow", false),
			MBaselineCols([
				MTextButton("RESET", \ -> {
					next(error, "");
					next(db, makeMiniDb(getValue(db).includes, getValue(db).onError));
				}, [], []),
				MTextButton("CLEAR STACK", \ -> {
					next(error, "");
					tdb = getValue(db);
					next(db, MiniDb(tdb with forth = MiniForth(tdb.forth with stack = makeList())));
				}, [], []),
				MTextButton("COMPILE", \ -> {
					println("COMPILING");
					program = miniAst2BProgram(getValue(db).program);
					flowprogram = bprogram2flow(program);
					jsprogram = bprogram2js(program);
					setFileContent("output.flow", flowprogram);
					setFileContent("output.js", jsprogram);
					{}
				}, [], []),
				MSelect(remaining, \s -> { MText(s, [])})
			]),
			MFixedY(8.0),
			MSelect(error, \e -> MText(e, [MRed(500)])),
			MFixedY(8.0),
			MScroll(
				MSelect(db, viewMiniDb), TFillXY(), []
			)
		])
	);
}
