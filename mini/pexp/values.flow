import mini/pexp/pexp;
import maybe;
import runtime;

export {
	getPBool(e : PExp) -> bool;
	getPInt(e : PExp) -> int;
	getPDouble(e : PExp) -> double;
	getPString(e : PExp) -> string;
	getPArrayValue(e : PExp) -> [PValue];

	getPVar(e : PExp) -> string;
	getPArray(e : PExp) -> [PExp];
	getPSequence(e : PExp) -> [PExp];
	getPFieldAssign(p : PExp) -> PFieldAssign;

	getPType(e : PExp) -> PType;
	getPTypeName(e : PExp) -> PTypeName;
	getPTypeFunction(p : PExp) -> PTypeFunction;

	getPListArray(p : PExp) -> [PExp];
}

getPBool(e : PExp) -> bool {
	switch (e) {
		PBool(b): b;
		default: false;
	}
}

getPInt(e : PExp) -> int {
	switch (e) {
		PInt(d): d;
		default: 0;
	}
}

getPDouble(e : PExp) -> double {
	switch (e) {
		PDouble(d): d;
		default: 0.0;
	}
}

getPString(e : PExp) -> string {
	switch (e) {
		PString(s): s;
		default: "";
	}
}

getPArrayValue(e : PExp) -> [PValue] {
	switch (e) {
		PArrayValue(es): es;
		default: [];
	}
}

getPArray(e : PExp) -> [PExp] {
	switch (e) {
		PArray(es): es;
		default: {
			println("Expected an array!");
			[];
		}
	}
}

getPVar(e : PExp) -> string {
	switch (e) {
		PVar(v): v;
		default: "";
	}
}

getPSequence(e : PExp) -> [PExp] {
	switch (e) {
		PSequence(es): es;
		default: [];
	}
}

getPType(e : PExp) -> PType {
	switch (e) {
		PType(): e;
		default: PTypeName("", []);
	}
}

getPTypeName(e : PExp) -> PTypeName {
	switch (e) {
		PTypeName(__, __): e;
		default: PTypeName("", []);
	}
}

getPTypeFunction(p : PExp) -> PTypeFunction {
	switch (p) {
		PTypeFunction(__, __): p;
		default: PTypeFunction([], PTypeName("", []))
	}
}

getPFieldAssign(p : PExp) -> PFieldAssign {
	switch (p) {
		PFieldAssign(__, __): p;
		default: PFieldAssign("", PBool(false));
	}
}

getPListArray(p : PExp) -> [PExp] {
	switch (p) {
		PList(l): list2array(l);
		default: [];
	}
}
