import mini/pexp/values;

export {
	getPPos(position : PExp) -> int;
	setPPos(position : PExp, e : PExp) -> PExp;
}

getPPos(position : PExp) -> int {
	if (position.pos == -1) {
		println("Wrong position: " + toString(position));
	}
	position.pos;
}

setPPos(position : PExp, e : PExp) -> PExp {
	p = getPInt(position);
	switch (e) {
		PVoid(pos): PVoid(p)
		PBool(v, pos): PBool(v, p);
		PInt(v, pos): PInt(v, p);
		PDouble(v, pos): PDouble(v, p);
		PString(v, pos): PString(v, p);
		PArrayValue(values, pos): PArrayValue(values, p);
		PLambda(args, body, pos): PLambda(args, body, p);
		PImport(path, pos): PImport(path, p);
		PForbid(path, pos): PForbid(path, p);
		PExport(exports, pos): PExport(exports, p);
		PGlobal(id, value, pos): PGlobal(id, value, p);
		PNative(id, isIo, type, name, pos): PNative(id, isIo, type, name, p);
		PUnion(typename, types, pos): PUnion(typename, types, p);
		PStruct(id, structArgs, pos): PStruct(id, structArgs, p);
		PStructArg(id, ismutable, type, pos): PStructArg(id, ismutable, type, p);
		PTypeDef(id, type, pos): PTypeDef(id, type, p);
		PTypePar(id, pos): PTypePar(id, p);
		PTypeName(id, typars, pos): PTypeName(id, typars, p);
		PTypeFunction(args, returnType, pos): PTypeFunction(args, returnType, p);
		PArgType(id, type, pos): PArgType(id, type, p);
		PStringInclude(path, pos): PStringInclude(path, p);
		PVar(var, pos): PVar(var, p);
		PLet(var, value, body, pos): PLet(var, value, body, p);
		PIf(cond, then, else_, pos): PIf(cond, then, else_, p);
		PCall(fn, args, pos): PCall(fn, args, p);
		PCallOp(op, args, pos): PCallOp(op, args, p);
		PRef(value, pos): PRef(value, p);
		PSetMutable(lhs, field, value, pos): PSetMutable(lhs, field, value, p);
		PArray(exps, pos): PArray(exps, p);
		PSequence(exps, pos): PSequence(exps, p);
		PSwitch(value, cases, pos): PSwitch(value, cases, p);
		PCase(id, args, body, pos): PCase(id, args, body, p);
		PCast(value, target, pos): PCast(value, target, p);
		PWith(struct, value, fields, pos): PWith(struct, value, fields, p);
		PFieldAssign(id, value, pos): PFieldAssign(id, value, p);
		PList(l, pos): PList(l, p);
	}
}
