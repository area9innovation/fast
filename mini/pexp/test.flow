import mini/pexp/parse;
import fs/filesystem;
//import mini/pexp/interpret;
//import mini/pexp/compile;



main() {
	if (false) {
		file0 = "mini/tests/positions.flow";
		file1 = "c:/flow9/lib/formats/unicode/unidecode.flow";
		file = "c:\\lyceum/components/rhapsode_server/rhapsode_server/api/isams/import_data.flow";
		code = getFileContent(file);
		p = parsePExp(code, println);
	} else {
		files = filter(readDirectoryRecursively("c:\\lyceum"), \f -> endsWith(f, ".flow"));
		t = timestamp();

		errors = ref 0;
		iter(files, \file -> {
			// println(file);
			if (^errors < 1000) {
				code = getFileContent(file);
				p = parsePExp(code, \error -> {
					errors := ^errors + 1;
					println(file + ":" + error)
				});
			}
		});	

		println(timestamp() - t);
	}

	// println(p);
//	va = interpretPExp(makeTree(), p);
//	println(va);
//	cpp = pexp2cpp(p, true);
//	println(cpp);
	quit(0);
}
