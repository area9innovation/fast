import mini/forth/forth;
import mini/forth/stack;
import mini/commands/db;
import mini/exp/value;
import mini/exp/pretty;
import mini/types/type_ast;
import mini/types/polymorphism;

export {
	// Eval this Forth command as mini, in case it is. If not, just return the same db
	forthMiniCommand(file : string, db : MiniDb, command : string) -> MiniDb;
}

forthMiniCommand(file : string, db : MiniDb, command : string) -> MiniDb {
	if (command == "processfile") {
		// 	MiniProcessFile(name : string, command);
		filename = popMiniValue(db);
		evalcommand = popMiniValue(filename.second);
		pushMiniCommand(evalcommand.second, MiniProcessFile(file, getMiniString(filename.first), getMiniString(evalcommand.first)));
	} else if (command == "popfile") {
		pushMiniCommand(db, MiniPopFile(file));
	} else if (command == "setannotation") {
		// MiniSetAnnotation(annotation : string, scope : string, value : MiniExp);
		value = popMiniValue(db);
		scope = popMiniValue(value.second);
		annotation = popMiniValue(scope.second);
		scopes = getMiniString(scope.first);
		annotations = getMiniString(annotation.first);

		if (annotations == "") {
			println(file + ":  Expected string for annotation, got " + miniPretty(annotation.first));
		} else {
			// println("Defined " + names);
		};
		pushMiniCommand(annotation.second, MiniSetAnnotation(annotations, scopes, value.first));
	} else if (command == "typedef") {
		// MiniDefine(name : string, value : MiniExp);
		value = popMiniValue(db);
		name = popMiniValue(value.second);
		names = getMiniString(name.first);

		type = convertMiniExp2Type(value.first);

		// println(MiniTypeDefine(file, names, type));

		if (names == "") {
			println(file + ":  Expected string for name for type define, got " + miniPretty(name.first) + " "  + toString(name.first));
			println(value.first);
		} else {
			// println("Defined " + names);
		};
		pushMiniCommand(name.second, MiniTypeDefine(file, names, type));

	} else if (command == "uniondef") {
		// MiniDefineUnion(name : string, typars : [MiniType], structs : [MiniType]);
		structs = popMiniValue(db);
		typars = popMiniValue(structs.second);
		name = popMiniValue(typars.second);

		structss = map(getMiniArray(structs.first), convertMiniExp2Type);
		typarss = map(getMiniArray(typars.first), convertMiniExp2Type);
		names = getMiniString(name.first);

		// println(MiniTypeDefine(file, names, type));

		if (names == "") {
			println(file + ":  Expected string for name for union define, got " + miniPretty(name.first) + " "  + toString(name.first));
		} else {
			// println("Defined " + names);
		};
		// TODO: This might be wrong in incremental?
		MiniDb(
			name.second with
			program = MiniAst(name.second.program with unions = setTree(name.second.program.unions, names, MiniUnion(names, typarss, structss)))
		);
	} else if (command == "structdef") {
		// 	<id> <args> structdef	- push a constructor for a struct type on the stack
		//   args is an array of __structarg(id, 0/1, type-exp)

		// The result is a fn that builds a struct value of type
		// (args) -> { field : Type, field : Type }

		typeargs = popMiniValue(db);
		id = popMiniValue(typeargs.second);
		ttypeargs = getMiniArray(typeargs.first);

		ids = getMiniString(id.first);

		args : [Triple<string, bool, MiniExp>] = map(ttypeargs, unwrapStructArg);
		fields = map(args, \a -> {
			MiniTypeField(a.first, a.second, convertMiniExp2Type(a.third))
		});

		typars = extractMiniTypePars(makeSet(), MiniTypeRecord(fields));
		constructorType = MiniTypeFunction(
			map(args, \a -> convertMiniExp2Type(a.third)), MiniTypeCall(ids, set2array(typars))
		);
		constructorTypeAsExp = miniType2Exp(constructorType);

		cardinality = length(fields);

		lambda = 
			MiniCall(
				MiniVar(":", 0),
				[
					MiniLambda(
						map(args, \a -> a.first),
						MiniCall(MiniVar("__construct" + i2s(cardinality), 0), concat(
							[
								id.first,
							], map(args, \a -> MiniString(a.first))
						), 0), 0
					), 
					constructorTypeAsExp
				], 0
			);

		// TODO: This might be wrong in incremental?
		db2 = MiniDb(
				id.second with
				program = MiniAst(id.second.program with structs = setTree(id.second.program.structs, ids, MiniStruct(ids, fields)))
			);
		// In addition to the type, we also register the constructor function
		pushMiniCommand(db2, MiniDefine(file, ids, lambda));
	} else if (command == "define") {
		// MiniDefine(name : string, value : MiniExp);
		value = popMiniValue(db);
		name = popMiniValue(value.second);
		names = getMiniString(name.first);
		if (names == "") {
			println(file + ":  Expected string for name for define, got " + miniPretty(name.first) + " "  + toString(name.first));
			println(value.first);
		} else {
			// println("Defined " + names);
		};
		pushMiniCommand(name.second, MiniDefine(file, names, value.first));
	} else if (command == "case") {
		body = popMiniValue(db);
		vars = popMiniValue(body.second);
		struct = popMiniValue(vars.second);

		structs : string = getMiniString(struct.first);
		varss : [string] = map(getMiniArray(vars.first), getMiniString);
		bodys : MiniExp = body.first;

		mstructdef = lookupTree(db.program.structs, structs);
		mstructdef ?? {
			/*
			We turn "Some(v): body;" into the equivalent of this:
			__case(Some, 
				// Downcast
				__switchvar = __switchvar : __type("Some");
				// Index
				v = __switchvar."value";
				v;
			)
			*/
			bodyLet = foldi(varss, bodys, \i, acc, var -> {
							if (var != "__") {
								MiniLet(var, MiniCall(MiniVar(".", 0), [MiniVar("__switchvar", 0), MiniString(mstructdef.fields[i].name)], 0), acc, 0)
							} else acc
						});

			case = MiniCall(MiniVar("__case", 0), 
				[
					MiniVar(structs, 0),
					// TODO. This let might be superfluous if the body does not reference __switchvar
					MiniLet(
						"__switchvar",
						MiniCall(MiniVar(":", 0), [
							MiniVar("__switchvar", 0),
							miniType2Exp(MiniTypeCall(structs, [])),
						], 0), bodyLet, 0
					)
				], 
				0
			);
			pushMiniValue(struct.second, case);
		} : {
			muniondef = lookupTree(db.program.unions, structs);
			switch (muniondef) {
				None(): {
					println(file + " unknown case in switch " + structs);
					struct.second;
				}
				Some(uniondef): {
					println("TODO: Implement expansion of union case in switch: " + structs);
					struct.second;
				}
			}
		}
	} else db;
}


// __structarg(string, 0/1, type)


// decompose -> __structarg string 0/1 type 

unwrapStructArg(arg : MiniExp) -> Triple<string, bool, MiniExp> {
	switch (arg) {
		MiniCall(fn, args, __): {
			name = getMiniString(args[0]);
			notmutable = i2b(getMiniInt(args[1]));
			type = args[2];
			Triple(name, !notmutable, type);
		}
		default: Triple("", false, arg);
	}
}
