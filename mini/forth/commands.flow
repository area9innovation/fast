import mini/forth/forth;
import mini/forth/stack;
import mini/commands/db;
import mini/exp/value;
import mini/exp/pretty;
import mini/types/type_ast;
import mini/types/polymorphism;
import mini/types/subtypegraph;
import mini/types/pretty;
import mini/util/trace;
import mini/util/position;

export {
	// Eval this Forth command as mini, in case it is. If not, just return the same db
	forthMiniCommand(file : string, db : MiniDb, command : string) -> MiniDb;
}

forthMiniCommand(file : string, db : MiniDb, command : string) -> MiniDb {
	if (command == "processfile") {
		// 	MiniProcessFile(name : string, command);
		filename = popMiniValue(db);
		filenames = getMiniString(filename.first);
		evalcommand = popMiniValue(filename.second);
		pushMiniCommand(evalcommand.second, MiniProcessFile(filenames, filenames, getMiniString(evalcommand.first)));
	} else if (command == "popfile") {
		pushMiniCommand(db, MiniPopFile(file));
	} else if (command == "setannotation") {
		// MiniSetAnnotation(scope : string, annotation : string, value : MiniExp);
		// This is used for natives.

		// TODO: Consider to change this to be eager instead of a command

		value = popMiniValue(db);
		annotation = popMiniValue(value.second);
		scope = popMiniValue(annotation.second);
		scopes = getMiniString(scope.first);
		annotations = getMiniString(annotation.first);

		if (annotations == "") {
			println(file + ":  Expected string for annotation, got " + miniPretty(annotation.first));
		} else {
			// println("Defined " + names);
		};
		setMiniAnnotation(scope.second, scopes, annotations, value.first);
	} else if (command == "typedef") {
		// MiniDefine(name : string, value : MiniExp);
		value = popMiniValue(db);
		name = popMiniValue(value.second);
		names = getMiniString(name.first);

		type = convertMiniExp2Type(value.first);

		// println(MiniTypeDefine(file, names, type));

		if (names == "") {
			println(file + ":  Expected string for name for type define, got " + miniPretty(name.first) + " "  + toString(name.first));
			println(value.first);
		} else {
			// println("Defined " + names);
		};
		pushMiniCommand(name.second, MiniTypeDefine(file, names, type));

	} else if (command == "uniondef") {
		// MiniDefineUnion(name : string, typars : [MiniType], structs : [MiniType]);
		structs = popMiniValue(db);
		typars = popMiniValue(structs.second);
		name = popMiniValue(typars.second);

		structss = map(getMiniArray(structs.first), convertMiniExp2Type);
		typarss = map(getMiniArray(typars.first), convertMiniExp2Type);
		names = getMiniString(name.first);

		// println(MiniTypeDefine(file, names, type));

		if (names == "") {
			println(file + ":  Expected string for name for union define, got " + miniPretty(name.first) + " "  + toString(name.first));
		} else {
			// println("Defined " + names);
		};
		// TODO: This might be wrong in incremental?
		union = MiniUnion(names, typarss, structss);
		ast = name.second.program;

		if (isDebuggingId(ast, names)) {
			println(file + ": Parser defines union " + miniUnion2string(union));
		}

		MiniDb(
			name.second with
			program = MiniAst(ast with 
				unions = setTree(ast.unions, names, union), 
				subtypeGraph = updateMiniUnionSubGraph(ast.subtypeGraph, union),
				declarationFile = setTree(ast.declarationFile, names, file),
			),
		);
	} else if (command == "structdef") {
		// 	<id> <args> structdef	- push a constructor for a struct type on the stack
		//   args is an array of __structarg(id, 0/1, type-exp)

		// The result is a fn that builds a struct value of type
		// (args) -> { field : Type, field : Type }

		typeargs = popMiniValue(db);
		id = popMiniValue(typeargs.second);
		ttypeargs = getMiniArray(typeargs.first);

		ids = getMiniString(id.first);

		// TODO
		pos = -1;

		args : [Triple<string, bool, MiniExp>] = map(ttypeargs, unwrapStructArg);
		fields = map(args, \a -> {
			MiniTypeField(a.first, a.second, convertMiniExp2Type(a.third))
		});

		typars = extractMiniTypePars(makeSet(), MiniTypeRecord(fields));
		constructorType = MiniTypeFunction(
			map(args, \a -> convertMiniExp2Type(a.third)), MiniTypeCall(ids, set2array(typars))
		);
		constructorTypeAsExp = miniType2Exp(constructorType);

		cardinality = length(fields);


		lambda = 
			MiniCall(
				MiniVar(":", pos, 0),
				[
					MiniLambda(
						map(args, \a -> a.first),
						MiniCall(MiniVar("__construct" + i2s(cardinality), pos, 0), concat(
							[
								id.first,
							], map(args, \a -> MiniString(a.first, -1))
						), pos, 0), pos, 0
					), 
					constructorTypeAsExp
				], pos, 0
			);

		// TODO: Figure out the number of type-parameters? We could do it at compile time
		struct = MiniStruct(ids, [], fields);

		// TODO: This might be wrong in incremental?
		db2 = MiniDb(
				id.second with
				program = MiniAst(id.second.program with 
					structs = setTree(id.second.program.structs, ids, struct),
					declarationFile = setTree(id.second.program.declarationFile, ids, file),
				)
			);
		if (isDebuggingId(db2.program, ids)) {
			println(file + ": Parser defines struct " + miniStruct2string(struct));
		}
		// In addition to the type, we also register the constructor function
		db3 = pushMiniCommand(db2, MiniDefine(file, ids, lambda));
		pushMiniCommand(db3, MiniCompileTime(makeSet1(ids)));
	} else if (command == "define") {
		// MiniDefine(name : string, value : MiniExp);
		value = popMiniValue(db);
		name = popMiniValue(value.second);
		names = getMiniString(name.first);
		if (names == "") {
			println(file + ":  Expected string for name for define, got " + miniPretty(name.first) + " "  + toString(name.first));
			println(value.first);
		} else {
			// println("Defined " + names);
		};
		// To debug positions of top-level:
		// println(names + " " + i2s(getMiniPos(value.first)) + " " + miniPretty(value.first));
		ndb = pushMiniCommand(name.second, MiniDefine(file, names, value.first));
		pushMiniCommand(ndb, MiniCompileTime(makeSet1(names)));
	} else db;
}


// __structarg(string, 0/1, type)

// decompose -> __structarg string 0/1 type 

unwrapStructArg(arg : MiniExp) -> Triple<string, bool, MiniExp> {
	switch (arg) {
		MiniCall(fn, args, __, __): {
			name = getMiniString(args[0]);
			notmutable = i2b(getMiniInt(args[1]));
			type = args[2];
			Triple(name, !notmutable, type);
		}
		default: Triple("", false, arg);
	}
}

setMiniAnnotation(db : MiniDb, scope : string, annotation : string, value : MiniExp) -> MiniDb {
	ann = MiniAnnotation(scope, annotation, value);

	annotations = getTreeArrayValue(db.program.unprocessedAnnotations, scope);

	keep = filter(annotations, \a -> {
		a.annotation != annotation
	});
	withnew = arrayPush(keep, ann);
	newAnnotations = setTree(db.program.unprocessedAnnotations, scope, withnew);

	MiniDb(
		db with
		program = MiniAst(db.program with unprocessedAnnotations = newAnnotations)
	);
}
