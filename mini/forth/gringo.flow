import mini/forth/forth;
import mini/forth/stack;
import mini/exp/value;
import mini/exp/flow_parser;

import gringo/gringo_lib;

import lingo/linecolumn;
import math/stringmath;

export {
	prepareGringoParser(actions : GringoAction<MiniDb>, grammar : string) -> (MiniDb) -> MiniDb;
}

prepareGringoParser(actions : GringoAction<MiniDb>, grammar : string) -> (MiniDb) -> MiniDb {
	gterm = parseGringoGrammar(grammar);

	// println("The grammar we will parse:");
	// println(gterm2string(gterm));

	\db : MiniDb -> {
		textp = popMiniValue(db);
		// Here, we should parse the grammar using Forth actions
		text = getMiniString(textp.first);
		env = GringoEnv(text, makeTree(), actions, textp.second, makeTree(), 0, false, 0);

		start = timestamp();
		println("Parsing " + headList(db.fileStack, ""));

		genv : GringoEnv<MiniDb> = if (false) gringoParse(env, gterm) else {
			acc = GringoEnv2DParseAcc(env);
			success = parse_flow(acc);
			DParseAcc2GringoEnv(acc);
		}

		println("Took " + d2st((timestamp() - start) / 1000.0, 2) + "s");

		if (false) {
			genv2 : GringoEnv<MiniDb> = gringoParse(env, gterm);

			if (genv.output != genv2.output) {
				println("DIFFERENT AST");
			}
		}

		if (!isEmptyTree(genv.errors) || genv.i < strlen(env.input) || genv.fail) {
			// TODO: Should we resolve this file name, or push full names?
			file = headList(db.fileStack, "");
			resolver = makeLineResolver(text);

			traverseInOrder(genv.errors, \pos, error -> {
				linecol = findLine(resolver, pos);
				db.onError(file + ":" + i2s(linecol.lineno) + ":" + i2s(linecol.column) + ": " + error);
				db.onError(linecol.line);
				db.onError(lpad("^", " ", linecol.lineIndex - 1));
			})

			if (genv.i < strlen(env.input) || genv.fail) {
				linecol = findLine(resolver, genv.maxi);
				db.onError(file + ":" + i2s(linecol.lineno) + ":" + i2s(linecol.column) + ": Parsing ended here");
			}
		}

		genv.output;
	}
}
