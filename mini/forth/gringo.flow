import mini/forth/forth;
import mini/forth/stack;
import mini/exp/value;

import gringo/gringo_lib;

export {
	prepareGringoParser(grammar : string) -> (MiniForth) -> MiniForth;
}

prepareGringoParser(grammar : string) -> (MiniForth) -> MiniForth {
	gterm = parseGringoGrammar(grammar);

	println("The result of the parse:");
	println(gterm2string(gterm));

	\forth : MiniForth -> {
		text = popMStack(forth);
		// Here, we should parse the grammar using Forth actions
		env = GringoEnv(getMiniString(text.first), makeTree(), 0, gringoForthAction(), text.second, false, false);
		genv : GringoEnv<MiniForth> = gringoParse(env, gterm);
		genv.output;
	}
}

gringoForthAction() -> GringoAction<MiniForth> {
	GringoAction(
		\acc : MiniForth, command -> {
			// TODO: This should be evaluation instead
			//miniEvalForth("", db, command);
			pushMStack(acc, MiniString(command));
		},
		\acc : MiniForth, token -> {
			pushMStack(acc, MiniString(token));
		}
	)
}
