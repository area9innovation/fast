import mini/forth/forth;
import mini/forth/gringo;
import mini/commands/db;
import text/serialize;
import mini/forth/stack;
import mini/exp/value;
import mini/exp/pretty;

export {
	// Evaluate this - these commands can have side-effects on the compiler
	miniEvalForth(file : string, db : MiniDb, command : string) -> MiniDb;

	// Evaluate these ids
	miniEvalForths(file : string, db : MiniDb, commands : [string]) -> MiniDb;
}

miniEvalForth(file : string, db : MiniDb, command : string) -> MiniDb {
	// println("\nRunning " + command + " with stack:");
	// iterList(db.forth.stack, println);

	fchar = getCharAt(command, 0);
	if (command == "") db
	else if (command == "processfile") {
		// 	MiniProcessFile(name : string, command);
		filename = popMiniValue(db);
		evalcommand = popMiniValue(filename.second);
		pushMiniCommand(evalcommand.second, MiniProcessFile(file, getMiniString(filename.first), getMiniString(evalcommand.first)));
	} else if (command == "define") {
		// MiniDefine(name : string, value : MiniExp);
		value = popMiniValue(db);
		name = popMiniValue(value.second);
		names = getMiniString(name.first);
		if (names == "") {
			println(file + ":  Expected string for name for define, got " + miniPretty(name.first) + " "  + toString(name.first));
			println(value.first);
		} else {
			// println("Defined " + names);
		};
		pushMiniCommand(name.second, MiniDefine(file, names, value.first));
	} else if (command == "evallines") {
		// Splits each line in the string, and evaluates it
		// TODO: Could maybe be strsplit, and then some kind of foreach
		content = popMiniValue(db);
		lines = strSplit(getMiniString(content.first), "\n");
		fold(lines, content.second, \acc, line -> {
			miniEvalForth(file, acc, line)
		});
	} else if (command == "prepare") {
		// Preparing a grammar
		grammar = popMiniValue(db);
		name = popMiniValue(grammar.second);

		ndb = name.second;

		fn = prepareGringoParser(gringoForthAction(file), getMiniString(grammar.first));
		thename = getMiniString(name.first);

		// println("Grammar " + thename + " = " + strLeft(getMiniString(grammar.first), 100));

		MiniDb(
			ndb with natives = setTree(ndb.natives, thename, fn)
		)
	} else if (startsWith(command, "def ")) {
		// OK, defining a new Forth word (macro)
		parts = strSplit(command, " ");
		if (length(parts) < 2) {
			db.onError("def expects a name and the commands");
			db
		} else {
			name = parts[1];
			commands = tailFrom(parts, 2);
			// println("Defining macro " + name + " as " + strGlue(commands, " "));
			MiniDb(
				db with macros = setTree(db.macros, name, commands)
			)
		}
	} else if (startsWith(command, "// ")) {
		db;
	} else {
		macro = getTreeArrayValue(db.macros, command);
		if (macro != []) {
			miniEvalForths(file, db, macro)
		} else {
			mnative = lookupTree(db.natives, command);
			switch (mnative) {
				None(): {
					mbuiltin = 
						if (startsWith(command, "\"")) {
							Some(\forth -> {
								// MiniString(value : string);
								str = deserializeString(command);
								pushMStack(forth, MiniString(str.first));
							})
						} else if (("0" <= fchar && fchar <= "9") || fchar == ".") {
							Some(\forth -> {
								if (strContains(command, ".") || strContains(command, "e")) {
									// MiniDouble(value : double);
									d = s2d(command);
									pushMStack(forth, MiniDouble(d));
								} else {
									// MiniInt(value : int);
									i = s2i(command);
									pushMStack(forth, MiniInt(i, 0));
								}
							})
						} else lookupTree(db.forth.definitions, command);
					mbuiltin ?? {
						MiniDb(
							db with forth = mbuiltin(db.forth)
						)
					} : {
						db.onError("Does not know " + command);
						db;
					}
				}
				Some(nativ): {
					nativ(db);
				}
			}
		}
	}
}

miniEvalForths(file : string, db : MiniDb, commands : [string]) -> MiniDb {
	n = length(commands);
	foldi(commands, db, \i, acc, command -> {
		// Check if we have an async command elsewhere than the end
		if (i != n - 1 && command == "processfile") {
			println("Commands after processfile will not work correctly");
		};
		miniEvalForth(file, acc, command);
	})
}



gringoForthAction(file : string) -> GringoAction<MiniDb> {
	GringoAction(
		\db : MiniDb, command -> {
			miniEvalForth(file, db, command);
		},
		\acc : MiniDb, token -> {
			pushMiniValue(acc, MiniString(token));
		}
	)
}
