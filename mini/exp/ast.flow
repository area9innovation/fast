import mini/types/type;
import mini/backends/bprogram;
import mini/exp/exp;
import mini/exp/dependent;
import ds/set;
import ds/simplegraph;

export {
	// A consistent set of declarations
	MiniAst(
		// The names defined in this program - before type checking
		declarations : Tree<string, MiniExp>,

		// Annotations for each each scope (i.e. id) are collected here
		// while processing
		unprocessedAnnotations : Tree<string, [MiniAnnotation]>,

		// The definitive annotations
		annotations : Tree<string, [MiniAnnotation]>,

		// Where is each name defined? From name to file
		declarationFile : Tree<string, string>,

		// What ids are dependent on what?
		idDependents : MiniDependent,

		// What names are declared in this file?
		// fileDeclarations : Tree<string, [string]>,

		// The types of ids. The result of type checking ends up here. 
		// We also keep the builtins here
		types : Tree<string, MiniType>,

		// Definitions of unions
		unions : Tree<string, MiniUnion>,

		// Definitions of structs
		structs : Tree<string, MiniStruct>,

		// Keep track of the struct/union subtyping graph
		subtypeGraph : MiniSubtypeGraph,

		// Typed versions of our declarations.
		typedDeclarations : Tree<string, BExp>,

		// What ids are pure?
		pureIds : Set<string>,

		// What compile options are we using?
		options : MiniOptions,

		// On error reporting
		onError : (env : MiniAst, name : string, pos : int, error : string) -> void
	);

	MiniSubtypeGraph(
		// From name to supertypes names
		supertypes : SimpleGraph<string, bool>,
		// From field name to supertypes. The field names have a "." in front
		// fieldSupertypes : SimpleGraph<string, bool>,
		// From union to structs
		// subtypes : SimpleGraph<string, bool>
	);

	MiniAnnotation(
		// What is the scope of this annotation? If empty, all ids. Otherwise, the given id
		scope : string,
		// What is the name of this annotation? native-def, export, forward, 
		annotation : string,
		// What is the value of the annotation
		value : MiniExp
	);

	MiniOptions(
		// What level of debugging
		verbose : int,
		// Display compile phases for this id
		debugIds : Set<string>,
		// What phases are we debugging?
		debugStages : Set<CompileStage>,
		// Are implicit type-parameters OK?
		implicitTypePars : bool,
		// TODO: Add #defines
	);

	CompileStage ::= StageParse, StageCompileTime, StageTypeInference, StageTypeConstrain, StageTypeCoalesce, StageTypeSimplify, StageLower;
		// Parse source code
		StageParse();
		// Evaluate at compile time
		StageCompileTime();
		// Infer types
		StageTypeInference();
		// Define tyvar constraints
		StageTypeConstrain();
		// Resolve type constraints
		StageTypeCoalesce();
		// Simplify restypes
		StageTypeSimplify();
		// Lower to typed BExp and optimize
		StageLower();
}
