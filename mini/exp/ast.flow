import mini/types/type;
import mini/backends/bprogram;
import mini/exp/exp;
import mini/exp/dependent;
import ds/set;

export {
	// A consistent set of declarations
	MiniAst(
		// The names defined in this program - before type checking
		declarations : Tree<string, MiniExp>,

		// Annotations for each each scope (i.e. id) are collected here
		// while processing
		unprocessedAnnotations : Tree<string, [MiniAnnotation]>,

		// The definitive annotations
		annotations : Tree<string, [MiniAnnotation]>,

		// Where is each name defined? From name to file
		declarationFile : Tree<string, string>,

		// What ids are dependent on what?
		idDependents : MiniDependent,

		// What names are declared in this file?
		// fileDeclarations : Tree<string, [string]>,

		// The types of ids. The result of type checking ends up here. 
		// We also keep the builtins here
		types : Tree<string, MiniType>,

		// Typed versions of our declarations.
		typedDeclarations : Tree<string, BExp>,
	);

	MiniAnnotation(
		// What is the name of this annotation? file, export, forward, native-def
		annotation : string,
		// What is the scope of this annotation? if empty, all ids. Otherwise, the given id
		scope : string,
		// What is the value of the annotation
		value : MiniExp
	);
}
