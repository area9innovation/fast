// Produced by  flowcpp gringo/gringo.flow -- file=mini/exp/flow.gringo.gringo compile=1
import gringo/compiler/dcode_lib;
import string;

export {
	parse_flow(DParseAcc) -> bool;
}

parse_flow(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// Opt
						pushDCheckpoint(acc);
						if (matchString(acc, "\\uFEFF")) {
							discardDCheckpoint(acc);
						} else {
							restoreDCheckpoint(acc);
						};
						true;
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parseStar(acc, \ -> {
						parse_importExport(acc)
					})

				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parseStar(acc, \ -> {
					parse_toplevelDeclaration(acc)
				})

			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "popfile")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_importExport(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if (parse_import(acc)) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if (parse_dynamicImport(acc)) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if (parse_export(acc)) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							parse_forbid(acc)
						}
					}

				}
			}

		}
	}

}

parse_import(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if (matchString(acc, "import")) {
										discardDCheckpoint(acc);
										parse_s(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									{
										// Unquote match
										starti = acc.i;
										if (parse_path(acc)) {
											addMatched(acc, substring(acc.input, starti, acc.i - starti));
											true;
										} else false;
									}

								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							matchString(acc, ";")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, ".flow")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "changeFileExt")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "parsefile")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_dynamicImport(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "require")) {
							discardDCheckpoint(acc);
							parse_s(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Unquote match
							starti = acc.i;
							if (parse_path(acc)) {
								addMatched(acc, substring(acc.input, starti, acc.i - starti));
								true;
							} else false;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parse_ws(acc)
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				matchString(acc, ";")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			parse_ws(acc)
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_export(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (matchString(acc, "export")) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							matchString(acc, "{")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					{
						// seq
						pushDCheckpoint(acc);
						if (parse_toplevelDeclaration(acc)) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								parse_toplevelDeclaration(acc)
							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}

				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				matchString(acc, "}")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			parse_ws(acc)
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_forbid(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "forbid")) {
							discardDCheckpoint(acc);
							parse_s(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Unquote match
							starti = acc.i;
							if (parse_path(acc)) {
								addMatched(acc, substring(acc.input, starti, acc.i - starti));
								true;
							} else false;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parse_ws(acc)
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				matchString(acc, ";")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			parse_ws(acc)
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_path(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_bid(acc)) {
			discardDCheckpoint(acc);
			parseStar(acc, \ -> {
				{
					// seq
					pushDCheckpoint(acc);
					if (matchString(acc, "/")) {
						discardDCheckpoint(acc);
						parse_bid(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}

			})

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_toplevelDeclaration(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if (parse_native(acc)) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if (parse_assign(acc)) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if (parse_union(acc)) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if (parse_functionOrStruct(acc)) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									parse_vardecl(acc)
								}
							}

						}
					}

				}
			}

		}
	}

}

parse_native(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if (matchString(acc, "native")) {
																											discardDCheckpoint(acc);
																											parse_s(acc)
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										parse_id(acc)
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									matchString(acc, ":")
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								addMatched(acc, "__native")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							addVerbatim(acc, "var")
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						parse_ws(acc)
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addMatched(acc, "1")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "s2i")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addVerbatim(acc, "nil")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		{
																			// Opt
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if (matchString(acc, "io")) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addMatched(acc, "io")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addVerbatim(acc, "cons")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																			} else {
																				restoreDCheckpoint(acc);
																			};
																			true;
																		}

																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addVerbatim(acc, "isnil")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "-")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_type(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "list2")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, "=")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											{
												// Unquote match
												starti = acc.i;
												if (parse_name(acc)) {
													addMatched(acc, substring(acc.input, starti, acc.i - starti));
													true;
												} else false;
											}

										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								matchString(acc, ";")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "call")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, "native")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "swap")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "setannotation")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_name(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_bid(acc)) {
			discardDCheckpoint(acc);
			parseStar(acc, \ -> {
				{
					// seq
					pushDCheckpoint(acc);
					if (matchString(acc, ".")) {
						discardDCheckpoint(acc);
						parse_bid(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}

			})

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_assign(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_id(acc)) {
								discardDCheckpoint(acc);
								matchString(acc, "=")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_exp(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					{
						// Opt
						pushDCheckpoint(acc);
						if (matchString(acc, ";")) {
							discardDCheckpoint(acc);
						} else {
							restoreDCheckpoint(acc);
						};
						true;
					}

				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "define")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_union(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (parse_id(acc)) {
									discardDCheckpoint(acc);
									parse_typars(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								matchString(acc, "::=")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_typenames(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					matchString(acc, ";")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "uniondef")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_typenames(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_typename(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_typename(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_functionOrStruct(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			discardDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "(")) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// choice
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if (parse_namedargs(acc)) {
															discardDCheckpoint(acc);
															matchString(acc, ")")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_ws(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_returnType(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												matchString(acc, ";")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "fntype")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "typedef")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								true
							} else {
								restoreDCheckpoint(acc);
								{
									// choice
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if (parse_structargs(acc)) {
															discardDCheckpoint(acc);
															matchString(acc, ")")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_ws(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, ";")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addVerbatim(acc, "structdef")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										true
									} else {
										restoreDCheckpoint(acc);
										{
											// choice
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if (parse_lambdaargs(acc)) {
																			discardDCheckpoint(acc);
																			matchString(acc, ")")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_returnType(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "drop")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_brace(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "lambda")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													addVerbatim(acc, "define")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												true
											} else {
												restoreDCheckpoint(acc);
												{
													// choice
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if (parse_lambdaargs(acc)) {
																			discardDCheckpoint(acc);
																			matchString(acc, ")")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_brace(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "lambda")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															addVerbatim(acc, "define")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														true
													} else {
														restoreDCheckpoint(acc);
														{
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if (parse_lambdaargs(acc)) {
																						discardDCheckpoint(acc);
																						matchString(acc, ")")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_exp(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			{
																				// Opt
																				pushDCheckpoint(acc);
																				if (matchString(acc, ";")) {
																					discardDCheckpoint(acc);
																				} else {
																					restoreDCheckpoint(acc);
																				};
																				true;
																			}

																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addVerbatim(acc, "lambda")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "define")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}

													}
												}

											}
										}

									}
								}

							}
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if (matchString(acc, ":")) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	matchString(acc, "(")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																parse_ws(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_namedargs(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														matchString(acc, ")")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_returnType(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											matchString(acc, ";")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "fntype")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "typedef")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if (matchString(acc, ":")) {
																				discardDCheckpoint(acc);
																				parse_ws(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			matchString(acc, "(")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_types(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																matchString(acc, ")")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_ws(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_returnType(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, ";")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addVerbatim(acc, "fntype")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "typedef")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									{
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if (matchString(acc, ":")) {
																			discardDCheckpoint(acc);
																			parse_ws(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		matchString(acc, "(")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_ws(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																parse_structargs(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															matchString(acc, ")")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_ws(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, ";")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, "structdef")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}

								}
							}

						}
					}

				}
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_funarg(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (matchString(acc, ":")) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_type(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "drop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_structargs(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_structarg(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_structarg(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_structarg(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if (addVerbatim(acc, "nil")) {
															discardDCheckpoint(acc);
															{
																// Opt
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if (matchString(acc, "mutable")) {
																					discardDCheckpoint(acc);
																					{
																						// Negate
																						pushDCheckpoint(acc);
																						if (parse_letterOrDigit(acc)) {
																							restoreDCheckpoint(acc);
																							false;
																						} else {
																							restoreDCheckpoint(acc);
																							true;
																						}
																					}
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_ws(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addMatched(acc, "mutable")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "cons")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																} else {
																	restoreDCheckpoint(acc);
																};
																true;
															}

														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "isnil")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_id(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "swap")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addVerbatim(acc, "list2")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										matchString(acc, ":")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_type(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "cons")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addMatched(acc, "__structarg")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addVerbatim(acc, "var")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "swap")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "call")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_returnType(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if (matchString(acc, "->")) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			parse_type(acc)
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_vardecl(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if (parse_id(acc)) {
						discardDCheckpoint(acc);
						matchString(acc, ":")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parse_ws(acc)
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_type(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if (matchString(acc, "=")) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_exp(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											{
												// Opt
												pushDCheckpoint(acc);
												if (matchString(acc, ";")) {
													discardDCheckpoint(acc);
												} else {
													restoreDCheckpoint(acc);
												};
												true;
											}

										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "swap")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addMatched(acc, ":")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "binop")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "define")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// Opt
								pushDCheckpoint(acc);
								if (matchString(acc, ";")) {
									discardDCheckpoint(acc);
								} else {
									restoreDCheckpoint(acc);
								};
								true;
							}
							) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "typedef")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}

				}
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (parse_backslash(acc)) {
									discardDCheckpoint(acc);
									parse_lambdaargs(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							matchString(acc, "->")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parse_exp(acc)
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "lambda")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			parse_exp1(acc)
		}
	}

}

parse_exp1(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if (parse_id(acc)) {
				discardDCheckpoint(acc);
				{
					// choice
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, "=")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_exp(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										{
											// Error handling
											if (matchString(acc, ";")) {
												true
											} else {
												addError(acc, "Expected \";\"");
												true;
											}
										}
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_semiexps(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "let")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						true
					} else {
						restoreDCheckpoint(acc);
						{
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if (matchString(acc, ":")) {
																			discardDCheckpoint(acc);
																			parse_ws(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_type(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	matchString(acc, "=")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																parse_ws(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_exp(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														matchString(acc, ";")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "swap")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, ":")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "binop")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_semiexps(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "let")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}

					}
				}

			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			parse_exp2(acc)
		}
	}

}

parse_exp2(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp3(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ":=")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp2(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, ":=")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp3(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp4(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "|>")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp3(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "|>")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp4(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp5(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "||")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp4(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "||")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp5(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp6(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "&&")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp5(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "&&")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp6(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp7(acc)) {
			discardDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "==")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp6(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "==")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "!=")) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_exp6(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addMatched(acc, "!=")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "binop")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if (matchString(acc, "<=")) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_exp6(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, "<=")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "binop")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									{
										// choice
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if (matchString(acc, "<")) {
															discardDCheckpoint(acc);
															parse_ws(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_exp6(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													addMatched(acc, "<")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "binop")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											true
										} else {
											restoreDCheckpoint(acc);
											{
												// choice
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if (matchString(acc, ">=")) {
																	discardDCheckpoint(acc);
																	parse_ws(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																parse_exp6(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															addMatched(acc, ">=")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "binop")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													true
												} else {
													restoreDCheckpoint(acc);
													{
														// Opt
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if (matchString(acc, ">")) {
																			discardDCheckpoint(acc);
																			parse_ws(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_exp6(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addMatched(acc, ">")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "binop")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
														} else {
															restoreDCheckpoint(acc);
														};
														true;
													}

												}
											}

										}
									}

								}
							}

						}
					}

				}
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp7(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp8(acc)) {
			discardDCheckpoint(acc);
			parseStar(acc, \ -> {
				{
					// choice
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if (matchString(acc, "+")) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_exp8(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addMatched(acc, "+")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "binop")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						true
					} else {
						restoreDCheckpoint(acc);
						{
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "-")) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_exp8(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addMatched(acc, "-")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "binop")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}

					}
				}

			})

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp8(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp9(acc)) {
			discardDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "*")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp8(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "*")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "/")) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_exp8(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addMatched(acc, "/")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "binop")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// Opt
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if (matchString(acc, "%")) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_exp8(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, "%")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "binop")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
								} else {
									restoreDCheckpoint(acc);
								};
								true;
							}

						}
					}

				}
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp9(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp10(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if (matchString(acc, ":")) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_type(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addMatched(acc, ":")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "binop")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parseStar(acc, \ -> {
							{
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ":")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_type(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addMatched(acc, ":")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "binop")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}

						})

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp10(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp11(acc)) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if (matchString(acc, "??")) {
																discardDCheckpoint(acc);
																parse_ws(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_exp10(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "list2")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, ":")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_exp10(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addMatched(acc, "__maybe")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "var")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "swap")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "call")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exp11(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "!")) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_exp11(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, "!")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "unop")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "-")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp11(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "__neg")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "unop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_exp12(acc)) {
								discardDCheckpoint(acc);
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// choice
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if (matchString(acc, "(")) {
																discardDCheckpoint(acc);
																parse_ws(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_exps(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														matchString(acc, ")")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "call")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											true
										} else {
											restoreDCheckpoint(acc);
											{
												// choice
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if (matchString(acc, "(")) {
																										discardDCheckpoint(acc);
																										parse_ws(acc)
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									parse_exp(acc)
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								matchString(acc, "with")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_s(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addVerbatim(acc, "list2")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_fields(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "cons")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			matchString(acc, ")")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addMatched(acc, "__with")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "var")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															addVerbatim(acc, "swap")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "call")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													true
												} else {
													restoreDCheckpoint(acc);
													{
														// choice
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if (matchString(acc, ".")) {
																									discardDCheckpoint(acc);
																									parse_ws(acc)
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								parse_id(acc)
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							addVerbatim(acc, "list2")
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						matchString(acc, "::=")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_exp11(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addVerbatim(acc, "cons")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addMatched(acc, "__mutassign")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addVerbatim(acc, "swap")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "call")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															true
														} else {
															restoreDCheckpoint(acc);
															{
																// choice
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if (matchString(acc, ".")) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_id(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addMatched(acc, ".")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "binop")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	true
																} else {
																	restoreDCheckpoint(acc);
																	{
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if (matchString(acc, "[")) {
																								discardDCheckpoint(acc);
																								parse_ws(acc)
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_exp(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						matchString(acc, "]")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addMatched(acc, "__index")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addVerbatim(acc, "binop")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}

																}
															}

														}
													}

												}
											}

										}
									}
									) {
										discardDCheckpoint(acc);
										parseStar(acc, \ -> {
											{
												// choice
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if (matchString(acc, "(")) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_exps(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																matchString(acc, ")")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_ws(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "call")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													true
												} else {
													restoreDCheckpoint(acc);
													{
														// choice
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if (matchString(acc, "(")) {
																												discardDCheckpoint(acc);
																												parse_ws(acc)
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											parse_exp(acc)
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										matchString(acc, "with")
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									parse_s(acc)
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								addVerbatim(acc, "list2")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_fields(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addVerbatim(acc, "cons")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					matchString(acc, ")")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_ws(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addMatched(acc, "__with")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "var")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addVerbatim(acc, "swap")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "call")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															true
														} else {
															restoreDCheckpoint(acc);
															{
																// choice
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if (matchString(acc, ".")) {
																											discardDCheckpoint(acc);
																											parse_ws(acc)
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										parse_id(acc)
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									addVerbatim(acc, "list2")
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								matchString(acc, "::=")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						parse_exp11(acc)
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addVerbatim(acc, "cons")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addMatched(acc, "__mutassign")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addVerbatim(acc, "swap")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "call")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	true
																} else {
																	restoreDCheckpoint(acc);
																	{
																		// choice
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if (matchString(acc, ".")) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						parse_id(acc)
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addMatched(acc, ".")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "binop")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			true
																		} else {
																			restoreDCheckpoint(acc);
																			{
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if (matchString(acc, "[")) {
																										discardDCheckpoint(acc);
																										parse_ws(acc)
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									parse_exp(acc)
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								matchString(acc, "]")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addMatched(acc, "__index")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addVerbatim(acc, "binop")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}

																		}
																	}

																}
															}

														}
													}

												}
											}

										})

									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							parse_exp12(acc)
						}
					}

				}
			}

		}
	}

}

parse_exp12(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "^")) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_exp12(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, "__deref")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "unop")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			parse_exp13(acc)
		}
	}

}

parse_exp13(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "(")) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_exp(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					{
						// Error handling
						if (matchString(acc, ")")) {
							true
						} else {
							addError(acc, "Expected \")\"");
							true;
						}
					}
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if (matchString(acc, "if")) {
																								discardDCheckpoint(acc);
																								{
																									// Negate
																									pushDCheckpoint(acc);
																									if (parse_letterOrDigit(acc)) {
																										restoreDCheckpoint(acc);
																										false;
																									} else {
																										restoreDCheckpoint(acc);
																										true;
																									}
																								}
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						matchString(acc, "(")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "nil")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			parse_exp(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "cons")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	matchString(acc, ")")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																parse_ws(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_exp(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "cons")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, "else")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_exp(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addMatched(acc, "__ifte")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "var")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "swap")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "call")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if (matchString(acc, "if")) {
																						discardDCheckpoint(acc);
																						{
																							// Negate
																							pushDCheckpoint(acc);
																							if (parse_letterOrDigit(acc)) {
																								restoreDCheckpoint(acc);
																								false;
																							} else {
																								restoreDCheckpoint(acc);
																								true;
																							}
																						}
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				matchString(acc, "(")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			parse_ws(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "nil")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_exp(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "cons")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															matchString(acc, ")")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_ws(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_exp(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "cons")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, "__ift")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "var")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "swap")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "call")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if (matchString(acc, "ref")) {
														discardDCheckpoint(acc);
														{
															// Negate
															pushDCheckpoint(acc);
															if (parse_letterOrDigit(acc)) {
																restoreDCheckpoint(acc);
																false;
															} else {
																restoreDCheckpoint(acc);
																true;
															}
														}
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_exp(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, "__ref")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "unop")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									{
										// choice
										pushDCheckpoint(acc);
										if (parse_switch(acc)) {
											discardDCheckpoint(acc);
											true
										} else {
											restoreDCheckpoint(acc);
											{
												// choice
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if ({
																												// seq
																												pushDCheckpoint(acc);
																												if (matchString(acc, "cast")) {
																													discardDCheckpoint(acc);
																													{
																														// Negate
																														pushDCheckpoint(acc);
																														if (parse_letterOrDigit(acc)) {
																															restoreDCheckpoint(acc);
																															false;
																														} else {
																															restoreDCheckpoint(acc);
																															true;
																														}
																													}
																												} else {
																													restoreDCheckpoint(acc);
																													false;
																												}
																											}
																											) {
																												discardDCheckpoint(acc);
																												parse_ws(acc)
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											addMatched(acc, "__cast")
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										addVerbatim(acc, "var")
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									addVerbatim(acc, "nil")
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								matchString(acc, "(")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						parse_exp(acc)
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addVerbatim(acc, "cons")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				matchString(acc, "->")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			parse_ws(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_type(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addVerbatim(acc, "cons")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																matchString(acc, ")")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															parse_ws(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "call")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													true
												} else {
													restoreDCheckpoint(acc);
													{
														// choice
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if (matchString(acc, "true")) {
																						discardDCheckpoint(acc);
																						{
																							// Negate
																							pushDCheckpoint(acc);
																							if (parse_letterOrDigit(acc)) {
																								restoreDCheckpoint(acc);
																								false;
																							} else {
																								restoreDCheckpoint(acc);
																								true;
																							}
																						}
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "1")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addMatched(acc, "bool")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "type0")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addMatched(acc, ":")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "binop")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															true
														} else {
															restoreDCheckpoint(acc);
															{
																// choice
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if (matchString(acc, "false")) {
																								discardDCheckpoint(acc);
																								{
																									// Negate
																									pushDCheckpoint(acc);
																									if (parse_letterOrDigit(acc)) {
																										restoreDCheckpoint(acc);
																										false;
																									} else {
																										restoreDCheckpoint(acc);
																										true;
																									}
																								}
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addVerbatim(acc, "0")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					addMatched(acc, "bool")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "type0")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addMatched(acc, ":")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "binop")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	true
																} else {
																	restoreDCheckpoint(acc);
																	{
																		// choice
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if (parse_id(acc)) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "var")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			true
																		} else {
																			restoreDCheckpoint(acc);
																			{
																				// choice
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if (matchString(acc, "0x")) {
																								discardDCheckpoint(acc);
																								{
																									// Unquote match
																									starti = acc.i;
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if (parse_hexdigit(acc)) {
																											discardDCheckpoint(acc);
																											parseStar(acc, \ -> {
																												parse_hexdigit(acc)
																											})

																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										addMatched(acc, substring(acc.input, starti, acc.i - starti));
																										true;
																									} else false;
																								}

																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_ws(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addVerbatim(acc, "parsehex")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					true
																				} else {
																					restoreDCheckpoint(acc);
																					{
																						// choice
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// Unquote match
																									starti = acc.i;
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if ({
																												// seq
																												pushDCheckpoint(acc);
																												if (matchRange(acc, 48, 57)) {
																													discardDCheckpoint(acc);
																													parseStar(acc, \ -> {
																														matchRange(acc, 48, 57)
																													})

																												} else {
																													restoreDCheckpoint(acc);
																													false;
																												}
																											}
																											) {
																												discardDCheckpoint(acc);
																												matchString(acc, ".")
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											parseStar(acc, \ -> {
																												matchRange(acc, 48, 57)
																											})

																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										addMatched(acc, substring(acc.input, starti, acc.i - starti));
																										true;
																									} else false;
																								}
																								) {
																									discardDCheckpoint(acc);
																									parse_ws(acc)
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								addVerbatim(acc, "s2d")
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							true
																						} else {
																							restoreDCheckpoint(acc);
																							{
																								// choice
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// Unquote match
																											starti = acc.i;
																											if ({
																												// seq
																												pushDCheckpoint(acc);
																												if (matchString(acc, ".")) {
																													discardDCheckpoint(acc);
																													{
																														// seq
																														pushDCheckpoint(acc);
																														if (matchRange(acc, 48, 57)) {
																															discardDCheckpoint(acc);
																															parseStar(acc, \ -> {
																																matchRange(acc, 48, 57)
																															})

																														} else {
																															restoreDCheckpoint(acc);
																															false;
																														}
																													}

																												} else {
																													restoreDCheckpoint(acc);
																													false;
																												}
																											}
																											) {
																												addMatched(acc, substring(acc.input, starti, acc.i - starti));
																												true;
																											} else false;
																										}
																										) {
																											discardDCheckpoint(acc);
																											parse_ws(acc)
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										addVerbatim(acc, "s2d")
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									true
																								} else {
																									restoreDCheckpoint(acc);
																									{
																										// choice
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if ({
																												// seq
																												pushDCheckpoint(acc);
																												if (parse_int(acc)) {
																													discardDCheckpoint(acc);
																													parse_ws(acc)
																												} else {
																													restoreDCheckpoint(acc);
																													false;
																												}
																											}
																											) {
																												discardDCheckpoint(acc);
																												addVerbatim(acc, "s2i")
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											true
																										} else {
																											restoreDCheckpoint(acc);
																											{
																												// choice
																												pushDCheckpoint(acc);
																												if (parse_brace(acc)) {
																													discardDCheckpoint(acc);
																													true
																												} else {
																													restoreDCheckpoint(acc);
																													{
																														// choice
																														pushDCheckpoint(acc);
																														if (parse_string(acc)) {
																															discardDCheckpoint(acc);
																															true
																														} else {
																															restoreDCheckpoint(acc);
																															{
																																// choice
																																pushDCheckpoint(acc);
																																if ({
																																	// seq
																																	pushDCheckpoint(acc);
																																	if ({
																																		// seq
																																		pushDCheckpoint(acc);
																																		if ({
																																			// seq
																																			pushDCheckpoint(acc);
																																			if ({
																																				// seq
																																				pushDCheckpoint(acc);
																																				if ({
																																					// seq
																																					pushDCheckpoint(acc);
																																					if ({
																																						// seq
																																						pushDCheckpoint(acc);
																																						if (matchString(acc, "[")) {
																																							discardDCheckpoint(acc);
																																							parse_ws(acc)
																																						} else {
																																							restoreDCheckpoint(acc);
																																							false;
																																						}
																																					}
																																					) {
																																						discardDCheckpoint(acc);
																																						parse_expcommas(acc)
																																					} else {
																																						restoreDCheckpoint(acc);
																																						false;
																																					}
																																				}
																																				) {
																																					discardDCheckpoint(acc);
																																					matchString(acc, "]")
																																				} else {
																																					restoreDCheckpoint(acc);
																																					false;
																																				}
																																			}
																																			) {
																																				discardDCheckpoint(acc);
																																				parse_ws(acc)
																																			} else {
																																				restoreDCheckpoint(acc);
																																				false;
																																			}
																																		}
																																		) {
																																			discardDCheckpoint(acc);
																																			addMatched(acc, "[")
																																		} else {
																																			restoreDCheckpoint(acc);
																																			false;
																																		}
																																	}
																																	) {
																																		discardDCheckpoint(acc);
																																		addVerbatim(acc, "unop")
																																	} else {
																																		restoreDCheckpoint(acc);
																																		false;
																																	}
																																}
																																) {
																																	discardDCheckpoint(acc);
																																	true
																																} else {
																																	restoreDCheckpoint(acc);
																																	{
																																		// seq
																																		pushDCheckpoint(acc);
																																		if ({
																																			// seq
																																			pushDCheckpoint(acc);
																																			if ({
																																				// seq
																																				pushDCheckpoint(acc);
																																				if ({
																																					// seq
																																					pushDCheckpoint(acc);
																																					if ({
																																						// seq
																																						pushDCheckpoint(acc);
																																						if ({
																																							// seq
																																							pushDCheckpoint(acc);
																																							if ({
																																								// seq
																																								pushDCheckpoint(acc);
																																								if (matchString(acc, "[")) {
																																									discardDCheckpoint(acc);
																																									parse_ws(acc)
																																								} else {
																																									restoreDCheckpoint(acc);
																																									false;
																																								}
																																							}
																																							) {
																																								discardDCheckpoint(acc);
																																								matchString(acc, "]")
																																							} else {
																																								restoreDCheckpoint(acc);
																																								false;
																																							}
																																						}
																																						) {
																																							discardDCheckpoint(acc);
																																							parse_ws(acc)
																																						} else {
																																							restoreDCheckpoint(acc);
																																							false;
																																						}
																																					}
																																					) {
																																						discardDCheckpoint(acc);
																																						addMatched(acc, "__emptyarray")
																																					} else {
																																						restoreDCheckpoint(acc);
																																						false;
																																					}
																																				}
																																				) {
																																					discardDCheckpoint(acc);
																																					addVerbatim(acc, "var")
																																				} else {
																																					restoreDCheckpoint(acc);
																																					false;
																																				}
																																			}
																																			) {
																																				discardDCheckpoint(acc);
																																				addVerbatim(acc, "nil")
																																			} else {
																																				restoreDCheckpoint(acc);
																																				false;
																																			}
																																		}
																																		) {
																																			discardDCheckpoint(acc);
																																			addVerbatim(acc, "call")
																																		} else {
																																			restoreDCheckpoint(acc);
																																			false;
																																		}
																																	}

																																}
																															}

																														}
																													}

																												}
																											}

																										}
																									}

																								}
																							}

																						}
																					}

																				}
																			}

																		}
																	}

																}
															}

														}
													}

												}
											}

										}
									}

								}
							}

						}
					}

				}
			}

		}
	}

}

parse_fields(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_fieldassign(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_fieldassign(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_fieldassign(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (parse_id(acc)) {
							discardDCheckpoint(acc);
							matchString(acc, "=")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parse_exp(acc)
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addMatched(acc, "__withassign")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "binop")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_brace(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if (matchString(acc, "{")) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (parse_exp(acc)) {
									discardDCheckpoint(acc);
									parseStar(acc, \ -> {
										{
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// Error handling
															if (matchString(acc, ";")) {
																true
															} else {
																addError(acc, "Expected \";\"");
																true;
															}
														}) {
															discardDCheckpoint(acc);
															parse_ws(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_exp(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													addMatched(acc, ";")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "binop")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}

									})

								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								{
									// Opt
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, ";")) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
									} else {
										restoreDCheckpoint(acc);
									};
									true;
								}

							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							{
								// Error handling
								if (matchString(acc, "}")) {
									true
								} else {
									addError(acc, "Expected \"}\"");
									true;
								}
							}
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "}")) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addMatched(acc, "__void")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "var")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "nil")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "call")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}

				}
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_expcommas(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if (parse_exp(acc)) {
				discardDCheckpoint(acc);
				parseStar(acc, \ -> {
					{
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if (matchString(acc, ",")) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_exp(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addMatched(acc, ",")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "binop")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}

				})

			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if (matchString(acc, ",")) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_semiexps(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_exp(acc)) {
			discardDCheckpoint(acc);
			parseStar(acc, \ -> {
				{
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ";")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_exp(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, ";")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "binop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}

			})

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_switch(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if (matchString(acc, "switch")) {
																							discardDCheckpoint(acc);
																							{
																								// Negate
																								pushDCheckpoint(acc);
																								if (parse_letterOrDigit(acc)) {
																									restoreDCheckpoint(acc);
																									false;
																								} else {
																									restoreDCheckpoint(acc);
																									true;
																								}
																							}
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						parse_ws(acc)
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					matchString(acc, "(")
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_ws(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			parse_exp(acc)
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addMatched(acc, "__switchvar")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addVerbatim(acc, "swap")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addMatched(acc, "__switchvar")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															addVerbatim(acc, "var")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addMatched(acc, "__switchvalue")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													addVerbatim(acc, "unop")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												matchString(acc, ")")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										matchString(acc, "{")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_cases(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							{
								// Error handling
								if (matchString(acc, "}")) {
									true
								} else {
									addError(acc, "Expected \"}\"");
									true;
								}
							}
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, "__switch")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "binop")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "let")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_cases(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if (parse_defaultOrNamedCase(acc)) {
				discardDCheckpoint(acc);
				parseStar(acc, \ -> {
					{
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_defaultOrNamedCase(acc)) {
								discardDCheckpoint(acc);
								addMatched(acc, "__or")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "binop")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}

				})

			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (addMatched(acc, "__void")) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "var")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "nil")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addVerbatim(acc, "call")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}

		}
	}

}

parse_defaultOrNamedCase(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "default")) {
											discardDCheckpoint(acc);
											{
												// Negate
												pushDCheckpoint(acc);
												if (parse_letterOrDigit(acc)) {
													restoreDCheckpoint(acc);
													false;
												} else {
													restoreDCheckpoint(acc);
													true;
												}
											}
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									matchString(acc, ":")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_exp(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ";")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, "__defaultcase")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "unop")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if (addVerbatim(acc, "nil")) {
																					discardDCheckpoint(acc);
																					parse_id(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "cons")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			matchString(acc, "(")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	parse_names(acc)
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "cons")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															matchString(acc, ")")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_ws(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													matchString(acc, ":")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_exp(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										{
											// Opt
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if (matchString(acc, ";")) {
													discardDCheckpoint(acc);
													parse_ws(acc)
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
											} else {
												restoreDCheckpoint(acc);
											};
											true;
										}

									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "cons")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addMatched(acc, "__ctcase")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "var")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "swap")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addVerbatim(acc, "call")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}

		}
	}

}

parse_names(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (parse_id(acc)) {
							discardDCheckpoint(acc);
							addVerbatim(acc, "cons")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parseStar(acc, \ -> {
							{
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, ",")) {
											discardDCheckpoint(acc);
											parse_ws(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_id(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addVerbatim(acc, "cons")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}

						})

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_type(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "bool")) {
							discardDCheckpoint(acc);
							{
								// Negate
								pushDCheckpoint(acc);
								if (parse_letterOrDigit(acc)) {
									restoreDCheckpoint(acc);
									false;
								} else {
									restoreDCheckpoint(acc);
									true;
								}
							}
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					addMatched(acc, "bool")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				addVerbatim(acc, "type0")
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, "int")) {
									discardDCheckpoint(acc);
									{
										// Negate
										pushDCheckpoint(acc);
										if (parse_letterOrDigit(acc)) {
											restoreDCheckpoint(acc);
											false;
										} else {
											restoreDCheckpoint(acc);
											true;
										}
									}
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_ws(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							addMatched(acc, "int")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "type0")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "double")) {
											discardDCheckpoint(acc);
											{
												// Negate
												pushDCheckpoint(acc);
												if (parse_letterOrDigit(acc)) {
													restoreDCheckpoint(acc);
													false;
												} else {
													restoreDCheckpoint(acc);
													true;
												}
											}
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_ws(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									addMatched(acc, "double")
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "type0")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if (matchString(acc, "string")) {
													discardDCheckpoint(acc);
													{
														// Negate
														pushDCheckpoint(acc);
														if (parse_letterOrDigit(acc)) {
															restoreDCheckpoint(acc);
															false;
														} else {
															restoreDCheckpoint(acc);
															true;
														}
													}
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											addMatched(acc, "string")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "type0")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									{
										// choice
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if ({
												// seq
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if (matchString(acc, "flow")) {
															discardDCheckpoint(acc);
															{
																// Negate
																pushDCheckpoint(acc);
																if (parse_letterOrDigit(acc)) {
																	restoreDCheckpoint(acc);
																	false;
																} else {
																	restoreDCheckpoint(acc);
																	true;
																}
															}
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														parse_ws(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													addMatched(acc, "flow")
												} else {
													restoreDCheckpoint(acc);
													false;
												}
											}
											) {
												discardDCheckpoint(acc);
												addVerbatim(acc, "type0")
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											true
										} else {
											restoreDCheckpoint(acc);
											{
												// choice
												pushDCheckpoint(acc);
												if ({
													// seq
													pushDCheckpoint(acc);
													if ({
														// seq
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if (matchString(acc, "void")) {
																	discardDCheckpoint(acc);
																	{
																		// Negate
																		pushDCheckpoint(acc);
																		if (parse_letterOrDigit(acc)) {
																			restoreDCheckpoint(acc);
																			false;
																		} else {
																			restoreDCheckpoint(acc);
																			true;
																		}
																	}
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																parse_ws(acc)
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															addMatched(acc, "void")
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}
													) {
														discardDCheckpoint(acc);
														addVerbatim(acc, "type0")
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}
												) {
													discardDCheckpoint(acc);
													true
												} else {
													restoreDCheckpoint(acc);
													{
														// choice
														pushDCheckpoint(acc);
														if ({
															// seq
															pushDCheckpoint(acc);
															if ({
																// seq
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if (matchString(acc, "native")) {
																			discardDCheckpoint(acc);
																			{
																				// Negate
																				pushDCheckpoint(acc);
																				if (parse_letterOrDigit(acc)) {
																					restoreDCheckpoint(acc);
																					false;
																				} else {
																					restoreDCheckpoint(acc);
																					true;
																				}
																			}
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		parse_ws(acc)
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	addMatched(acc, "native")
																} else {
																	restoreDCheckpoint(acc);
																	false;
																}
															}
															) {
																discardDCheckpoint(acc);
																addVerbatim(acc, "type0")
															} else {
																restoreDCheckpoint(acc);
																false;
															}
														}
														) {
															discardDCheckpoint(acc);
															true
														} else {
															restoreDCheckpoint(acc);
															{
																// choice
																pushDCheckpoint(acc);
																if ({
																	// seq
																	pushDCheckpoint(acc);
																	if ({
																		// seq
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if (matchString(acc, "ref")) {
																						discardDCheckpoint(acc);
																						{
																							// Negate
																							pushDCheckpoint(acc);
																							if (parse_letterOrDigit(acc)) {
																								restoreDCheckpoint(acc);
																								false;
																							} else {
																								restoreDCheckpoint(acc);
																								true;
																							}
																						}
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_ws(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				parse_type(acc)
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			addMatched(acc, "ref")
																		} else {
																			restoreDCheckpoint(acc);
																			false;
																		}
																	}
																	) {
																		discardDCheckpoint(acc);
																		addVerbatim(acc, "type1")
																	} else {
																		restoreDCheckpoint(acc);
																		false;
																	}
																}
																) {
																	discardDCheckpoint(acc);
																	true
																} else {
																	restoreDCheckpoint(acc);
																	{
																		// choice
																		pushDCheckpoint(acc);
																		if ({
																			// seq
																			pushDCheckpoint(acc);
																			if ({
																				// seq
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if (matchString(acc, "(")) {
																											discardDCheckpoint(acc);
																											parse_ws(acc)
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										parse_namedargs(acc)
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									matchString(acc, ")")
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								parse_ws(acc)
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							matchString(acc, "->")
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						parse_ws(acc)
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					parse_type(acc)
																				} else {
																					restoreDCheckpoint(acc);
																					false;
																				}
																			}
																			) {
																				discardDCheckpoint(acc);
																				addVerbatim(acc, "fntype")
																			} else {
																				restoreDCheckpoint(acc);
																				false;
																			}
																		}
																		) {
																			discardDCheckpoint(acc);
																			true
																		} else {
																			restoreDCheckpoint(acc);
																			{
																				// choice
																				pushDCheckpoint(acc);
																				if ({
																					// seq
																					pushDCheckpoint(acc);
																					if ({
																						// seq
																						pushDCheckpoint(acc);
																						if ({
																							// seq
																							pushDCheckpoint(acc);
																							if ({
																								// seq
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if ({
																												// seq
																												pushDCheckpoint(acc);
																												if (matchString(acc, "(")) {
																													discardDCheckpoint(acc);
																													parse_ws(acc)
																												} else {
																													restoreDCheckpoint(acc);
																													false;
																												}
																											}
																											) {
																												discardDCheckpoint(acc);
																												parse_types(acc)
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											matchString(acc, ")")
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										parse_ws(acc)
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									matchString(acc, "->")
																								} else {
																									restoreDCheckpoint(acc);
																									false;
																								}
																							}
																							) {
																								discardDCheckpoint(acc);
																								parse_ws(acc)
																							} else {
																								restoreDCheckpoint(acc);
																								false;
																							}
																						}
																						) {
																							discardDCheckpoint(acc);
																							parse_type(acc)
																						} else {
																							restoreDCheckpoint(acc);
																							false;
																						}
																					}
																					) {
																						discardDCheckpoint(acc);
																						addVerbatim(acc, "fntype")
																					} else {
																						restoreDCheckpoint(acc);
																						false;
																					}
																				}
																				) {
																					discardDCheckpoint(acc);
																					true
																				} else {
																					restoreDCheckpoint(acc);
																					{
																						// choice
																						pushDCheckpoint(acc);
																						if (parse_typename(acc)) {
																							discardDCheckpoint(acc);
																							true
																						} else {
																							restoreDCheckpoint(acc);
																							{
																								// choice
																								pushDCheckpoint(acc);
																								if ({
																									// seq
																									pushDCheckpoint(acc);
																									if ({
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if ({
																												// seq
																												pushDCheckpoint(acc);
																												if ({
																													// seq
																													pushDCheckpoint(acc);
																													if ({
																														// seq
																														pushDCheckpoint(acc);
																														if (matchString(acc, "[")) {
																															discardDCheckpoint(acc);
																															parse_ws(acc)
																														} else {
																															restoreDCheckpoint(acc);
																															false;
																														}
																													}
																													) {
																														discardDCheckpoint(acc);
																														parse_type(acc)
																													} else {
																														restoreDCheckpoint(acc);
																														false;
																													}
																												}
																												) {
																													discardDCheckpoint(acc);
																													matchString(acc, "]")
																												} else {
																													restoreDCheckpoint(acc);
																													false;
																												}
																											}
																											) {
																												discardDCheckpoint(acc);
																												parse_ws(acc)
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											addMatched(acc, "array")
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}
																									) {
																										discardDCheckpoint(acc);
																										addVerbatim(acc, "type1")
																									} else {
																										restoreDCheckpoint(acc);
																										false;
																									}
																								}
																								) {
																									discardDCheckpoint(acc);
																									true
																								} else {
																									restoreDCheckpoint(acc);
																									{
																										// seq
																										pushDCheckpoint(acc);
																										if ({
																											// seq
																											pushDCheckpoint(acc);
																											if ({
																												// Unquote match
																												starti = acc.i;
																												if ({
																													// seq
																													pushDCheckpoint(acc);
																													if (matchString(acc, "?")) {
																														discardDCheckpoint(acc);
																														parseStar(acc, \ -> {
																															matchString(acc, "?")
																														})

																													} else {
																														restoreDCheckpoint(acc);
																														false;
																													}
																												}
																												) {
																													addMatched(acc, substring(acc.input, starti, acc.i - starti));
																													true;
																												} else false;
																											}
																											) {
																												discardDCheckpoint(acc);
																												parse_ws(acc)
																											} else {
																												restoreDCheckpoint(acc);
																												false;
																											}
																										}
																										) {
																											discardDCheckpoint(acc);
																											addVerbatim(acc, "type0")
																										} else {
																											restoreDCheckpoint(acc);
																											false;
																										}
																									}

																								}
																							}

																						}
																					}

																				}
																			}

																		}
																	}

																}
															}

														}
													}

												}
											}

										}
									}

								}
							}

						}
					}

				}
			}

		}
	}

}

parse_typename(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if (parse_id(acc)) {
					discardDCheckpoint(acc);
					addVerbatim(acc, "var")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_typars(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			addVerbatim(acc, "call")
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_typars(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if (matchString(acc, "<")) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_types(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					matchString(acc, ">")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			addVerbatim(acc, "nil")
		}
	}

}

parse_types(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_type(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_type(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_namedargs(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_namedarg(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_namedarg(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_namedarg(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if ({
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if (parse_id(acc)) {
						discardDCheckpoint(acc);
						addVerbatim(acc, "drop")
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					matchString(acc, ":")
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}
			) {
				discardDCheckpoint(acc);
				parse_ws(acc)
			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			parse_type(acc)
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_lambdaargs(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_funarg(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_funarg(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_exps(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			discardDCheckpoint(acc);
			{
				// Opt
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if (parse_exp(acc)) {
								discardDCheckpoint(acc);
								addVerbatim(acc, "cons")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parseStar(acc, \ -> {
								{
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, ",")) {
												discardDCheckpoint(acc);
												parse_ws(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_exp(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										addVerbatim(acc, "cons")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}

							})

						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						{
							// Opt
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									discardDCheckpoint(acc);
									parse_ws(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
							} else {
								restoreDCheckpoint(acc);
							};
							true;
						}

					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
				} else {
					restoreDCheckpoint(acc);
				};
				true;
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_string(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (matchString(acc, "\"")) {
			discardDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if (matchString(acc, "#inc")) {
										discardDCheckpoint(acc);
										matchString(acc, "lude")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_s(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_path(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							matchString(acc, "\"")
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						parse_ws(acc)
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// Unquote match
								starti = acc.i;
								if (parseStar(acc, \ -> {
									parse_onechar_(acc)
								})
								) {
									addMatched(acc, substring(acc.input, starti, acc.i - starti));
									true;
								} else false;
							}
							) {
								discardDCheckpoint(acc);
								matchString(acc, "\"")
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_ws(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}

				}
			}

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_onechar_(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if ({
			// seq
			pushDCheckpoint(acc);
			if (parse_backslash(acc)) {
				discardDCheckpoint(acc);
				{
					// choice
					pushDCheckpoint(acc);
					if ({
						// seq
						pushDCheckpoint(acc);
						if ({
							// seq
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if (matchString(acc, "u")) {
										discardDCheckpoint(acc);
										parse_hexdigit(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_hexdigit(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								parse_hexdigit(acc)
							} else {
								restoreDCheckpoint(acc);
								false;
							}
						}
						) {
							discardDCheckpoint(acc);
							parse_hexdigit(acc)
						} else {
							restoreDCheckpoint(acc);
							false;
						}
					}
					) {
						discardDCheckpoint(acc);
						true
					} else {
						restoreDCheckpoint(acc);
						{
							// choice
							pushDCheckpoint(acc);
							if ({
								// seq
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, "X")) {
												discardDCheckpoint(acc);
												parse_hexdigit(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_hexdigit(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										parse_hexdigit(acc)
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									parse_hexdigit(acc)
								} else {
									restoreDCheckpoint(acc);
									false;
								}
							}
							) {
								discardDCheckpoint(acc);
								true
							} else {
								restoreDCheckpoint(acc);
								{
									// choice
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, "x")) {
												discardDCheckpoint(acc);
												parse_hexdigit(acc)
											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											parse_hexdigit(acc)
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										true
									} else {
										restoreDCheckpoint(acc);
										parse_escapedchar_(acc)
									}
								}

							}
						}

					}
				}

			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// seq
				pushDCheckpoint(acc);
				if ({
					// seq
					pushDCheckpoint(acc);
					if ({
						// Negate
						pushDCheckpoint(acc);
						if (matchString(acc, "\"")) {
							restoreDCheckpoint(acc);
							false;
						} else {
							restoreDCheckpoint(acc);
							true;
						}
					}) {
						discardDCheckpoint(acc);
						{
							// Negate
							pushDCheckpoint(acc);
							if (parse_backslash(acc)) {
								restoreDCheckpoint(acc);
								false;
							} else {
								restoreDCheckpoint(acc);
								true;
							}
						}
					} else {
						restoreDCheckpoint(acc);
						false;
					}
				}
				) {
					discardDCheckpoint(acc);
					parse_anychar(acc)
				} else {
					restoreDCheckpoint(acc);
					false;
				}
			}

		}
	}

}

parse_hexdigit(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if (matchRange(acc, 48, 57)) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if (matchRange(acc, 97, 102)) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					matchRange(acc, 65, 70)
				}
			}

		}
	}

}

parse_escapedchar_(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if (parse_backslash(acc)) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if (matchString(acc, "\"")) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if (matchString(acc, "n")) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if (matchString(acc, "t")) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									matchString(acc, "r")
								}
							}

						}
					}

				}
			}

		}
	}

}

parse_anychar(acc : DParseAcc) -> bool {
	matchRange(acc, 0, 65535)
}

parse_id(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// Unquote match
			starti = acc.i;
			if (parse_bid(acc)) {
				addMatched(acc, substring(acc.input, starti, acc.i - starti));
				true;
			} else false;
		}
		) {
			discardDCheckpoint(acc);
			parse_ws(acc)
		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_bid(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if ({
			// choice
			pushDCheckpoint(acc);
			if (matchRange(acc, 97, 122)) {
				discardDCheckpoint(acc);
				true
			} else {
				restoreDCheckpoint(acc);
				{
					// choice
					pushDCheckpoint(acc);
					if (matchRange(acc, 65, 90)) {
						discardDCheckpoint(acc);
						true
					} else {
						restoreDCheckpoint(acc);
						matchString(acc, "_")
					}
				}

			}
		}
		) {
			discardDCheckpoint(acc);
			parseStar(acc, \ -> {
				parse_letterOrDigit(acc)
			})

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_letterOrDigit(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if (matchRange(acc, 97, 122)) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if (matchRange(acc, 65, 90)) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if (matchString(acc, "_")) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							matchRange(acc, 48, 57)
						}
					}

				}
			}

		}
	}

}

parse_int(acc : DParseAcc) -> bool {
	{
		// Unquote match
		starti = acc.i;
		if ({
			// seq
			pushDCheckpoint(acc);
			if (matchRange(acc, 48, 57)) {
				discardDCheckpoint(acc);
				parseStar(acc, \ -> {
					matchRange(acc, 48, 57)
				})

			} else {
				restoreDCheckpoint(acc);
				false;
			}
		}
		) {
			addMatched(acc, substring(acc.input, starti, acc.i - starti));
			true;
		} else false;
	}

}

parse_backslash(acc : DParseAcc) -> bool {
	matchString(acc, "\\")
}

parse_ws(acc : DParseAcc) -> bool {
	parseStar(acc, \ -> {
		parse_cs(acc)
	})

}

parse_s(acc : DParseAcc) -> bool {
	{
		// seq
		pushDCheckpoint(acc);
		if (parse_cs(acc)) {
			discardDCheckpoint(acc);
			parseStar(acc, \ -> {
				parse_cs(acc)
			})

		} else {
			restoreDCheckpoint(acc);
			false;
		}
	}

}

parse_cs(acc : DParseAcc) -> bool {
	{
		// choice
		pushDCheckpoint(acc);
		if (matchString(acc, " ")) {
			discardDCheckpoint(acc);
			true
		} else {
			restoreDCheckpoint(acc);
			{
				// choice
				pushDCheckpoint(acc);
				if (matchString(acc, "\t")) {
					discardDCheckpoint(acc);
					true
				} else {
					restoreDCheckpoint(acc);
					{
						// choice
						pushDCheckpoint(acc);
						if (matchString(acc, "\n")) {
							discardDCheckpoint(acc);
							true
						} else {
							restoreDCheckpoint(acc);
							{
								// choice
								pushDCheckpoint(acc);
								if ({
									// seq
									pushDCheckpoint(acc);
									if ({
										// seq
										pushDCheckpoint(acc);
										if (matchString(acc, "//")) {
											discardDCheckpoint(acc);
											parseStar(acc, \ -> {
												{
													// seq
													pushDCheckpoint(acc);
													if ({
														// Negate
														pushDCheckpoint(acc);
														if (matchString(acc, "\n")) {
															restoreDCheckpoint(acc);
															false;
														} else {
															restoreDCheckpoint(acc);
															true;
														}
													}) {
														discardDCheckpoint(acc);
														parse_anychar(acc)
													} else {
														restoreDCheckpoint(acc);
														false;
													}
												}

											})

										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}
									) {
										discardDCheckpoint(acc);
										matchString(acc, "\n")
									} else {
										restoreDCheckpoint(acc);
										false;
									}
								}
								) {
									discardDCheckpoint(acc);
									true
								} else {
									restoreDCheckpoint(acc);
									{
										// seq
										pushDCheckpoint(acc);
										if ({
											// seq
											pushDCheckpoint(acc);
											if (matchString(acc, "/*")) {
												discardDCheckpoint(acc);
												parseStar(acc, \ -> {
													{
														// seq
														pushDCheckpoint(acc);
														if ({
															// Negate
															pushDCheckpoint(acc);
															if (matchString(acc, "*/")) {
																restoreDCheckpoint(acc);
																false;
															} else {
																restoreDCheckpoint(acc);
																true;
															}
														}) {
															discardDCheckpoint(acc);
															parse_anychar(acc)
														} else {
															restoreDCheckpoint(acc);
															false;
														}
													}

												})

											} else {
												restoreDCheckpoint(acc);
												false;
											}
										}
										) {
											discardDCheckpoint(acc);
											matchString(acc, "*/")
										} else {
											restoreDCheckpoint(acc);
											false;
										}
									}

								}
							}

						}
					}

				}
			}

		}
	}

}

