// Produced by  flowcpp gringo/gringo.flow -- file=mini/exp/flow.gringo.gringo compile=1
import gringo/compiler/dcode_lib;
import string;

export {
	parse_flow(DParseAcc) -> bool;
}


parse_flow(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (matchString(acc, "\\uFEFF")) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		};
		if (parse_ws(acc)) {
			if (parseStar(acc, \ -> {
				parse_importExport(acc)
			})) {
				if (parseStar(acc, \ -> {
					parse_toplevelDeclaration(acc)
				})) {
					if (addVerbatim(acc, "popfile")) {
						discardDCheckpoint(acc)
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_importExport(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_import(acc)) {
			discardDCheckpoint(acc)
		} else {
			if (parse_dynamicImport(acc)) {
				discardDCheckpoint(acc)
			} else {
				if (parse_export(acc)) {
					discardDCheckpoint(acc)
				} else {
					if (parse_forbid(acc)) {
						discardDCheckpoint(acc)
					} else {
						restoreDCheckpoint(acc)
					}
				}
			}
		}
	}
}

parse_import(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "import")) {
			if (parse_s(acc)) {
				{
					acc.starti ::= acc.i;
					if (if (parse_path(acc)) {
						{
							addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
							true
						}
					} else {
						false
					}) {
						if (parse_ws(acc)) {
							if (matchString(acc, ";")) {
								if (parse_ws(acc)) {
									if (addMatched(acc, ".flow")) {
										if (addVerbatim(acc, "changeFileExt")) {
											if (addVerbatim(acc, "parsefile")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_dynamicImport(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "require")) {
			if (parse_s(acc)) {
				{
					acc.starti ::= acc.i;
					if (if (parse_path(acc)) {
						{
							addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
							true
						}
					} else {
						false
					}) {
						if (parse_ws(acc)) {
							if (matchString(acc, ";")) {
								if (parse_ws(acc)) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_export(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "export")) {
			if (parse_ws(acc)) {
				if (matchString(acc, "{")) {
					if (parse_ws(acc)) {
						{
							pushDCheckpoint(acc);
							if (if (parse_toplevelDeclaration(acc)) {
								if (parseStar(acc, \ -> {
									parse_toplevelDeclaration(acc)
								})) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}) {
								if (matchString(acc, "}")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_forbid(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "forbid")) {
			if (parse_s(acc)) {
				{
					acc.starti ::= acc.i;
					if (if (parse_path(acc)) {
						{
							addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
							true
						}
					} else {
						false
					}) {
						if (parse_ws(acc)) {
							if (matchString(acc, ";")) {
								if (parse_ws(acc)) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_path(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_bid(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					if (matchString(acc, "/")) {
						if (parse_bid(acc)) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_toplevelDeclaration(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_native(acc)) {
			discardDCheckpoint(acc)
		} else {
			if (parse_assign(acc)) {
				discardDCheckpoint(acc)
			} else {
				if (parse_union(acc)) {
					discardDCheckpoint(acc)
				} else {
					if (parse_functionOrStruct(acc)) {
						discardDCheckpoint(acc)
					} else {
						if (parse_vardecl(acc)) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}
			}
		}
	}
}

parse_native(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "native")) {
			if (parse_s(acc)) {
				if (parse_id(acc)) {
					if (matchString(acc, ":")) {
						if (addMatched(acc, "__native")) {
							if (addVerbatim(acc, "var")) {
								if (parse_ws(acc)) {
									if (addMatched(acc, "1")) {
										if (addVerbatim(acc, "s2i")) {
											if (addVerbatim(acc, "nil")) {
												{
													pushDCheckpoint(acc);
													pushDCheckpoint(acc);
													if (if (matchString(acc, "io")) {
														if (parse_ws(acc)) {
															if (addMatched(acc, "io")) {
																if (addVerbatim(acc, "cons")) {
																	discardDCheckpoint(acc)
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}) {
														discardDCheckpoint(acc)
													} else {
														restoreDCheckpoint(acc)
													};
													if (addVerbatim(acc, "isnil")) {
														if (addVerbatim(acc, "-")) {
															if (parse_type(acc)) {
																if (addVerbatim(acc, "list2")) {
																	if (matchString(acc, "=")) {
																		if (parse_ws(acc)) {
																			{
																				acc.starti ::= acc.i;
																				if (if (parse_name(acc)) {
																					{
																						addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
																						true
																					}
																				} else {
																					false
																				}) {
																					if (addVerbatim(acc, "cons")) {
																						if (parse_ws(acc)) {
																							if (matchString(acc, ";")) {
																								if (parse_ws(acc)) {
																									if (addVerbatim(acc, "call")) {
																										if (addMatched(acc, "native")) {
																											if (addVerbatim(acc, "swap")) {
																												if (addVerbatim(acc, "setannotation")) {
																													discardDCheckpoint(acc)
																												} else {
																													restoreDCheckpoint(acc)
																												}
																											} else {
																												restoreDCheckpoint(acc)
																											}
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_name(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_bid(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					if (matchString(acc, ".")) {
						if (parse_bid(acc)) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_assign(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (matchString(acc, "=")) {
				if (parse_ws(acc)) {
					if (parse_exp(acc)) {
						{
							pushDCheckpoint(acc);
							if (matchString(acc, ";")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							};
							if (parse_ws(acc)) {
								if (addVerbatim(acc, "define")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_union(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (parse_typars(acc)) {
				if (matchString(acc, "::=")) {
					if (addVerbatim(acc, i2s(acc.i))) {
						if (addVerbatim(acc, "print")) {
							if (parse_ws(acc)) {
								if (parse_typenames(acc)) {
									if (matchString(acc, ";")) {
										if (parse_ws(acc)) {
											if (addVerbatim(acc, "uniondef")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_typenames(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_typename(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_typename(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_functionOrStruct(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "(")) {
					if (parse_ws(acc)) {
						{
							pushDCheckpoint(acc);
							pushDCheckpoint(acc);
							if (if (if (parse_typedargs(acc)) {
								if (matchString(acc, ")")) {
									if (parse_ws(acc)) {
										if (parse_returnType(acc)) {
											if (matchString(acc, ";")) {
												if (parse_ws(acc)) {
													if (addVerbatim(acc, "fntype")) {
														if (addVerbatim(acc, "typedef")) {
															discardDCheckpoint(acc)
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}) {
								discardDCheckpoint(acc)
							} else {
								{
									pushDCheckpoint(acc);
									if (if (parse_structargs(acc)) {
										if (matchString(acc, ")")) {
											if (parse_ws(acc)) {
												if (matchString(acc, ";")) {
													if (parse_ws(acc)) {
														if (addVerbatim(acc, "structdef")) {
															discardDCheckpoint(acc)
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}) {
										discardDCheckpoint(acc)
									} else {
										{
											pushDCheckpoint(acc);
											if (if (addVerbatim(acc, "dup")) {
												if (parse_funargs(acc)) {
													if (matchString(acc, ")")) {
														if (parse_ws(acc)) {
															if (addVerbatim(acc, "splitargs")) {
																if (parse_returnType(acc)) {
																	if (addVerbatim(acc, "fntype")) {
																		if (addVerbatim(acc, "rot")) {
																			if (addVerbatim(acc, "swap")) {
																				if (addVerbatim(acc, "typedef")) {
																					if (parse_brace(acc)) {
																						if (addVerbatim(acc, "lambda")) {
																							if (addVerbatim(acc, "define")) {
																								discardDCheckpoint(acc)
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}) {
												discardDCheckpoint(acc)
											} else {
												{
													pushDCheckpoint(acc);
													if (if (addVerbatim(acc, "dup")) {
														if (parse_funargs(acc)) {
															if (matchString(acc, ")")) {
																if (parse_ws(acc)) {
																	if (addVerbatim(acc, "splitargs")) {
																		if (addMatched(acc, "auto")) {
																			if (addVerbatim(acc, "type0")) {
																				if (addVerbatim(acc, "fntype")) {
																					if (addVerbatim(acc, "rot")) {
																						if (addVerbatim(acc, "swap")) {
																							if (addVerbatim(acc, "typedef")) {
																								if (parse_brace(acc)) {
																									if (addVerbatim(acc, "lambda")) {
																										if (addVerbatim(acc, "define")) {
																											discardDCheckpoint(acc)
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}) {
														discardDCheckpoint(acc)
													} else {
														{
															pushDCheckpoint(acc);
															if (if (addVerbatim(acc, "dup")) {
																if (parse_funargs(acc)) {
																	if (matchString(acc, ")")) {
																		if (parse_ws(acc)) {
																			if (addVerbatim(acc, "splitargs")) {
																				if (addMatched(acc, "auto")) {
																					if (addVerbatim(acc, "type0")) {
																						if (addVerbatim(acc, "fntype")) {
																							if (addVerbatim(acc, "rot")) {
																								if (addVerbatim(acc, "swap")) {
																									if (addVerbatim(acc, "typedef")) {
																										if (parse_exp(acc)) {
																											{
																												pushDCheckpoint(acc);
																												if (matchString(acc, ";")) {
																													discardDCheckpoint(acc)
																												} else {
																													restoreDCheckpoint(acc)
																												};
																												if (parse_ws(acc)) {
																													if (addVerbatim(acc, "lambda")) {
																														if (addVerbatim(acc, "define")) {
																															discardDCheckpoint(acc)
																														} else {
																															restoreDCheckpoint(acc)
																														}
																													} else {
																														restoreDCheckpoint(acc)
																													}
																												} else {
																													restoreDCheckpoint(acc)
																												}
																											}
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}) {
																discardDCheckpoint(acc)
															} else {
																{
																	pushDCheckpoint(acc);
																	if (if (parse_names(acc)) {
																		if (matchString(acc, ")")) {
																			if (parse_ws(acc)) {
																				if (parse_exp(acc)) {
																					{
																						pushDCheckpoint(acc);
																						if (matchString(acc, ";")) {
																							discardDCheckpoint(acc)
																						} else {
																							restoreDCheckpoint(acc)
																						};
																						if (parse_ws(acc)) {
																							if (addVerbatim(acc, "lambda")) {
																								if (addVerbatim(acc, "define")) {
																									discardDCheckpoint(acc)
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}) {
																		discardDCheckpoint(acc)
																	} else {
																		restoreDCheckpoint(acc)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, ":")) {
							if (parse_ws(acc)) {
								if (matchString(acc, "(")) {
									if (parse_ws(acc)) {
										if (parse_typedargs(acc)) {
											if (matchString(acc, ")")) {
												if (parse_ws(acc)) {
													if (parse_returnType(acc)) {
														if (matchString(acc, ";")) {
															if (parse_ws(acc)) {
																if (addVerbatim(acc, "fntype")) {
																	if (addVerbatim(acc, "typedef")) {
																		discardDCheckpoint(acc)
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, ":")) {
									if (parse_ws(acc)) {
										if (matchString(acc, "(")) {
											if (parse_ws(acc)) {
												if (parse_types(acc)) {
													if (matchString(acc, ")")) {
														if (parse_ws(acc)) {
															if (parse_returnType(acc)) {
																if (matchString(acc, ";")) {
																	if (parse_ws(acc)) {
																		if (addVerbatim(acc, "fntype")) {
																			if (addVerbatim(acc, "typedef")) {
																				discardDCheckpoint(acc)
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if (matchString(acc, ":")) {
											if (parse_ws(acc)) {
												if (matchString(acc, "(")) {
													if (parse_ws(acc)) {
														if (parse_structargs(acc)) {
															if (matchString(acc, ")")) {
																if (parse_ws(acc)) {
																	if (matchString(acc, ";")) {
																		if (parse_ws(acc)) {
																			if (addVerbatim(acc, "structdef")) {
																				discardDCheckpoint(acc)
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								}
							}
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_funargs(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_funarg(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_funarg(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_funarg(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (matchString(acc, ":")) {
				if (parse_ws(acc)) {
					if (parse_type(acc)) {
						if (addMatched(acc, ":")) {
							if (addVerbatim(acc, "binop")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_structargs(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_structarg(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_structarg(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_structarg(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, "mutable")) {
					{
						pushDCheckpoint(acc);
						if (if (parse_letterOrDigit(acc)) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) {
							if (parse_ws(acc)) {
								if (addMatched(acc, "mutable")) {
									if (addVerbatim(acc, "cons")) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				if (addVerbatim(acc, "isnil")) {
					if (parse_id(acc)) {
						if (addVerbatim(acc, "swap")) {
							if (addVerbatim(acc, "list2")) {
								if (matchString(acc, ":")) {
									if (parse_ws(acc)) {
										if (parse_type(acc)) {
											if (addVerbatim(acc, "cons")) {
												if (addMatched(acc, "__structarg")) {
													if (addVerbatim(acc, "var")) {
														if (addVerbatim(acc, "swap")) {
															if (addVerbatim(acc, "call")) {
																discardDCheckpoint(acc)
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_returnType(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "->")) {
			if (parse_ws(acc)) {
				if (parse_type(acc)) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_vardecl(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (matchString(acc, ":")) {
				if (parse_ws(acc)) {
					if (parse_type(acc)) {
						{
							pushDCheckpoint(acc);
							pushDCheckpoint(acc);
							if (if (if (matchString(acc, "=")) {
								if (parse_ws(acc)) {
									if (parse_exp(acc)) {
										{
											pushDCheckpoint(acc);
											if (matchString(acc, ";")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											};
											if (parse_ws(acc)) {
												if (addVerbatim(acc, "swap")) {
													if (addMatched(acc, ":")) {
														if (addVerbatim(acc, "binop")) {
															if (addVerbatim(acc, "define")) {
																discardDCheckpoint(acc)
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}) {
								discardDCheckpoint(acc)
							} else {
								{
									pushDCheckpoint(acc);
									pushDCheckpoint(acc);
									if (matchString(acc, ";")) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									};
									if (if (parse_ws(acc)) {
										if (addVerbatim(acc, "typedef")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								}
							}) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (parse_id(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "=")) {
					if (parse_ws(acc)) {
						if (parse_exp(acc)) {
							if (if (matchString(acc, ";")) {
								true
							} else {
								{
									addError(acc, "Expected \";\"");
									true
								}
							}) {
								if (parse_ws(acc)) {
									if (parse_semiexps(acc)) {
										if (addVerbatim(acc, "let")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, ":")) {
							if (parse_ws(acc)) {
								if (parse_type(acc)) {
									if (matchString(acc, "=")) {
										if (parse_ws(acc)) {
											if (parse_exp(acc)) {
												if (matchString(acc, ";")) {
													if (parse_ws(acc)) {
														if (addVerbatim(acc, "swap")) {
															if (addMatched(acc, ":")) {
																if (addVerbatim(acc, "binop")) {
																	if (parse_semiexps(acc)) {
																		if (addVerbatim(acc, "let")) {
																			discardDCheckpoint(acc)
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			if (parse_exp1(acc)) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		}
	}
}

parse_exp1(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp2(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, ":=")) {
					if (parse_ws(acc)) {
						if (parse_exp1(acc)) {
							if (addMatched(acc, ":=")) {
								if (addVerbatim(acc, "binop")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp2(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp3(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					if (matchString(acc, "|>")) {
						if (parse_ws(acc)) {
							if (parse_exp3(acc)) {
								if (addVerbatim(acc, "swap")) {
									if (addVerbatim(acc, "list1")) {
										if (addVerbatim(acc, "call")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp3(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp4(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, "||")) {
					if (parse_ws(acc)) {
						if (parse_exp3(acc)) {
							if (addMatched(acc, "||")) {
								if (addVerbatim(acc, "binop")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp4(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp5(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, "&&")) {
					if (parse_ws(acc)) {
						if (parse_exp4(acc)) {
							if (addMatched(acc, "&&")) {
								if (addVerbatim(acc, "binop")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp5(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp6(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "==")) {
					if (parse_ws(acc)) {
						if (parse_exp5(acc)) {
							if (addMatched(acc, "==")) {
								if (addVerbatim(acc, "binop")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "!=")) {
							if (parse_ws(acc)) {
								if (parse_exp5(acc)) {
									if (addMatched(acc, "!=")) {
										if (addVerbatim(acc, "binop")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, "<=")) {
									if (parse_ws(acc)) {
										if (parse_exp5(acc)) {
											if (addMatched(acc, "<=")) {
												if (addVerbatim(acc, "binop")) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if (matchString(acc, "<")) {
											if (parse_ws(acc)) {
												if (parse_exp5(acc)) {
													if (addMatched(acc, "<")) {
														if (addVerbatim(acc, "binop")) {
															discardDCheckpoint(acc)
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											{
												pushDCheckpoint(acc);
												if (if (matchString(acc, ">=")) {
													if (parse_ws(acc)) {
														if (parse_exp5(acc)) {
															if (addMatched(acc, ">=")) {
																if (addVerbatim(acc, "binop")) {
																	discardDCheckpoint(acc)
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}) {
													discardDCheckpoint(acc)
												} else {
													{
														pushDCheckpoint(acc);
														pushDCheckpoint(acc);
														if (if (matchString(acc, ">")) {
															if (parse_ws(acc)) {
																if (parse_exp5(acc)) {
																	if (addMatched(acc, ">")) {
																		if (addVerbatim(acc, "binop")) {
																			discardDCheckpoint(acc)
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}) {
															discardDCheckpoint(acc)
														} else {
															restoreDCheckpoint(acc)
														};
														discardDCheckpoint(acc)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp6(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp7(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					pushDCheckpoint(acc);
					if (if (matchString(acc, "+")) {
						if (parse_ws(acc)) {
							if (parse_exp7(acc)) {
								if (addMatched(acc, "+")) {
									if (addVerbatim(acc, "binop")) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}) {
						discardDCheckpoint(acc)
					} else {
						{
							pushDCheckpoint(acc);
							if (if (matchString(acc, "-")) {
								if (parse_ws(acc)) {
									if (parse_exp7(acc)) {
										if (addMatched(acc, "-")) {
											if (addVerbatim(acc, "binop")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						}
					}
				}
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp7(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp8(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "*")) {
					if (parse_ws(acc)) {
						if (parse_exp7(acc)) {
							if (addMatched(acc, "*")) {
								if (addVerbatim(acc, "binop")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "/")) {
							if (parse_ws(acc)) {
								if (parse_exp7(acc)) {
									if (addMatched(acc, "/")) {
										if (addVerbatim(acc, "binop")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, "%")) {
									if (parse_ws(acc)) {
										if (parse_exp7(acc)) {
											if (addMatched(acc, "%")) {
												if (addVerbatim(acc, "binop")) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp8(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp9(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, ":")) {
					if (parse_ws(acc)) {
						if (parse_type(acc)) {
							if (addMatched(acc, ":")) {
								if (addVerbatim(acc, "binop")) {
									if (parseStar(acc, \ -> {
										{
											pushDCheckpoint(acc);
											if (matchString(acc, ":")) {
												if (parse_ws(acc)) {
													if (parse_type(acc)) {
														if (addMatched(acc, ":")) {
															if (addVerbatim(acc, "binop")) {
																discardDCheckpoint(acc)
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										}
									})) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp9(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp10(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, "??")) {
					if (parse_ws(acc)) {
						if (parse_exp9(acc)) {
							if (addVerbatim(acc, "list2")) {
								if (matchString(acc, ":")) {
									if (parse_ws(acc)) {
										if (parse_exp9(acc)) {
											if (addVerbatim(acc, "cons")) {
												if (addMatched(acc, "__ctmaybe")) {
													if (addVerbatim(acc, "var")) {
														if (addVerbatim(acc, "swap")) {
															if (addVerbatim(acc, "call")) {
																discardDCheckpoint(acc)
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exp10(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "!")) {
			if (parse_ws(acc)) {
				if (parse_exp10(acc)) {
					if (addMatched(acc, "!")) {
						if (addVerbatim(acc, "unop")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (matchString(acc, "-")) {
					if (parse_ws(acc)) {
						if (parse_exp10(acc)) {
							if (addMatched(acc, "__neg")) {
								if (addVerbatim(acc, "unop")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (parse_backslash(acc)) {
							if (parse_ws(acc)) {
								if (parse_lambdaargs(acc)) {
									if (matchString(acc, "->")) {
										if (parse_ws(acc)) {
											if (parse_exp(acc)) {
												if (matchString(acc, "")) {
													if (addVerbatim(acc, "lambda")) {
														discardDCheckpoint(acc)
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (parse_exp11(acc)) {
									if (parseStar(acc, \ -> {
										{
											pushDCheckpoint(acc);
											pushDCheckpoint(acc);
											if (if (matchString(acc, "(")) {
												if (parse_ws(acc)) {
													if (parse_exps(acc)) {
														if (matchString(acc, ")")) {
															if (parse_ws(acc)) {
																if (addVerbatim(acc, "call")) {
																	discardDCheckpoint(acc)
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}) {
												discardDCheckpoint(acc)
											} else {
												{
													pushDCheckpoint(acc);
													if (if (matchString(acc, "(")) {
														if (parse_ws(acc)) {
															if (parse_exp(acc)) {
																if (matchString(acc, "with")) {
																	if (parse_s(acc)) {
																		if (addVerbatim(acc, "list2")) {
																			if (parse_fields(acc)) {
																				if (addVerbatim(acc, "cons")) {
																					if (matchString(acc, ")")) {
																						if (parse_ws(acc)) {
																							if (addMatched(acc, "__with")) {
																								if (addVerbatim(acc, "var")) {
																									if (addVerbatim(acc, "swap")) {
																										if (addVerbatim(acc, "call")) {
																											discardDCheckpoint(acc)
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}) {
														discardDCheckpoint(acc)
													} else {
														{
															pushDCheckpoint(acc);
															if (if (matchString(acc, ".")) {
																if (parse_ws(acc)) {
																	if (parse_id(acc)) {
																		if (addVerbatim(acc, "list2")) {
																			if (matchString(acc, "::=")) {
																				if (parse_ws(acc)) {
																					if (parse_exp10(acc)) {
																						if (addVerbatim(acc, "cons")) {
																							if (addMatched(acc, "__mutassign")) {
																								if (addVerbatim(acc, "swap")) {
																									if (addVerbatim(acc, "call")) {
																										discardDCheckpoint(acc)
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}) {
																discardDCheckpoint(acc)
															} else {
																{
																	pushDCheckpoint(acc);
																	if (if (matchString(acc, ".")) {
																		if (parse_ws(acc)) {
																			if (parse_id(acc)) {
																				if (addMatched(acc, ".")) {
																					if (addVerbatim(acc, "binop")) {
																						discardDCheckpoint(acc)
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}) {
																		discardDCheckpoint(acc)
																	} else {
																		{
																			pushDCheckpoint(acc);
																			if (if (matchString(acc, "[")) {
																				if (parse_ws(acc)) {
																					if (parse_exp(acc)) {
																						if (matchString(acc, "]")) {
																							if (parse_ws(acc)) {
																								if (addMatched(acc, "__index")) {
																									if (addVerbatim(acc, "binop")) {
																										discardDCheckpoint(acc)
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}) {
																				discardDCheckpoint(acc)
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									})) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									if (parse_exp11(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

parse_exp11(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "^")) {
			if (parse_ws(acc)) {
				if (parse_exp11(acc)) {
					if (addMatched(acc, "__deref")) {
						if (addVerbatim(acc, "unop")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			if (parse_exp12(acc)) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		}
	}
}

parse_exp12(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "if")) {
			{
				pushDCheckpoint(acc);
				if (if (parse_letterOrDigit(acc)) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) {
					if (parse_ws(acc)) {
						if (matchString(acc, "(")) {
							if (parse_ws(acc)) {
								if (addVerbatim(acc, "nil")) {
									if (parse_exp(acc)) {
										if (addVerbatim(acc, "cons")) {
											if (matchString(acc, ")")) {
												if (parse_ws(acc)) {
													if (parse_exp(acc)) {
														if (addVerbatim(acc, "cons")) {
															{
																pushDCheckpoint(acc);
																pushDCheckpoint(acc);
																if (if (if (matchString(acc, "else")) {
																	if (parse_ws(acc)) {
																		if (parse_exp(acc)) {
																			if (addVerbatim(acc, "cons")) {
																				if (addMatched(acc, "__ifte")) {
																					if (addVerbatim(acc, "var")) {
																						if (addVerbatim(acc, "swap")) {
																							if (addVerbatim(acc, "call")) {
																								discardDCheckpoint(acc)
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}) {
																	discardDCheckpoint(acc)
																} else {
																	{
																		pushDCheckpoint(acc);
																		if (if (addMatched(acc, "__ift")) {
																			if (addVerbatim(acc, "var")) {
																				if (addVerbatim(acc, "swap")) {
																					if (addVerbatim(acc, "call")) {
																						discardDCheckpoint(acc)
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}) {
																			discardDCheckpoint(acc)
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	}
																}) {
																	discardDCheckpoint(acc)
																} else {
																	restoreDCheckpoint(acc)
																}
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (matchString(acc, "(")) {
					if (parse_ws(acc)) {
						if (parse_exp(acc)) {
							if (if (matchString(acc, ")")) {
								true
							} else {
								{
									addError(acc, "Expected \")\"");
									true
								}
							}) {
								if (parse_ws(acc)) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "ref")) {
							{
								pushDCheckpoint(acc);
								if (if (parse_letterOrDigit(acc)) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) {
									if (parse_ws(acc)) {
										if (parse_exp(acc)) {
											if (addMatched(acc, "__ref")) {
												if (addVerbatim(acc, "unop")) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							if (parse_switch(acc)) {
								discardDCheckpoint(acc)
							} else {
								{
									pushDCheckpoint(acc);
									if (if (matchString(acc, "cast")) {
										{
											pushDCheckpoint(acc);
											if (if (parse_letterOrDigit(acc)) {
												restoreDCheckpoint(acc)
											} else {
												{
													restoreDCheckpoint(acc);
													true
												}
											}) {
												if (parse_ws(acc)) {
													if (addMatched(acc, "__cast")) {
														if (addVerbatim(acc, "var")) {
															if (addVerbatim(acc, "nil")) {
																if (matchString(acc, "(")) {
																	if (parse_ws(acc)) {
																		if (parse_exp(acc)) {
																			if (addVerbatim(acc, "cons")) {
																				if (matchString(acc, "->")) {
																					if (parse_ws(acc)) {
																						if (parse_type(acc)) {
																							if (addVerbatim(acc, "cons")) {
																								if (matchString(acc, ")")) {
																									if (parse_ws(acc)) {
																										if (addVerbatim(acc, "call")) {
																											discardDCheckpoint(acc)
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										}
									} else {
										restoreDCheckpoint(acc)
									}) {
										discardDCheckpoint(acc)
									} else {
										{
											pushDCheckpoint(acc);
											if (if (matchString(acc, "true")) {
												{
													pushDCheckpoint(acc);
													if (if (parse_letterOrDigit(acc)) {
														restoreDCheckpoint(acc)
													} else {
														{
															restoreDCheckpoint(acc);
															true
														}
													}) {
														if (parse_ws(acc)) {
															if (addVerbatim(acc, "1")) {
																if (addMatched(acc, "bool")) {
																	if (addVerbatim(acc, "type0")) {
																		if (addMatched(acc, ":")) {
																			if (addVerbatim(acc, "binop")) {
																				discardDCheckpoint(acc)
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												}
											} else {
												restoreDCheckpoint(acc)
											}) {
												discardDCheckpoint(acc)
											} else {
												{
													pushDCheckpoint(acc);
													if (if (matchString(acc, "false")) {
														{
															pushDCheckpoint(acc);
															if (if (parse_letterOrDigit(acc)) {
																restoreDCheckpoint(acc)
															} else {
																{
																	restoreDCheckpoint(acc);
																	true
																}
															}) {
																if (parse_ws(acc)) {
																	if (addVerbatim(acc, "0")) {
																		if (addMatched(acc, "bool")) {
																			if (addVerbatim(acc, "type0")) {
																				if (addMatched(acc, ":")) {
																					if (addVerbatim(acc, "binop")) {
																						discardDCheckpoint(acc)
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														}
													} else {
														restoreDCheckpoint(acc)
													}) {
														discardDCheckpoint(acc)
													} else {
														{
															pushDCheckpoint(acc);
															if (if (parse_id(acc)) {
																if (addVerbatim(acc, "var")) {
																	discardDCheckpoint(acc)
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}) {
																discardDCheckpoint(acc)
															} else {
																{
																	pushDCheckpoint(acc);
																	if (if (matchString(acc, "0x")) {
																		{
																			acc.starti ::= acc.i;
																			pushDCheckpoint(acc);
																			if (if (if (parse_hexdigit(acc)) {
																				if (parseStar(acc, \ -> {
																					parse_hexdigit(acc)
																				})) {
																					discardDCheckpoint(acc)
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}) {
																				{
																					addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
																					true
																				}
																			} else {
																				false
																			}) {
																				if (parse_ws(acc)) {
																					if (addVerbatim(acc, "parsehex")) {
																						discardDCheckpoint(acc)
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}) {
																		discardDCheckpoint(acc)
																	} else {
																		{
																			pushDCheckpoint(acc);
																			acc.starti ::= acc.i;
																			pushDCheckpoint(acc);
																			pushDCheckpoint(acc);
																			if (if (if (if (if (matchRange(acc, 48, 57)) {
																				if (parseStar(acc, \ -> {
																					matchRange(acc, 48, 57)
																				})) {
																					discardDCheckpoint(acc)
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}) {
																				if (matchString(acc, ".")) {
																					if (parseStar(acc, \ -> {
																						matchRange(acc, 48, 57)
																					})) {
																						discardDCheckpoint(acc)
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}) {
																				{
																					addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
																					true
																				}
																			} else {
																				false
																			}) {
																				if (parse_ws(acc)) {
																					if (addVerbatim(acc, "s2d")) {
																						discardDCheckpoint(acc)
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}) {
																				discardDCheckpoint(acc)
																			} else {
																				{
																					pushDCheckpoint(acc);
																					acc.starti ::= acc.i;
																					pushDCheckpoint(acc);
																					if (if (if (if (matchString(acc, ".")) {
																						{
																							pushDCheckpoint(acc);
																							if (if (matchRange(acc, 48, 57)) {
																								if (parseStar(acc, \ -> {
																									matchRange(acc, 48, 57)
																								})) {
																									discardDCheckpoint(acc)
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}) {
																								discardDCheckpoint(acc)
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}) {
																						{
																							addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
																							true
																						}
																					} else {
																						false
																					}) {
																						if (parse_ws(acc)) {
																							if (addVerbatim(acc, "s2d")) {
																								discardDCheckpoint(acc)
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}) {
																						discardDCheckpoint(acc)
																					} else {
																						{
																							pushDCheckpoint(acc);
																							if (if (parse_int(acc)) {
																								if (parse_ws(acc)) {
																									if (addVerbatim(acc, "s2i")) {
																										discardDCheckpoint(acc)
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}) {
																								discardDCheckpoint(acc)
																							} else {
																								if (parse_brace(acc)) {
																									discardDCheckpoint(acc)
																								} else {
																									if (parse_string(acc)) {
																										discardDCheckpoint(acc)
																									} else {
																										{
																											pushDCheckpoint(acc);
																											if (if (matchString(acc, "[")) {
																												if (parse_ws(acc)) {
																													if (parse_expcommas(acc)) {
																														if (matchString(acc, "]")) {
																															if (parse_ws(acc)) {
																																if (addMatched(acc, "[")) {
																																	if (addVerbatim(acc, "unop")) {
																																		discardDCheckpoint(acc)
																																	} else {
																																		restoreDCheckpoint(acc)
																																	}
																																} else {
																																	restoreDCheckpoint(acc)
																																}
																															} else {
																																restoreDCheckpoint(acc)
																															}
																														} else {
																															restoreDCheckpoint(acc)
																														}
																													} else {
																														restoreDCheckpoint(acc)
																													}
																												} else {
																													restoreDCheckpoint(acc)
																												}
																											} else {
																												restoreDCheckpoint(acc)
																											}) {
																												discardDCheckpoint(acc)
																											} else {
																												{
																													pushDCheckpoint(acc);
																													if (if (matchString(acc, "[")) {
																														if (parse_ws(acc)) {
																															if (matchString(acc, "]")) {
																																if (parse_ws(acc)) {
																																	if (addMatched(acc, "__emptyarray")) {
																																		if (addVerbatim(acc, "var")) {
																																			if (addVerbatim(acc, "nil")) {
																																				if (addVerbatim(acc, "call")) {
																																					discardDCheckpoint(acc)
																																				} else {
																																					restoreDCheckpoint(acc)
																																				}
																																			} else {
																																				restoreDCheckpoint(acc)
																																			}
																																		} else {
																																			restoreDCheckpoint(acc)
																																		}
																																	} else {
																																		restoreDCheckpoint(acc)
																																	}
																																} else {
																																	restoreDCheckpoint(acc)
																																}
																															} else {
																																restoreDCheckpoint(acc)
																															}
																														} else {
																															restoreDCheckpoint(acc)
																														}
																													} else {
																														restoreDCheckpoint(acc)
																													}) {
																														discardDCheckpoint(acc)
																													} else {
																														restoreDCheckpoint(acc)
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

parse_fields(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_fieldassign(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_fieldassign(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_fieldassign(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (matchString(acc, "=")) {
				if (parse_ws(acc)) {
					if (parse_exp(acc)) {
						if (addMatched(acc, "__withassign")) {
							if (addVerbatim(acc, "binop")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_brace(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "{")) {
			if (parse_ws(acc)) {
				{
					pushDCheckpoint(acc);
					pushDCheckpoint(acc);
					if (if (if (parse_exp(acc)) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, ";")) {
									true
								} else {
									{
										addError(acc, "Expected \";\"");
										true
									}
								}) {
									if (parse_ws(acc)) {
										if (parse_exp(acc)) {
											if (addMatched(acc, ";")) {
												if (addVerbatim(acc, "binop")) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ";")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								if (if (matchString(acc, "}")) {
									true
								} else {
									{
										addError(acc, "Expected \"}\"");
										true
									}
								}) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}) {
						discardDCheckpoint(acc)
					} else {
						{
							pushDCheckpoint(acc);
							if (if (matchString(acc, "}")) {
								if (parse_ws(acc)) {
									if (addMatched(acc, "__void")) {
										if (addVerbatim(acc, "var")) {
											if (addVerbatim(acc, "nil")) {
												if (addVerbatim(acc, "call")) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						}
					}) {
						discardDCheckpoint(acc)
					} else {
						restoreDCheckpoint(acc)
					}
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_expcommas(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					if (matchString(acc, ",")) {
						if (parse_ws(acc)) {
							if (parse_exp(acc)) {
								if (addMatched(acc, ",")) {
									if (addVerbatim(acc, "binop")) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			})) {
				{
					pushDCheckpoint(acc);
					pushDCheckpoint(acc);
					if (if (matchString(acc, ",")) {
						if (parse_ws(acc)) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}) {
						discardDCheckpoint(acc)
					} else {
						restoreDCheckpoint(acc)
					};
					discardDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_semiexps(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_exp(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					if (matchString(acc, ";")) {
						if (parse_ws(acc)) {
							if (parse_exp(acc)) {
								if (addMatched(acc, ";")) {
									if (addVerbatim(acc, "binop")) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_switch(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "switch")) {
			{
				pushDCheckpoint(acc);
				if (if (parse_letterOrDigit(acc)) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) {
					if (parse_ws(acc)) {
						if (matchString(acc, "(")) {
							if (parse_ws(acc)) {
								if (parse_exp(acc)) {
									if (addMatched(acc, "__switchvar")) {
										if (addVerbatim(acc, "swap")) {
											if (addMatched(acc, "__switchvar")) {
												if (addVerbatim(acc, "var")) {
													if (addMatched(acc, "__switchvalue")) {
														if (addVerbatim(acc, "unop")) {
															if (matchString(acc, ")")) {
																if (parse_ws(acc)) {
																	if (matchString(acc, "{")) {
																		if (parse_ws(acc)) {
																			if (parse_cases(acc)) {
																				if (if (matchString(acc, "}")) {
																					true
																				} else {
																					{
																						addError(acc, "Expected \"}\"");
																						true
																					}
																				}) {
																					if (parse_ws(acc)) {
																						if (addMatched(acc, "__switch")) {
																							if (addVerbatim(acc, "binop")) {
																								if (addVerbatim(acc, "let")) {
																									discardDCheckpoint(acc)
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_cases(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (parse_defaultOrNamedCase(acc)) {
			if (parseStar(acc, \ -> {
				{
					pushDCheckpoint(acc);
					if (parse_defaultOrNamedCase(acc)) {
						if (addMatched(acc, "__or")) {
							if (addVerbatim(acc, "binop")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				}
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (addMatched(acc, "__void")) {
					if (addVerbatim(acc, "var")) {
						if (addVerbatim(acc, "nil")) {
							if (addVerbatim(acc, "call")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

parse_defaultOrNamedCase(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "default")) {
			{
				pushDCheckpoint(acc);
				if (if (parse_letterOrDigit(acc)) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) {
					if (parse_ws(acc)) {
						if (matchString(acc, ":")) {
							if (parse_ws(acc)) {
								if (parse_exp(acc)) {
									{
										pushDCheckpoint(acc);
										pushDCheckpoint(acc);
										if (if (matchString(acc, ";")) {
											if (parse_ws(acc)) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										};
										if (addMatched(acc, "__defaultcase")) {
											if (addVerbatim(acc, "unop")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (addVerbatim(acc, "nil")) {
					if (parse_id(acc)) {
						if (addVerbatim(acc, "var")) {
							if (addVerbatim(acc, "cons")) {
								if (matchString(acc, "(")) {
									if (parse_ws(acc)) {
										if (parse_names(acc)) {
											if (addVerbatim(acc, "cons")) {
												if (matchString(acc, ")")) {
													if (parse_ws(acc)) {
														if (matchString(acc, ":")) {
															if (parse_ws(acc)) {
																if (parse_exp(acc)) {
																	{
																		pushDCheckpoint(acc);
																		pushDCheckpoint(acc);
																		if (if (matchString(acc, ";")) {
																			if (parse_ws(acc)) {
																				discardDCheckpoint(acc)
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}) {
																			discardDCheckpoint(acc)
																		} else {
																			restoreDCheckpoint(acc)
																		};
																		if (addVerbatim(acc, "cons")) {
																			if (addMatched(acc, "__ctcase")) {
																				if (addVerbatim(acc, "var")) {
																					if (addVerbatim(acc, "swap")) {
																						if (addVerbatim(acc, "call")) {
																							discardDCheckpoint(acc)
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

parse_names(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_id(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_id(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_type(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "bool")) {
			{
				pushDCheckpoint(acc);
				if (if (parse_letterOrDigit(acc)) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) {
					if (parse_ws(acc)) {
						if (addMatched(acc, "bool")) {
							if (addVerbatim(acc, "type0")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (matchString(acc, "int")) {
					{
						pushDCheckpoint(acc);
						if (if (parse_letterOrDigit(acc)) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) {
							if (parse_ws(acc)) {
								if (addMatched(acc, "int")) {
									if (addVerbatim(acc, "type0")) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "double")) {
							{
								pushDCheckpoint(acc);
								if (if (parse_letterOrDigit(acc)) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) {
									if (parse_ws(acc)) {
										if (addMatched(acc, "double")) {
											if (addVerbatim(acc, "type0")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, "string")) {
									{
										pushDCheckpoint(acc);
										if (if (parse_letterOrDigit(acc)) {
											restoreDCheckpoint(acc)
										} else {
											{
												restoreDCheckpoint(acc);
												true
											}
										}) {
											if (parse_ws(acc)) {
												if (addMatched(acc, "string")) {
													if (addVerbatim(acc, "type0")) {
														discardDCheckpoint(acc)
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if (matchString(acc, "flow")) {
											{
												pushDCheckpoint(acc);
												if (if (parse_letterOrDigit(acc)) {
													restoreDCheckpoint(acc)
												} else {
													{
														restoreDCheckpoint(acc);
														true
													}
												}) {
													if (parse_ws(acc)) {
														if (addMatched(acc, "flow")) {
															if (addVerbatim(acc, "type0")) {
																discardDCheckpoint(acc)
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													} else {
														restoreDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											{
												pushDCheckpoint(acc);
												if (if (matchString(acc, "void")) {
													{
														pushDCheckpoint(acc);
														if (if (parse_letterOrDigit(acc)) {
															restoreDCheckpoint(acc)
														} else {
															{
																restoreDCheckpoint(acc);
																true
															}
														}) {
															if (parse_ws(acc)) {
																if (addMatched(acc, "void")) {
																	if (addVerbatim(acc, "type0")) {
																		discardDCheckpoint(acc)
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															} else {
																restoreDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}
													}
												} else {
													restoreDCheckpoint(acc)
												}) {
													discardDCheckpoint(acc)
												} else {
													{
														pushDCheckpoint(acc);
														if (if (matchString(acc, "native")) {
															{
																pushDCheckpoint(acc);
																if (if (parse_letterOrDigit(acc)) {
																	restoreDCheckpoint(acc)
																} else {
																	{
																		restoreDCheckpoint(acc);
																		true
																	}
																}) {
																	if (parse_ws(acc)) {
																		if (addMatched(acc, "native")) {
																			if (addVerbatim(acc, "type0")) {
																				discardDCheckpoint(acc)
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	} else {
																		restoreDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															}
														} else {
															restoreDCheckpoint(acc)
														}) {
															discardDCheckpoint(acc)
														} else {
															{
																pushDCheckpoint(acc);
																if (if (matchString(acc, "ref")) {
																	{
																		pushDCheckpoint(acc);
																		if (if (parse_letterOrDigit(acc)) {
																			restoreDCheckpoint(acc)
																		} else {
																			{
																				restoreDCheckpoint(acc);
																				true
																			}
																		}) {
																			if (parse_ws(acc)) {
																				if (parse_type(acc)) {
																					if (addMatched(acc, "ref")) {
																						if (addVerbatim(acc, "type1")) {
																							discardDCheckpoint(acc)
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}
																	}
																} else {
																	restoreDCheckpoint(acc)
																}) {
																	discardDCheckpoint(acc)
																} else {
																	{
																		pushDCheckpoint(acc);
																		if (if (matchString(acc, "(")) {
																			if (parse_ws(acc)) {
																				if (parse_typedargs(acc)) {
																					if (matchString(acc, ")")) {
																						if (parse_ws(acc)) {
																							if (matchString(acc, "->")) {
																								if (parse_ws(acc)) {
																									if (parse_type(acc)) {
																										if (addVerbatim(acc, "fntype")) {
																											discardDCheckpoint(acc)
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}
																			} else {
																				restoreDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}) {
																			discardDCheckpoint(acc)
																		} else {
																			{
																				pushDCheckpoint(acc);
																				if (if (matchString(acc, "(")) {
																					if (parse_ws(acc)) {
																						if (parse_types(acc)) {
																							if (matchString(acc, ")")) {
																								if (parse_ws(acc)) {
																									if (matchString(acc, "->")) {
																										if (parse_ws(acc)) {
																											if (parse_type(acc)) {
																												if (addVerbatim(acc, "fntype")) {
																													discardDCheckpoint(acc)
																												} else {
																													restoreDCheckpoint(acc)
																												}
																											} else {
																												restoreDCheckpoint(acc)
																											}
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					} else {
																						restoreDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}) {
																					discardDCheckpoint(acc)
																				} else {
																					if (parse_typename(acc)) {
																						discardDCheckpoint(acc)
																					} else {
																						{
																							pushDCheckpoint(acc);
																							if (if (matchString(acc, "[")) {
																								if (parse_ws(acc)) {
																									if (parse_type(acc)) {
																										if (matchString(acc, "]")) {
																											if (parse_ws(acc)) {
																												if (addMatched(acc, "array")) {
																													if (addVerbatim(acc, "type1")) {
																														discardDCheckpoint(acc)
																													} else {
																														restoreDCheckpoint(acc)
																													}
																												} else {
																													restoreDCheckpoint(acc)
																												}
																											} else {
																												restoreDCheckpoint(acc)
																											}
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}
																							} else {
																								restoreDCheckpoint(acc)
																							}) {
																								discardDCheckpoint(acc)
																							} else {
																								{
																									pushDCheckpoint(acc);
																									acc.starti ::= acc.i;
																									pushDCheckpoint(acc);
																									if (if (if (if (matchString(acc, "?")) {
																										if (parseStar(acc, \ -> {
																											matchString(acc, "?")
																										})) {
																											discardDCheckpoint(acc)
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}) {
																										{
																											addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
																											true
																										}
																									} else {
																										false
																									}) {
																										if (parse_ws(acc)) {
																											if (addVerbatim(acc, "type0")) {
																												discardDCheckpoint(acc)
																											} else {
																												restoreDCheckpoint(acc)
																											}
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									} else {
																										restoreDCheckpoint(acc)
																									}) {
																										discardDCheckpoint(acc)
																									} else {
																										restoreDCheckpoint(acc)
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

parse_typename(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (addVerbatim(acc, "var")) {
				if (parse_typars(acc)) {
					if (addVerbatim(acc, "call")) {
						if (addVerbatim(acc, "type0")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_typars(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "<")) {
			if (parse_ws(acc)) {
				if (parse_types(acc)) {
					if (matchString(acc, ">")) {
						if (parse_ws(acc)) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			if (addVerbatim(acc, "nil")) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		}
	}
}

parse_types(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_type(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_type(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_typedargs(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_typedarg(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_typedarg(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_typedarg(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			if (addVerbatim(acc, "drop")) {
				if (matchString(acc, ":")) {
					if (parse_ws(acc)) {
						if (parse_type(acc)) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_lambdaargs(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_lambdaarg(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_lambdaarg(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_lambdaarg(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_id(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (matchString(acc, ":")) {
					if (parse_ws(acc)) {
						if (parse_type(acc)) {
							if (addVerbatim(acc, "drop")) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_exps(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (addVerbatim(acc, "nil")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (parse_exp(acc)) {
					if (addVerbatim(acc, "cons")) {
						if (parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										if (parse_exp(acc)) {
											if (addVerbatim(acc, "cons")) {
												discardDCheckpoint(acc)
											} else {
												restoreDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						})) {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (matchString(acc, ",")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								};
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_string(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "\"")) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "#inc")) {
					if (matchString(acc, "lude")) {
						if (parse_s(acc)) {
							if (parse_path(acc)) {
								if (matchString(acc, "\"")) {
									if (parse_ws(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						acc.starti ::= acc.i;
						if (if (if (parseStar(acc, \ -> {
							parse_onechar_(acc)
						})) {
							{
								addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
								true
							}
						} else {
							false
						}) {
							if (matchString(acc, "\"")) {
								if (parse_ws(acc)) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_onechar_(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (parse_backslash(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "u")) {
					if (parse_hexdigit(acc)) {
						if (parse_hexdigit(acc)) {
							if (parse_hexdigit(acc)) {
								if (parse_hexdigit(acc)) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					} else {
						restoreDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "X")) {
							if (parse_hexdigit(acc)) {
								if (parse_hexdigit(acc)) {
									if (parse_hexdigit(acc)) {
										if (parse_hexdigit(acc)) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, "x")) {
									if (parse_hexdigit(acc)) {
										if (parse_hexdigit(acc)) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									if (parse_escapedchar_(acc)) {
										discardDCheckpoint(acc)
									} else {
										restoreDCheckpoint(acc)
									}
								}
							}
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "\"")) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) {
					{
						pushDCheckpoint(acc);
						if (if (parse_backslash(acc)) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) {
							if (parse_anychar(acc)) {
								discardDCheckpoint(acc)
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

parse_hexdigit(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchRange(acc, 48, 57)) {
			discardDCheckpoint(acc)
		} else {
			if (matchRange(acc, 97, 102)) {
				discardDCheckpoint(acc)
			} else {
				if (matchRange(acc, 65, 70)) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

parse_escapedchar_(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_backslash(acc)) {
			discardDCheckpoint(acc)
		} else {
			if (matchString(acc, "\"")) {
				discardDCheckpoint(acc)
			} else {
				if (matchString(acc, "n")) {
					discardDCheckpoint(acc)
				} else {
					if (matchString(acc, "t")) {
						discardDCheckpoint(acc)
					} else {
						if (matchString(acc, "r")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}
			}
		}
	}
}

parse_anychar(acc : DParseAcc) -> bool {
	matchRange(acc, 0, 65535)
}

parse_id(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		if (if (parse_bid(acc)) {
			{
				addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
				true
			}
		} else {
			false
		}) {
			if (parse_ws(acc)) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_bid(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchRange(acc, 97, 122)) {
			discardDCheckpoint(acc)
		} else {
			if (matchRange(acc, 65, 90)) {
				discardDCheckpoint(acc)
			} else {
				if (matchString(acc, "_")) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}) {
			if (parseStar(acc, \ -> {
				parse_letterOrDigit(acc)
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_letterOrDigit(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchRange(acc, 97, 122)) {
			discardDCheckpoint(acc)
		} else {
			if (matchRange(acc, 65, 90)) {
				discardDCheckpoint(acc)
			} else {
				if (matchString(acc, "_")) {
					discardDCheckpoint(acc)
				} else {
					if (matchRange(acc, 48, 57)) {
						discardDCheckpoint(acc)
					} else {
						restoreDCheckpoint(acc)
					}
				}
			}
		}
	}
}

parse_int(acc : DParseAcc) -> bool {
	{
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		if (if (matchRange(acc, 48, 57)) {
			if (parseStar(acc, \ -> {
				matchRange(acc, 48, 57)
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			{
				addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
				true
			}
		} else {
			false
		}
	}
}

parse_backslash(acc : DParseAcc) -> bool {
	matchString(acc, "\\")
}

parse_ws(acc : DParseAcc) -> bool {
	parseStar(acc, \ -> {
		parse_cs(acc)
	})
}

parse_s(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (parse_cs(acc)) {
			if (parseStar(acc, \ -> {
				parse_cs(acc)
			})) {
				discardDCheckpoint(acc)
			} else {
				restoreDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

parse_cs(acc : DParseAcc) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, " ")) {
			discardDCheckpoint(acc)
		} else {
			if (matchString(acc, "\t")) {
				discardDCheckpoint(acc)
			} else {
				if (matchString(acc, "\n")) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "//")) {
							if (parseStar(acc, \ -> {
								{
									pushDCheckpoint(acc);
									pushDCheckpoint(acc);
									if (if (matchString(acc, "\n")) {
										restoreDCheckpoint(acc)
									} else {
										{
											restoreDCheckpoint(acc);
											true
										}
									}) {
										if (parse_anychar(acc)) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								}
							})) {
								if (matchString(acc, "\n")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							} else {
								restoreDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, "/*")) {
									if (parseStar(acc, \ -> {
										{
											pushDCheckpoint(acc);
											pushDCheckpoint(acc);
											if (if (matchString(acc, "*/")) {
												restoreDCheckpoint(acc)
											} else {
												{
													restoreDCheckpoint(acc);
													true
												}
											}) {
												if (parse_anychar(acc)) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											} else {
												restoreDCheckpoint(acc)
											}
										}
									})) {
										if (matchString(acc, "*/")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									} else {
										restoreDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						}
					}
				}
			}
		}
	}
}

































































