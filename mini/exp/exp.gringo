flow = '\uFEFF'? ws importExport* toplevelDeclaration*;

importExport = import
	| dynamicImport
	| export
	| forbid;

import = "import" s $path ws ';' ws $$".flow" $"changeFileExt" $"parsefile";
dynamicImport = "require" s $path ws ';' ws; // TODO: AST
export = "export" ws '{' ws toplevelDeclaration+ '}' ws; // TODO: AST
forbid = "forbid" s $path ws ';' ws; // TODO: AST

	path = bid path_more*;
		path_more = '/' bid;

/*
toplevelDeclaration = 
	native
	| assign
	| union
	| function
	| typedecl;

	*/

toplevelDeclaration = function;

// TODO:
function = exp;

exp = 
	// Sequence
	"{" ws expsemis "}" ws $$";" $"var" $"swap" $"call"

	|> (
		id ws "=" ws exp ";" ws exp $"let"
	 	| id ws ":" type "=" ws exp ";" $"swap" $$":" $"binop" ws exp $"let"
	)

	|> '\' funargs ws "->" ws exp $"lambda"

	|> exp "(" ws exps ")" ws $"call"

	|> exp ":" ws type $$":" $"binop"

	|> (
		"(" ws exp ")" ws 
		| "true" ws $"1" $"1" $"inttype" $$":" $"binop"
		| "false" ws $"0" $"1" $"inttype" $$":" $"binop"
		| id ws $"var"
		| $('0'-'9'+ "." '0'-'9'*) $"s2d"
		| $("." '0'-'9'+) $"s2d"
		| int ws $"s2i"
	);

type = 	
		"bool" ws $"1" $"inttype"
		| "int" ws $"32" $"inttype"
		| "double" ws $$"double" $"nil" $"typecall"
		| "string" ws $$"string" $"nil" $"typecall"
		| "flow" ws $$"flow" $"nil" $"typecall"
		| "void" ws $$"void" $"nil" $"typecall"
		| "native" ws $$"native" $"nil" $"typecall"
		| "ref" ws type $"list1" $$"ref" $"swap" $"typecall"
		| id ws typars $"typecall"
		| id ws $"nil" $"typecall"
		| "[" ws type "]" ws $"list1" $$"array" $"swap" $"typecall"
		| $("?"+) $"nil" $"typecall"
		| "(" ws types ")" ws "->" type $"fntype"
	;

typars = "<" ws types ">" ws;

types = $"nil" type $"cons" ("," ws type $"cons")* ("," ws)?
	| $"nil";

funargs = $"nil" (id ws $"cons")*;

expsemis = $"nil" exp $"cons" (";" ws exp $"cons")* (";" ws)?
	| $"nil";

exps = $"nil" exp $"cons" ("," ws exp $"cons")* ("," ws)?
	| $"nil";


id = $bid;

bid = ('a'-'z' | 'A'-'Z' | '_') ('a'-'z' | 'A'-'Z' | '0'-'9' | '_')*;

int = $'0'-'9'+;

ws = s*;
s = " " | "	" | "
";
flow
