import mini/exp/exp;
import ds/array;

export {
	getMiniInt(m : MiniExp) -> int;
	getMiniDouble(m : MiniExp) -> double;
	getMiniString(m : MiniExp) -> string;
	getMiniArray(m : MiniExp) -> [MiniExp];

	isMiniInt(m : MiniExp) -> bool;
	isMiniDouble(m : MiniExp) -> bool;
	isMiniString(m : MiniExp) -> bool;
}

getMiniInt(m : MiniExp) -> int {
	switch (m) {
		MiniInt(i, __, __): i;
		default: 0;
	}
}

getMiniDouble(m : MiniExp) -> double {
	switch (m) {
		MiniDouble(d, __): d;
		default: 0.0;
	}
}

getMiniString(m : MiniExp) -> string {
	switch (m) {
		MiniString(s, __): s;
		default: "";
	}
}

getMiniArray(m : MiniExp) -> [MiniExp] {
	list2array(reverseList(miniArray2list(makeList(), m)))
}

miniArray2list(acc : List<MiniExp>, m : MiniExp) -> List<MiniExp> {
	switch (m) {
		MiniCall(fn, args, __, __): {
			switch (fn) {
				MiniVar(id, __, __): {
					if (id == "nil") acc
					else if (id == "cons") {
						miniArray2list(Cons(args[0], acc), args[1])
					} else acc;
				}
				default: acc;
			}
		}
		default: acc;
	}
}

isMiniInt(m : MiniExp) -> bool {
	switch (m) {
		MiniInt(i, __, __): true;
		default: false;
	}
}

isMiniDouble(m : MiniExp) -> bool {
	switch (m) {
		MiniDouble(d, __): true;
		default: false;
	}
}

isMiniString(m : MiniExp) -> bool {
	switch (m) {
		MiniString(i, __): true;
		default: false;
	}
}
