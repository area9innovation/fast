flow = '\uFEFF'? ws importExport* toplevelDeclaration* $"popfile";

importExport = import
	| dynamicImport
	| export
	| forbid;

// TODO: We should set some marker that a new file is started, instead of immediately adding the parse
import = "import" s $path ws ';' ws $$".flow" $"changeFileExt" $"parsefile";

dynamicImport = "require" s $path ws ';' ws; // TODO: AST

// TODO: AST. We could set some marker that the following are exported.
export = "export" ws '{' ws toplevelDeclaration+ '}' ws; 
forbid = "forbid" s $path ws ';' ws; // TODO: AST
	path = bid ('/' bid)*;

toplevelDeclaration = 
	native
	| assign
	| union
	| functionOrStruct
	| vardecl;

native = "native" s id ws ':' $$"__native" $"var" ws $$"1" $"s2i" $"nil" ("io" ws $$"io" $"cons")? $"isnil" $"-" type $"list2" '=' ws $name $"cons" ws ';' ws $"call" $$"native" $"swap" $"setannotation";
	name = bid ('.' bid)*;

assign = id ws '=' ws exp ';'? ws $"define";

union = id ws typars "::=" ws typenames ';' ws $"uniondef";

	// listof(typename, ",")
	typenames = $"nil" typename $"cons" ("," ws typename $"cons")* ("," ws)? | $"nil";

// For now, we ignore the types
// TODO: Extract the type and use a binop to declare the type of the body
functionOrStruct = 
	// Forward declaration - we drop for now
	  id ws '(' ws funargs ')' ws returnType $"drop" ';' ws $"drop" $"drop"
	//  id ws '(' ws funargs ')' ws returnType $"drop" ';' ws $"nil" $$";" $"var" $"call" $"lambda" $"define"	// We leave the body nil
	| id ws '(' ws structargs ')' ws ';' ws $"structdef" // This is a struct!
	| id ws '(' ws funargs ')' ws returnType $"drop" brace $"lambda" $"define"
	| id ws '(' ws funargs ')' ws brace $"lambda" $"define"
	| id ws '(' ws funargs ')' ws exp ';'? ws $"lambda" $"define"

	// Forward type declarations
	| id ws ':' ws '(' ws funargs ')' ws returnType $"drop" $"drop" $"drop" ';' ws // We ignore the forward declaration for now
	| id ws ':' ws '(' ws types ')' ws returnType $"drop" $"drop" $"drop" ';' ws // We ignore the forward declaration for now
	// Struct
	| id ws ':' ws '(' ws structargs ')' ws ';' ws $$"structdef"
	;

	// listof(funarg, ",")
	funargs = $"nil" funarg $"cons" ("," ws funarg $"cons")* ("," ws)? | $"nil";

	// For now, we just drop the types
	funarg = id ws (':' ws type $"drop")?;

	// listof(funarg, ",")
	structargs = $"nil" structarg $"cons" ("," ws structarg $"cons")* ("," ws)? | $"nil";
	structarg = $"nil" ("mutable" !letterOrDigit ws $$"mutable" $"cons")? $"isnil" id $"swap" $"list2" ws ':' ws type $"cons" $$"__structarg" $"var" $"swap" $"call";

	returnType = ws "->" ws type;

vardecl = id ws ':' ws type '=' ws exp ';'? ws  $"swap" $$":" $"binop" $"define"
	// TODO: AST, and how to do it? We just drop for now
	| id ws ':' ws type ';'? ws $"drop" $"drop";

exp = 
	backslash lambdaargs ws "->" ws exp $"lambda"
	|> (
		id ws "=" ws exp ";" ws semiexps $"let"
	 	| id ws ":" ws type "=" ws  exp ";" $"swap" $$":" $"binop" ws semiexps $"let"
	)
	|> exp ":=" ws exp $$":=" $"binop"
	|> exp "|>" ws exp $$"|>" $"binop"	// TODO: Should we desugar this here?
	|> exp "||" ws exp $$"||" $"binop"
	|> exp "&&" ws exp $$"&&" $"binop"
	|> (
		exp "==" ws exp $$"==" $"binop"
		| exp "!=" ws exp $$"!=" $"binop"
		| exp "<=" ws exp $$"<=" $"binop"
		| exp "<" ws exp $$"<" $"binop"
		| exp ">=" ws exp $$">=" $"binop"
		| exp ">" ws exp $$">" $"binop"
	)
	|> (exp "+" ws exp $$"+" $"binop"
		| exp "-" ws exp $$"-" $"binop"
	)
	|> (exp "*" ws exp $$"*" $"binop"
		| exp "/" ws exp $$"/" $"binop"
		| exp "%" ws exp $$"%" $"binop"
	)
	|> (
		exp "??" ws exp $"list2" ":" ws exp $"cons" $$"__maybe" $"var" $"swap" $"call"
	)
	|> (
		'!' ws exp $$"!" $"unop"
		| '-' ws exp $$"__neg" $"unop"
		| exp 
			(
			"(" ws exps ")" ws $"call"
			| '(' ws exp "with" s $"list2" fields $"cons" ')' ws $$"__with" $"var" $"swap" $"call"
			| "." ws id ws $"list2" "::=" ws exp $"cons" $$"__mutassign" $"swap" $"call"
			| "." ws id ws $$"." $"binop"
			| "[" ws exp "]" ws $$"__index" $"binop"
			| ":" ws type $$":" $"binop"
			)+
	)
	|> (
		"(" ws exp ")" ws 
		| "true" !letterOrDigit ws $"1" $$"bool" $"type0" $$":" $"binop"
		| "false" !letterOrDigit ws $"0" $$"bool" $"type0" $$":" $"binop"
		| "ref" !letterOrDigit ws exp $$"__ref" $"unop"
		| switch
		| "cast" !letterOrDigit ws $$"__cast" $"var" $"nil" '(' ws exp $"cons" "->" ws type $"cons" ')' ws $"call"
		| "if" !letterOrDigit ws "(" $"nil" exp $"cons" ")" ws exp $"cons" "else" ws exp $"cons" $$"__ifte" $"var" $"swap" $"call"
		| "if" !letterOrDigit ws "(" $"nil" exp $"cons" ")" ws exp $"cons" $$"__ift" $"var" $"swap" $"call"
		| id ws $"var"
		| "0x" $(hexdigit+) ws $"parsehex"
		| $('0'-'9'+ "." '0'-'9'*) ws $"s2d"
		| $("." '0'-'9'+) ws $"s2d"
		| int ws $"s2i"
		| brace
		| string
		| "[" ws expcommas "]" ws $$"[" $"unop"
		| "[" ws "]" ws $$"__emptyarray" $"var" $"nil" $"call"
		| '^' ws exp $$"__deref" $"unop"
	);

	// listof(fieldassign, ",")
	fields = $"nil" fieldassign $"cons" ("," ws fieldassign $"cons")* | $"nil";
		fieldassign = id ws '=' ws exp $$"__withassign" $"binop";

brace = "{" ws exp (";" ws exp $$";" $"binop")* (";" ws)? "}" ws 
	| "{" ws "}" ws $$"__void" $"var" $"nil" $"call";

expcommas = exp ("," ws exp $$"," $"binop")* ("," ws)?;

semiexps = exp (";" ws exp $$";" $"binop")*;

switch = "switch" !letterOrDigit ws '(' ws exp ')' ws '{' ws cases '}' ws $$"__switch" $"binop";

cases = defaultOrNamedCase (defaultOrNamedCase $$"__or" $"binop")+ | $$"__void" $"var" $"nil" $"call";

defaultOrNamedCase = 
	"default" !letterOrDigit ws ':' ws exp (';' ws)? $$"__defaultcase" $"unop"
	| id ws '(' ws names ')' ws ':' ws exp (';' ws)? $"case";

names = $"nil" id $"cons" ("," ws id $"cons")* | $"nil";

type = 	
		"bool" !letterOrDigit ws $$"bool" $"type0"
		| "int" !letterOrDigit ws $$"int" $"type0"
		| "double" !letterOrDigit ws $$"double" $"type0"
		| "string" !letterOrDigit ws $$"string" $"type0"
		| "flow" !letterOrDigit ws $$"flow" $"type0"
		| "void" !letterOrDigit ws $$"void" $"type0"
		| "native" !letterOrDigit ws $$"native" $"type0"
		| "ref" !letterOrDigit ws type $$"ref" $"type1"

		| "(" ws namedargs ")" ws "->" ws type $"fntype"
		| "(" ws types ")" ws "->" ws type $"fntype"
		| typename

		| "[" ws type "]" ws $$"array" $"type1"

		| $("?"+) ws $"type0"
	;

typename = id $"var" ws typars $"call"; 

typars = "<" ws types ">" ws
	| $"nil";

// listof(type, ",")
types = $"nil" type $"cons" ("," ws type $"cons")* ("," ws)? | $"nil";

	// listof(namedargs, ",")
	namedargs = $"nil" namedarg $"cons" ("," ws namedarg $"cons")* ("," ws)? | $"nil";

	// For now, we just drop the id
	namedarg = id $"drop" ws ':' ws type;

// listof(lambdaarg)
lambdaargs = $"nil" lambdaarg $"cons" ("," ws lambdaarg $"cons")* ("," ws)? | $"nil";

	// We just drop the type for now
	lambdaarg = funarg;

// listof(exp, ",")
exps = $"nil" exp $"cons" ("," ws exp $"cons")* ("," ws)? | $"nil";


string = '"' "#inc" "lude" s path '"' ws   // TODO: AST
	| singlestring
// 	| $"nil" (singlestring $"cons")+ $"concatStrings"
	;

singlestring = '"' $(onechar_)* '"' ws;

onechar_ = backslash "u" hexdigit hexdigit hexdigit hexdigit
	| backslash "X" hexdigit hexdigit hexdigit hexdigit
	| backslash "x" hexdigit hexdigit
	| backslash escapedchar_
	| !'"' !backslash anychar;

hexdigit = '0'-'9'
	| 'a'-'f'
	| 'A'-'F';

escapedchar_ = backslash | '"' | "n" | "t" | "r";

anychar = '0x0000'-'0xffff';

id = $bid;

bid = ('a'-'z' | 'A'-'Z' | '_') (letterOrDigit)*;

letterOrDigit = 'a'-'z'
	| 'A'-'Z'
	| '_'
	| '0'-'9';


int = $'0'-'9'+;

backslash = '\';

ws = cs*;

s = cs+;

// We do not have \n and \t and such, so these are here verbatim
cs = " " | "	" | "
" | "//" (!"
" anychar)* "
" | "/*" (!"*/" anychar)* "*/";
flow
