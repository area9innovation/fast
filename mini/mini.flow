import mini/commands/init;
import mini/commands/process;

import mini/backends/flow;
import mini/backends/js;
import mini/backends/pretty;

main() {
	files = getFilesToCompile();
	if (files == []) {
		printHelp();
	}

	output = getUrlParameterDef("output", "output");

	verbose = s2i(getUrlParameterDef("verbose", "0"));

	db0 = makeMiniDb(["", ".","c:\\flow9\\lib\\", "c:\\flow9"], println);

	db = miniEvalForths("", db0, ["prepflow"]);

	miniProcessCommand(db, make(""), \fdb -> {
		cdb = fold(files, fdb, \acc, file -> miniEvalForths(file, acc, [toString(file), "parsefile"]));

		miniProcessCommand(cdb, make(""), \tdb -> {
			program = miniAst2BProgram(tdb.program);

			if (verbose > 1) {
				println("\nMini declarations after type checking:");
				traverseInOrder(tdb.program.declarations, \st, val -> {

					deps = getMiniDependencies(tdb.program.idDependents, st, false);

					mtype = lookupTree(tdb.program.types, st);

					typeString = mtype ?? {
						" : " + miniType2string(mtype)
					} : "";
					println(st  + typeString + " =\n\t" + miniPretty(val) + " Â« " + strGlue(set2array(deps), ", "));
				});
			};

			if (verbose > 1) {
				println("\nUnions:");
				traverseInOrder(tdb.program.unions, \name, union -> {
					println(name + " : " + toString(union));
				});
				println("\nStructs:");
				traverseInOrder(tdb.program.structs, \name, struct -> {
					println(name + " : " + toString(struct));
				});
			};
			if (verbose > 1) {
				println("\nTypes:");
				traverseInOrder(tdb.program.types, \name, type -> {
					println(name + " : " + miniType2string(type));
				});
			};

			if (verbose > 0) {
				// Print the typed backend representation here
				println("\nBackend after type checking:");
				println(prettyBProgram(program));
			};

			flowprogram = bprogram2flow(program);
			jsprogram = bprogram2js(program);
			setFileContent(changeFileExt(output, ".flow"), flowprogram);
			setFileContent(changeFileExt(output, ".js"), jsprogram);

			if (verbose > 1) {
				println("\nFlow output:");
				println(flowprogram);
			};

			if (verbose > 1) {
				println("\nJS output:");
				println(jsprogram);
			};

			quit(0);
		});

	});
}

getFilesToCompile() -> [string] {
	file0 = getUrlParameter("file");
	//file0 = getUrlParameterDef("file", "demos/euler/euler10.flow");

	// We support test=1-5, test=6, test=-10  and such to compile flowc test cases
	test = getUrlParameter("test");
	bounds = parseNumberBound(test);

	files0 = if (test != "") {
		folder = if (bounds != Pair(0,0)) "c:/flow9/tools/flowc/tests" else test;
		filtermap(readDirectory(folder), \file -> {
			fileno = s2i(strRight(file, 4));
			if (endsWith(file, ".flow") && (bounds == Pair(0, 0) || (fileno != 0 && bounds.first <= fileno && fileno <= bounds.second))) {
				Some(pathCombine(folder, file))
			} else None();
		})
	} else if (file0 == "") []
	else [file0];

	map(files0, \file -> {
		if (fileExists(file)) file else changeFileExt(file, ".flow")
	})
}

parseNumberBound(s : string) -> Pair<int, int> {
	if (strContains(s, "-")) {
		numbers = strSplit(s, "-");
		Pair(s2i(numbers[0]), if (length(numbers) < 2) 1000000 else s2i(numbers[1]));
	} else if (i2s(s2i(s)) == s) {
		Pair(s2i(s), s2i(s))
	} else Pair(0, 0)
}

printHelp() -> void {
	println("mini file=filename.flow");
	println("   debug=1                     Follow the compilation process for all ids");
	println("   debug=id1,id2               Follow the compilation process for id1, id2");
	println("   stages=parse,ct,type,constrain,coalesce,lower");
	println("        With debug, follow the compilation process for these stages");
}
