import mini/commands/init;
import mini/commands/process;

import mini/backends/flow;
import mini/backends/js;
import mini/backends/pretty;

main() {
	file = getUrlParameterDef("file", "mini/tests/test.flow");
	//file = getUrlParameterDef("file", "demos/euler/euler3.flow");
	output = getUrlParameterDef("output", "output");

	verbose = s2i(getUrlParameterDef("verbose", "2"));

	db0 = makeMiniDb([".","c:\\flow9\\lib\\", "c:\\flow9"], println);

	db = miniEvalForths("", db0, ["prepflow"]);

	miniProcessCommand(db, make(""), \fdb -> {
		cdb = miniEvalForths(file, fdb, [toString(file), "parsefile"]);

		miniProcessCommand(cdb, make(""), \tdb -> {
			program = miniAst2BProgram(tdb.program);

			if (verbose > 2) {
				println("\nDeclarations after type checking:");
				traverseInOrder(tdb.program.declarations, \st, val -> {

					deps = getMiniDependencies(tdb.program.idDependents, st, false);

					mtype = lookupTree(tdb.program.types, st);

					typeString = mtype ?? {
						" : " + miniType2string(mtype)
					} : "";
					println(st  + typeString + " =\n\t" + miniPretty(val) + " Â« " + strGlue(set2array(deps), ", "));
				});
			};

			if (verbose > 1) {
				println("\nUnions:");
				traverseInOrder(tdb.program.unions, \name, union -> {
					println(name + " : " + toString(union));
				});
				println("\nStructs:");
				traverseInOrder(tdb.program.structs, \name, struct -> {
					println(name + " : " + toString(struct));
				});
				println("\nTypes:");
				traverseInOrder(tdb.program.types, \name, type -> {
					println(name + " : " + miniType2string(type));
				});

			}

			if (verbose > 0) {
				// Print the typed backend representation here
				println("\nBackend after type checking:");
				println(prettyBProgram(program));
			};

			flowprogram = bprogram2flow(program);
			jsprogram = bprogram2js(program);
			setFileContent(changeFileExt(output, ".flow"), flowprogram);
			setFileContent(changeFileExt(output, ".js"), jsprogram);

			if (verbose > 1) {
				println("\nFlow output:");
				println(flowprogram);
			};

			if (verbose > 0) {
				println("\nJS output:");
				println(jsprogram);
			};

			quit(0);
		});

	});
}
