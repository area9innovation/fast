import mini/backends/bprogram;
import mini/backends/back_eval;
import text/blueprint;

export {
	bprogram2flow(b : BProgram) -> string;

	bdeclaration2flow(b : BDeclaration) -> string;
}

bprogram2flow(b : BProgram) -> string {
	superglue(b.declarations, bdeclaration2flow, "\n");
}

bdeclaration2flow(b : BDeclaration) -> string {
	switch (b) {
		BFunction(name, args, body, type): {
			blueprint("
				%name%(%args%) {
					%body%
				} // %type%", [
				"name", name,
				"args", superglue(args, \fa -> fa.name, ", "),
				"body", bstatement2flow(flowBackend(), body),
				"type", mtype2flow(type)
			]);
		}
		BGlobalVar(name, body, __): name + " = " + bexp2flow(flowBackend(), body) + ";";
		BNative(name, isIo, type, nativeName): "native " + name + " : " 
			+ (if (isIo) "io" else "") + mtype2flow(type) + " = " + nativeName + ";";
		BComment(comment): comment;
	}
}

bstatement2flow(backend : Backend, b : BStatement) -> string {
	switch (b) {
		BIfStatement(cond, then, else_): {
			blueprint("
				if (%cond%) {
					%then%
				} else {
					%else%
				}", [
				"cond", bexp2flow(backend, cond),
				"then", bstatement2flow(backend, then),
				"else", bstatement2flow(backend, else_),
			])
		}
		BLetStatement(name, value, body): {
			blueprint("
				%name% = %value%;
				%body%", [
					"name", name,
					"value", bexp2flow(backend, value),
					"body", bstatement2flow(backend, body),
			])
		}
		BReturnVoid(): "{}";
		BReturn(val): bexp2flow(backend, val);
		BSequenceStatement(statements): {
			"{" + superglue(statements, \s -> bstatement2flow(backend, s), ";\n") + "}";
		}
		BComment(comment): comment;
	}
}

bexp2flow(backend : Backend, b : BExp) -> string {
	switch (b) {
		BValue(): bvalue2flow(b);
		BVar(name, type): name + " /* " + mtype2flow(type) + " */";
		BLet(name, value, body, type): {
			blueprint("
				%name% : %type% = %value%;
				%body%", [
					"name", name,
					"type", mtype2flow(type),
					"value", bexp2flow(backend, value),
					"body", bexp2flow(backend, body),
			])
		}
		BLambda(args, body, type): "\\" + superglue(args, \fa -> fa.name, ", ") + " /* " + mtype2flow(type) + " */ -> " + bexp2flow(backend, body);
		// TODO: Do not construct the backend again and again
		BCall(fn, args, type): produceBackendCall(backend, b, bexp2flow) + " /* " + mtype2flow(type) + "*/";
		BIf(cond, then, else_, type): "if (" + bexp2flow(backend, cond) + ") {" + bexp2flow(backend, then) + "} else {" + bexp2flow(backend, else_) + "}" + " /* " + mtype2flow(type) + "*/";
		BSequence(statements, type): {
			"{" + superglue(statements, \s -> bexp2flow(backend, s), "; ") + "}" + " /* " + mtype2flow(type) + "*/";
		}
		BComment(comment): comment + "\n";
	}
}

bvalue2flow(b : BValue) -> string {
	switch (b) {
		BInt(value, type): if (type == MiniType2Int(1)) b2s(i2b(value)) else i2s(value);
		BDouble(value): d2s(value);
		BString(value): toString(value);
	}
}

mtype2flow(f : MiniType2) -> string {
	switch (f) {
		MiniType2Int(bits): if (bits == 0) "void" else if (bits == 1) "bool" else "int";
		MiniType2Function(args, returnType): "(" + superglue(args, mtype2flow, ", ") + ")->" + mtype2flow(returnType);
		MiniType2Call(id, typars): {
			if (id == "__ref") "ref " + mtype2flow(typars[0]) 
			else id + if (typars != []) "<" + superglue(typars, mtype2flow, ", ") + ">" else "";
		}
		MiniType2Var(id): "Î±" + i2s(id);
		MiniType2Par(id):  id;
		MiniType2Record(fields): "{" + superglue(fields, \fl -> fl.name + ":" + mtype2flow(fl.type), ", ") + "}";
	}
}

flowBackend() -> Backend {
	makeBackend("flow", 
		// Keywords
		[
			"import", "export", "require", "forbid", "native", "io",
			"mutable", "bool", "int", "double", "string", "flow",
			"void", "ref", "if", "else", "with", "cast", "unsafe",
			"switch", "default",
		], 
		// Inlined operators
		map([
			Pair("||", 10),

			Pair("&&", 20),

			Pair("==", 30),
			Pair("!=", 30),

			Pair("<=", 30),
			Pair("<", 30),
			Pair(">=", 30),
			Pair(">", 30),

			Pair("+", 40),
			Pair("-", 40),

			Pair("*", 50),
			Pair("/", 50),
			Pair("%", 50),
		], \p -> {
			BackGen(p.first, miniTypeVoid, BackBinOp(p.first, p.second, BackArg(0), BackArg(1)))
		})
	);
}
