import mini/backends/bprogram;
import mini/backends/back_eval;
import mini/backends/bprogram_lower;
import mini/backends/js_natives;
import mini/types/builtin;
import text/blueprint;

export {
	bprogram2js(b : BProgram) -> string;
}

bprogram2js(b : BProgram) -> string {
	backend = jsBackend();
	body = superglue(b.declarations, \d : BDeclaration -> bdeclaration2js(backend, d), "\n");

	getBackendRequirements(backend)
	+ body
	+ "\nmain()";
}

bdeclaration2js(backend : Backend, b : BDeclaration) -> string {
	switch (b) {
		BFunction(name, args, body, tailcall, __): {
			if (tailcall) {
				blueprint("
					function %name%(%args%) {
						T:  while(true) {
							%body%
						}
					}", [
					"name", name,
					"args", superglue(args, \fa -> fa.name, ", "),
					"body", bstatement2js(backend, body, true)
				]);
			} else {
				blueprint("
					function %name%(%args%) {
						%body%
					}", [
					"name", name,
					"args", superglue(args, \fa -> fa.name, ", "),
					"body", bstatement2js(backend, body, true)
				]);
			}
		}
		BGlobalVar(name, body, __): "var " + name + " = " + bexp2js(backend, body) + ";";
		BNative(name, isIo, type, nativeName, mfallback): {
			generated = produceBackendNative(backend, nativeName);
			if (generated == "") {
				mfallback ?? {
					bdeclaration2js(backend, mfallback);
				}: {
					backend.onError(0, "native " + nativeName + " not implemented");
					nativeName
				}
			} else {
				"var " + name + " = " + generated + ";"
			}
		}
	}
}

bstatement2js(backend : Backend, b : BStatement, withReturn : bool) -> string {
	switch (b) {
		BIfStatement(cond, then, else_): {
			if (!withReturn && else_ == BReturnVoid()) {
				blueprint("
					if (%cond%) {
						%then%
					}", [
					"cond", bexp2js(backend, cond),
					"then", bstatement2js(backend, then, withReturn),
				])
			} else {
				blueprint("
					if (%cond%) {
						%then%
					} else {
						%else%
					}", [
					"cond", bexp2js(backend, cond),
					"then", bstatement2js(backend, then, withReturn),
					"else", bstatement2js(backend, else_, withReturn),
				])

			}
		}
		BLetStatement(name, value, body): {
			blueprint("
				var %name% = %value%;
				%body%", [
					"name", name,
					"value", bexp2js(backend, value),
					"body", bstatement2js(backend, body, withReturn),
			])
		}
		BReturnVoid(): if (withReturn) "return;" else "";
		BReturn(val): {
			(if (withReturn) "return " else "") + bexp2js(backend, val) + ";";
		}
		BTailCall(fn, args, values): {
			/*
				var $a_=((start+1)|0);
				start=$a_;
				continue T*/
			if (length(args) == 1) {
				blueprint("
					%arg% = %value%;
					continue T;
				", ["arg", args[0],
					"value", bexp2js(backend, values[0])])
			} else {
				// Define tmps
				supergluei(values, \i, value -> {
					"var $a" + i2s(i) + "=" + bexp2js(backend, value)
				}, ";")
				+ ";" + supergluei(args, \i, arg -> {
					arg + "=" + "$a" + i2s(i);
				}, ";")
				+ ";continue T";
			}
		}
		BSequenceStatement(statements): {
			supergluei(statements, \i, stat -> {
				bstatement2js(backend, stat, withReturn && i == length(statements) - 1)
			}, "\n");
		}
		BSwitchStatement(val, cases, type): {
			blueprint("
				switch (%val%) {
					%cases%
				}", [
					"val", bexp2js(backend, val),
					"cases", superglue(cases, \c -> {
						caseval = bexp2js(backend, c.value);
						(if (caseval == "default") caseval else "case " + caseval)
						 + ": " + bstatement2js(backend, c.body, withReturn)
					}, "\n"),
			])
		}
	}
}

bexp2js(backend : Backend, b : BExp) -> string {
	switch (b) {
		BValue(): bvalue2js(b);
		BVar(name, __): name;
		BLet(name, value, body, __): {
			blueprint("
				function() {
				var %name% = %value%;
				%body%
				}()", [
					"name", name,
					"value", bexp2js(backend, value),
					"body", bstatement2js(backend, bexp2BReturn(body), true),
			])
		}
		BLambda(args, body, __): {
			"function(" 
			+ superglue(args, \fa -> fa.name, ", ") + ") {" 
			+ bstatement2js(backend, bexp2BReturn(body), true)
			+ "}"
		};
		BCall(fn, args, restype): {
			produceBackendCall(backend, b, bexp2js);
		}
		BIf(cond, then, else_, __): "(" + bexp2js(backend, cond) + " ? " + bexp2js(backend, then) + " : " + bexp2js(backend, else_) + ")";
		BSequence(statements, __): {
			if (statements == []) {
				"null"
			} else {
				"(" + superglue(statements, \s -> bexp2js(backend, s), ", ") + ")";
			}
		}
		BSwitch(val, cases, type): {
			"function() {" 
			+ bstatement2js(backend, bexp2BReturn(b), true)
			+ "}()"
		}
	}
}

bvalue2js(b : BValue) -> string {
	switch (b) {
		BInt(value, type): {
			if (type == MiniTypeInt(0)) "null"
			else if (type == MiniTypeInt(1)) b2s(i2b(value)) 
			else i2s(value);
		}
		BDouble(value): d2s(value);
		BString(value): toString(value);
	}
}
