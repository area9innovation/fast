import mini/backends/bprogram;
import mini/backends/operators;
import text/blueprint;

export {
	bprogram2js(b : BProgram) -> string;
}

bprogram2js(b : BProgram) -> string {
	superglue(b.declarations, bdeclaration2js, "\n");
}

bdeclaration2js(b : BDeclaration) -> string {
	switch (b) {
		BFunction(name, args, body, __): {
			blueprint("
				function %name%(%args%) {
					%body%
				}", [
				"name", name,
				"args", superglue(args, \fa -> fa.name, ", "),
				"body", bstatement2js(body, true)
			]);
		}
		BGlobalVar(name, body, __): "var " + name + " = " + bexp2js(body) + ";";
		BComment(comment): comment;
	}
}

bstatement2js(b : BStatement, withReturn : bool) -> string {
	switch (b) {
		BIfStatement(cond, then, else_): {
			blueprint("
				if (%cond%) {
					%then%
				} else {
					%else%
				}", [
				"cond", bexp2js(cond),
				"then", bstatement2js(then, withReturn),
				"else", bstatement2js(else_, withReturn),
			])
		}
		BLetStatement(name, value, body): {
			blueprint("
				var %name% = %value%;
				%body%", [
					"name", name,
					"value", bexp2js(value),
					"body", bstatement2js(body, withReturn),
			])
		}
		BReturnVoid(): if (withReturn) "return;" else "";
		BReturn(val): (if (withReturn) "return " else "") + bexp2js(val) + ";";
		BSequenceStatement(statements): {
			"{" + supergluei(statements, \i, stat -> {
				bstatement2js(stat, i == length(statements) - 1)
			}, "\n") + "}";
		}
		BComment(comment): comment;
	}
}

bexp2js(b : BExp) -> string {
	switch (b) {
		BValue(): bvalue2js(b);
		BVar(name, __): name;
		BLet(name, value, body, __): {
			blueprint("
				function() {
				var %name% = %value%;
				%body%
				}()", [
					"name", name,
					"value", bexp2js(value),
					"body", bexp2js(body),
			])
		}
		BLambda(args, body, __): "function(" 
			+ superglue(args, \fa -> fa.name, ", ") + ") {" 
			+ bstatement2js(BReturn(body), true)
			+ "}"
		;
		BCall(fn, args, __): produceCallOrBinOp(b, bexp2js);
		BIf(cond, then, else_, __): "(" + bexp2js(cond) + " ? " + bexp2js(then) + " : " + bexp2js(else_) + ")";
		BSequence(statements, __): {
			"(" + superglue(statements, bexp2js, ", ") + ")";
		}
		BComment(comment): comment + "\n";
	}
}

bvalue2js(b : BValue) -> string {
	switch (b) {
		BInt(value, type): if (type == MiniType2Int(1)) b2s(i2b(value)) else i2s(value);
		BDouble(value): d2s(value);
		BString(value): toString(value);
	}
}
