import mini/backends/bprogram;
import mini/types/pretty;

export {
	prettyBProgram(p : BProgram) -> string;
	prettyBExpProgram(p : BExpProgram) -> string;
	prettyBExp(b : BExp) -> string;
}

prettyBProgram(p : BProgram) -> string {
	superglue(p.declarations, prettyBDeclaration, "\n");
}

prettyBExpProgram(p : BExpProgram) -> string {
	superglue(p.declarations, prettyBExpDeclaration, "\n");
}

prettyBExpDeclaration(b : BExpDeclaration) -> string {
	switch (b) {
		BExpFunction(name, args, body, type): {
			blueprint("
				%header% {
					%body%
				}
			", [
				"header", name + "(" + superglue(args, \a -> a.name , ", ") + ") : " + miniType2string(type),
				"body", prettyBExp(body)
			])
		}
		BGlobalVar(name, body, type): {
			name + " : " + miniType2string(type) + " = " + prettyBExp(body);
		}
		BExpNative(name, isio, type, nativeName, mfallback): {
			"native " + name + " : " + (if (isio) "io" else "") + miniType2string(type) + " = " + nativeName
			+ (mfallback ?? (" with " + prettyBExpDeclaration(mfallback)) : "");
		}
	}
}


prettyBDeclaration(b : BDeclaration) -> string {
	switch (b) {
		BFunction(name, args, body, tc, type): {
			blueprint("
				%header% {
					%body%
				}
			", [
				"header", (if (tc) "tailcall " else "") + name + "(" + superglue(args, \a -> a.name , ", ") + ") : " + miniType2string(type),
				"body", prettyBStatement(body)
			])
		}
		BGlobalVar(name, body, type): {
			name + " : " + miniType2string(type) + " = " + prettyBExp(body);
		}
		BNative(name, isio, type, nativeName, mfallback): {
			"native " + name + " : " + (if (isio) "io" else "") + miniType2string(type) + " = " + nativeName
			+ (mfallback ?? (" with " + prettyBDeclaration(mfallback)) : "");
		}
	}
}

prettyBStatement(b : BStatement) -> string {
	switch (b) {
		BIfStatement(cond, then, else_): {
			blueprint("
				if (%cond%) {
					%then%
				} else {
					%else%
				}", [
				"cond", prettyBExp(cond),
				"then", prettyBStatement(then),
				"else", prettyBStatement(else_),
			])
		}
		BLetStatement(name, value, body): {
			blueprint("
				%name% = %value%;
				%body%", [
					"name", name,
					"value", prettyBExp(value),
					"body", prettyBStatement(body),
			])
		}
		BReturnVoid(): "{}";
		BReturn(val): prettyBExp(val);
		BTailCall(fn, args, values, type): "tailcall " + fn + "(" + supergluei(args, \i, arg -> arg + ":" + prettyBExp(values[i]), ", ") + ")";
		BSequenceStatement(statements): {
			"{" + superglue(statements, \s -> prettyBStatement(s), ";\n") + "}";
		}
		BSwitchStatement(val, cases, type): {
			blueprint("
				switch (%val%) {
					%cases%
				} : %type%", [
					"val", prettyBExp(val),
					"cases", superglue(cases, \c -> {
						blueprint("
							%value%: {
								%body%
							}
							",
							["value", prettyBExp(c.value),
							"body", prettyBStatement(c.body)
						])
					}, ""),
					"type", miniType2string(type),
			])
		}
	}
}

prettyBExp(b : BExp) -> string {
	switch (b) {
		BValue(): prettyBValue(b);
		BVar(name, type): name + " ·" + miniType2string(type) + "·";
		BLet(name, value, body, type): {
			blueprint("
				%name% = %value%;
					%body%
				·%type%·", [
					"name", name,
					"type", miniType2string(type),
					"value", prettyBExp(value),
					"body", prettyBExp(body),
			])
		}
		BLambda(args, body, type): "\\" + superglue(args, \fa -> fa.name, ", ") + " ·" + miniType2string(type) + "· -> " + prettyBExp(body);
		BCall(fn, args, type): {
			def = \ -> {
				prettyBExp(fn) + "(" + superglue(args, prettyBExp, ", ") + ") ·" + miniType2string(type) + "·";
			};
			switch (fn) {
				BVar(fname, ftype): {
					if (fname == ";") {
						prettyBExp(args[0]) + ";" + prettyBExp(args[1]) + " : " + miniType2string(type);
					} else {
						fname + "(" + superglue(args, prettyBExp, ", ") + ") ·" + miniType2string(type) + "·";
					}
				}
				default: def();
			}
		}
		BIf(cond, then, else_, type): {
			"if (" + prettyBExp(cond) + ") {" + prettyBExp(then) + "} else {" + prettyBExp(else_) + "}" + " ·" + miniType2string(type) + "·";
		}
		BSequence(statements, type): {
			"{" + superglue(statements, \s -> prettyBExp(s), ";\n") + "}" + " ·" + miniType2string(type) + "·";
		}
		BSwitch(val, cases, type): {
			blueprint("
				switch (%val%) {
					%cases%
				} : %type%", [
					"val", prettyBExp(val),
					"cases", superglue(cases, \c -> {
						blueprint("
							%value%: {
								%body%
							}
							",
							["value", prettyBExp(c.value),
							"body", prettyBExp(c.body)
						])
					}, ""),
					"type", miniType2string(type),
			])
		}
	}
}

prettyBValue(b : BValue) -> string {
	switch (b) {
		BInt(value, type): {
			if (type == MiniTypeInt(1)) b2s(i2b(value)) 
			else if (type == MiniTypeInt(0)) "{}"
			else i2s(value);
		}
		BDouble(value): d2s(value);
		BString(value): toString(value);
	}
}
