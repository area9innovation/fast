import mini/mini_db;

export {
	// Find an order that respects topological order
	topologicalMiniOrder(ast : MiniAst, ids : Set<string>) -> [string];
}

MiniTopological(
	ast : MiniAst,
	queue : Set<string>,
	visited : Set<string>,
	graph : SimpleGraph<string, bool>
);

topologicalMiniOrder(ast : MiniAst, ids : Set<string>) -> [string] {
	graph = buildMiniGraph(MiniTopological(ast, ids, makeSet(), makeSimpleGraph()));

	order = topoSortSimpleGraph(graph.graph);
	filter(order, \dep -> {
		containsSet(ids, dep)
	});
}

buildMiniGraph(acc : MiniTopological) -> MiniTopological {
	mp = popMinSet(acc.queue);
	mp ?? {
		id = mp.value;
		nacc = MiniTopological(acc with queue = mp.rest);
		if (containsSet(acc.visited, id)) {
			buildMiniGraph(nacc);
		} else {
			deps = lookupMultimap(acc.ast.dependents, id);
			ngraph = foldSet(deps, acc.graph, \acc2 : SimpleGraph<string, bool>, dep : string -> {
				if (containsSet(acc.visited, dep)) {
					acc2
				} else {
					addSimpleEdge(acc2, id, dep, false, 0)
				}
			});
			acc2 = MiniTopological(
				nacc with graph = ngraph,
				queue = mergeSets(nacc.queue, deps)
			);
			buildMiniGraph(acc2);
		}
	} : acc;
}
