import mini/exp/exp;
import mini/types/type;
import ds/set;
import algorithms;

export {
	// These are the commands that the underlying compiler understands
	MiniCommand ::= MiniProcessFile, MiniSetAnnotation, MiniTypeDefine, MiniUnionDefine, MiniStructDefine, MiniDefine, MiniPopFile, MiniTypeInfer;

		// Read a file and if changed, run this Forth command on it. Notice this is async
		MiniProcessFile(usedByFile : string, name : string, asyncCommand : string);

		// Set an annotation for a given scope (id). If scope is "", then it is all ids.
		// Annotations include: "native" for native declarations
		// "export" for the export section (not done yet)
		MiniSetAnnotation(scope : string, annotation : string, value : MiniExp);

		// Define a type. Used for forward declarations
		MiniTypeDefine(file : string, name : string, type : MiniType);

		// Define a union. 
		MiniUnionDefine(name : string, typars : [MiniType], typenames : [MiniType]);

		// Define a struct type
		MiniStructDefine(name : string, fields : [MiniTypeField]);

		// Define this id to this expression from this file. This will pick up any annotations
		// so far for this id as well
		MiniDefine(file : string, name : string, value : MiniExp);

		// Finish processing the current file. Processes unfinished natives
		MiniPopFile(file : string);

		// Infer the type of these ids, since they are new
		MiniTypeInfer(ids : Set<string>);

	// What order should commands be run in? 0 is first.
	getMiniCommandPriority(m : MiniCommand) -> int;

	// For listing, we can also go the opposite direction
	getMiniCommandFromPriority(p : int) -> string;

	// If we need to run all these commands of the same type, can that be optimized?
	combineMiniCommands(m : [MiniCommand]) -> [MiniCommand];

	miniCommand2string(m : MiniCommand) -> string;
}

getMiniCommandPriority(c : MiniCommand) -> int {
	switch (c) {
		MiniProcessFile(__, name, command): 0;
		MiniSetAnnotation(annotation, scope, value): 1;
		MiniTypeDefine(file, name, type): 2;
		MiniUnionDefine(name, typars, typenames): 2;
		MiniStructDefine(name, fields): 2;
		MiniDefine(file, name, value): 3;
		MiniPopFile(file): 4;
		MiniTypeInfer(ids): 5;
	}
}

getMiniCommandFromPriority(p : int) -> string {
	["Files", "Annotations", "Type defs", "Union def", "Struct def", "Defines", "Finish files", "Typechecks"][p]
}

miniCommand2string(c : MiniCommand) -> string {
	switch (c) {
		MiniProcessFile(__, name, command): "Process file '" + name + "' with '" + command + "'";
		MiniSetAnnotation(annotation, scope, value): "Set annotation " + annotation + " with scope " + scope;
		MiniTypeDefine(file, name, type): "Type define " + name;
		MiniUnionDefine(name, typars, typenames): "Union define " + name;
		MiniStructDefine(name, fields): "Struct define " + name;
		MiniDefine(file, name, value): "Define " + name;
		MiniPopFile(file): "Pop file " + file;
		MiniTypeInfer(ids): "Infer type " + strGlue(set2array(ids), ", ");
	}
}

combineMiniCommands(ms : [MiniCommand]) -> [MiniCommand] {
	if (ms == []) ms
	else {
		first = ms[0];
		switch (first) {
			MiniProcessFile(__, __, command): uniq(ms);
			MiniSetAnnotation(__, __, __): ms;
			MiniTypeDefine(__, __, __): ms;
			MiniUnionDefine(__, __, __): ms;
			MiniStructDefine(__, __): ms;
			MiniDefine(__, __, __): ms;
			MiniPopFile(__): ms;
			MiniTypeInfer(__): {
				[MiniTypeInfer(fold(ms, makeSet(), \acc, tc -> {
					switch (tc) {
						MiniTypeInfer(ss): mergeSets(acc, ss);
						default: acc;
					}
				}))]
			}
		}
	}
}
