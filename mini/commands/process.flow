import fast/fast_path;

import mini/commands/db;

import mini/interpreter/partial;

import mini/exp/dependencies;
import mini/exp/topological;
import mini/exp/compare;

import mini/forth/eval;
import mini/forth/stack;

import mini/types/type_check;
import mini/types/resolve;
import mini/types/pretty;

import behaviour;

export {
	// Run the commands requested.
	// Keep progress updated in the remaining behaviour.
	// When all is done, we call onDone with the resulting db
	miniProcessCommand(db : MiniDb, remaining : DynamicBehaviour<string>, onDone : (MiniDb) -> void) -> void;
}

miniProcessCommand(db : MiniDb, remaining : DynamicBehaviour<string>, onDone : (MiniDb) -> void) -> void {
	mcom = popMiniCommand(db);
	ndb = mcom.first;
	switch (mcom.second) {
		None(): {
			next(remaining, "Done");
			onDone(ndb);
		}
		Some(command): {
			if (true) {
				// println(miniCommand2string(command));
			} else {
				println("Running command " + miniCommand2string(command) + " with stack");
				iterList(db.forth.stack, println);
			};
			res = runMiniCommand(ndb, command);
			priority = getMiniCommandPriority(command);
			commandCounts = foldTree(db.queue, makeTree(), \prio, cmds, acc -> {
				setTree(acc, prio, lookupTreeDef(acc, prio, 0) + length(cmds))
			});
			totalCount = sum(getTreeValues(commandCounts));
			if (priority == 0 || (totalCount % 100) == 0) {
				status = foldTree(commandCounts, "", \prio, count, acc -> {
					if (count > 0) {
						acc + getMiniCommandFromPriority(prio) + ": " + i2s(count) + " "
					} else acc;
				});
				next(remaining, status);
				deferUntilRender(
					\ -> {
						miniProcessCommand(res, remaining, onDone)
					}					
				)
			} else {
				miniProcessCommand(res, remaining, onDone)
			}
		}
	}
}

runMiniCommand(db : MiniDb, command : MiniCommand) -> MiniDb {
	switch (command) {
		MiniProcessFile(usedByFile, name, evalcommand): {
			path = fastPath2path(db.includes, name);
			if (shouldReadFile(db.fileCache, path)) {
				// TODO: Push some token about this file, so we can keep track of when we start a new one
				// and get rid of old ids and annotations

				content = getFileContent(path);
				// TODO: Update deps: We have to collect all of them from each file
				ndb = pushMiniValue(db, MiniString(content));
				ndb2 = MiniDb(ndb with fileStack = Cons(name, ndb.fileStack));
				// println("Parsing " + path);
				miniEvalForth(name, ndb2, evalcommand);
			} else {
				// OK, this is already read. We can skip it
				db;
			}
		}
		MiniTypeDefine(file, name, type): {
			// We just do it, no questions asked
			// TODO: Maybe we have to refine this later for incremental
			defineMiniType(db, file, name, type)
		}
		MiniDefine(file, id, body): {
			// OK, extract annotations - TODO: Decide whether this is the time to do it or not
			generalAnnotation = getTreeArrayValue(db.program.unprocessedAnnotations, "");
			specificAnnotations = getTreeArrayValue(db.program.unprocessedAnnotations, id);
			newAnnotations = setTree(db.program.annotations, id, concat(generalAnnotation, specificAnnotations));
			ast = MiniAst(db.program with 
				annotations = newAnnotations, 
				unprocessedAnnotations = removeFromTree(db.program.unprocessedAnnotations, id)
			);
			db0 = MiniDb(db with program = ast);

			// Define or redefine this id to this body
			mexisting = lookupTree(ast.declarations, id);

			def = \ -> {
				defineMiniDeclaration(db0, file, id, body);
			};

			mexisting ?? {
				if (isSameMiniExp(mexisting, body)) {

					deffile = lookupTreeDef(ast.declarationFile, id, file);
					if (deffile == file) {
						// It is the same. Nothing to do except for the annotations
						db0;
					} else {
						// In a new file. Hm, we have a conflict
						println(deffile + ": Defines " + id);
						println(file + ": ...redefined here");
						db0;
					}
				} else {
					// OK, it is new. We should put it in and process it
					def();
				}
			} : def();
		}
		MiniPopFile(file): {
			// OK, we have finished parsing the file.
			// Now it is time to handle these things:
			// natives without fallbacks.
			ndb = foldTree(db.program.unprocessedAnnotations, db, \a, anns, acc -> {
				fold(anns, acc, \acc2, ann -> {
					processMiniAnnotation(acc2, file, ann)
				})
			});

			popStack = tailList(ndb.fileStack);

			ndb2 = MiniDb(ndb with fileStack = popStack);

			// Clear out the annotations
			fast = MiniAst(ndb2.program with unprocessedAnnotations = makeTree());
			MiniDb(ndb2 with program = fast);
		}
		MiniCompileTime(names): {
			interpreter = makeMiniInterpreter(db.program);
			verbose = db.program.options.verbose > 1;
			if (verbose) {
				println("After compile time:");
			}
			decls = foldSet(names, db.program.declarations, \acc, name -> {
				mex = lookupTree(acc, name);
				mex ?? {
					pexp = partialMiniExp(interpreter, mex);
					if (verbose) {
						println(name + " = "+ miniPretty(pexp));
					};
					setTree(acc, name, pexp);
				} : acc
			});
			ast = MiniAst(db.program with declarations = decls);
			MiniDb(db with program = ast);
		}
		MiniTypeInfer(ids): {
			// OK, what types do we have for these ids now?
			lids = set2array(ids);
			origTypes : [Maybe<MiniType>]= map(lids, \id -> {
				lookupTree(db.program.types, id);
			});

			// OK, run type inference on these ids, and update them
			nast = typecheckMiniTypes(db.program, ids);

			// Then we set the (resolved) type in the overall type environment
			// and check if there is a change, and if so, request re-typecheck
			// of dependent ids
			foldi(lids, MiniDb(db with program = nast), \i, acc, id -> {
				update = \ -> { updateMiniType(acc, ids, id) };

				origType = origTypes[i];
				origType ?? {
					newType = lookupTreeDef(acc.program.types, id, origType);
					if (origType == newType) acc
					else update()
				} : update();
			})
		}
	}
}

// OK, this id has a new type.
// The "types" is the set of types we are updating in this round
// and we do not need to propagate any changes to those
updateMiniType(db : MiniDb, updating : Set<string>, id : string) -> MiniDb {
	program = db.program;
	deps = lookupMultimap(db.program.idDependents.dependents, id);
	newDeps = differenceSets(deps, updating);
	if (isEmptySet(newDeps)) db else pushMiniCommand(db, MiniTypeInfer(newDeps));
}

defineMiniType(db : MiniDb, file : string, name : string, type : MiniType) -> MiniDb {
	if (name == db.program.options.displayPhases) {
		println(file + ":" + name + " is defined as type " + miniType2string(type));
	}

	MiniDb(
		db with
		program = MiniAst(db.program with types = setTree(db.program.types, name, type))
	);
}

defineMiniDeclaration(db : MiniDb, file : string, id : string, body : MiniExp) -> MiniDb {
	ast = db.program;
	// Update the dependencies
	deps = extractMiniDeps(body, makeSet(), makeSet());
	npr = MiniAst(ast with idDependents = updateMiniDependent(ast.idDependents, id, deps));
	db2 = pushMiniCommand(db, MiniTypeInfer(makeSet1(id)));

	if (id == db.program.options.displayPhases) {
		println(file + ":" + id + " is defined as\n" + miniPretty(body));
	}

	// OK, this is a new definition
	nast = MiniAst(npr with 
		declarations = setTree(npr.declarations, id, body),
		declarationFile = setTree(npr.declarationFile, id, file),
	);
	MiniDb(db2 with program = nast);
}



processMiniAnnotation(db0 : MiniDb, file : string, annotation : MiniAnnotation) -> MiniDb {
	if (annotation.annotation == "native") {
		// Register the type
		etype = switch (annotation.value) {
			MiniCall(fn, args, tyvar): {
				args[1];
			}
			default: annotation.value;
		};
		type = convertMiniExp2Type(etype);
		db = defineMiniType(db0, file, annotation.scope, type);

		// Merge any fallback we might have
		mfallback = lookupTree(db.program.declarations, annotation.scope);
		mfallback ?? {
			// OK, we have a fallback, so merge that into
			combined = switch (annotation.value) {
				MiniCall(fn, args, tyvar): {
					MiniCall(fn, arrayPush(args, mfallback), tyvar);
				}
				default: annotation.value;
			};
			defineMiniDeclaration(db, file, annotation.scope, combined);
		} : {
			// OK, we just use this as the definition of the native
			defineMiniDeclaration(db, file, annotation.scope, annotation.value);
		}
	} else {
		println("Unhandled annotation:");
		println(annotation);
		db0;
	}
}
