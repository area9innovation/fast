import mini/commands/db;
import mini/forth/init;
import mini/forth/eval;
import mini/types/builtin;
import mini/util/fileinfo;

export {
	makeMiniDb(includes : [string], onError : (string) -> void) -> MiniDb;
}

makeMiniDb(includes : [string], onError : (string) -> void) -> MiniDb {
	strict = isUrlParameterTrue("strict");
	stagestr = getUrlParameterDef("stages", "parse,ct,type,lower");
	stages = fold(strSplit(stagestr, ","), makeSet(), \acc, stage -> {
		if (stage == "parse") insertSet(acc, StageParse())
		else if (stage == "ct") insertSet(acc, StageCompileTime())
		else if (stage == "type") insertSet(acc, StageTypeInference())
		else if (stage == "constrain") insertSet(acc, StageTypeConstrain())
		else if (stage == "coalesce") insertSet(acc, StageTypeCoalesce())
		else if (stage == "simplify") insertSet(acc, StageTypeSimplify())
		else if (stage == "lower") insertSet(acc, StageLower())
		else {
			println("Unknown stage: " + stage);
			acc;
		}
	});
	options = MiniOptions(
		s2i(getUrlParameter("verbose")), 
		buildSet(strSplit(getUrlParameter("debug"), ",")),
		stages,
		// Implicit type pars
		!strict
	);

	db = MiniDb(
		includes, 
		makeTree(), 
		MiniDependent(makeTree(), makeTree()),
		makeMiniFileCache(),
		MiniAst(
			makeTree(), makeTree(), makeTree(), makeTree(), MiniDependent(makeTree(), makeTree()), 
			getBuiltinMiniTypes(), makeTree(), makeTree(), MiniSubtypeGraph(makeSimpleGraph()),
			makeTree(), getBuiltinPureNames(), options,
			\env, name, pos, error -> {
				onError(getFileLineInfo(env, name, pos) + error)
			}
		),
		makeMiniForth(),
		makeTree(),
		makeTree(),
		makeList(),
		onError
	);

	lib = getFileContent("mini/forth/lib.forth");
	miniEvalForths("", db, strSplit(lib, "\n"))
}
