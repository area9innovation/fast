import runtime;
import math/math;
import string;

/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, 
we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

euler1(limit : int) -> int {
    foldRange(1, limit - 1, 0, \acc, i -> {
        if (i % 3 == 0 || i % 5 == 0) {
            acc + i;
        } else acc;
    });
}


euler2(a : double, b : double, sum : double) -> double {
    fib = a + b;
    nsum = if (fib % 2.0 == 0.0) sum + fib else sum; 
    if (fib < 4000000.0) {
        euler2(b, fib, nsum)
    } else {
        nsum;
    }
}

isPalindromic(s : string) -> bool {
	l = strlen(s);
    l <= 1 || {
		first = strLeft(s, 1);
		last = strRight(s, l - 1);
        first == last && isPalindromic(strsubsmart(s, 1, -1));
    }
}

euler4() -> int {
    foldRange(100, 999, 0, \acc, a -> {
        foldRange(100, 999, acc, \acc2, b -> {
        	p = a * b;
	        if (p < acc2 || !isPalindromic(i2s(p))) acc2 else p;
        })
    });
}

euler6(limit : int) -> double {
    sumsquares = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n * n));
    natsum = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n));
	natsum * natsum - sumsquares
}


isPrime(x : int) -> bool {
    x == 2 || (x > 2 && (x % 2 != 0) && doIsPrime(x, 3, round(sqrt(i2d(x))) + 1))
}

doIsPrime(x : int, i : int, stop : int) -> bool {
    i >= stop
    || (
        (x % i) != 0 
        && doIsPrime(x, i + 2, stop)
    );
}

euler10b(size : int) -> double {
    primes = filter(enumFromTo(1, size), isPrime);
    fold(primes, 0.0, \acc, prime -> acc + i2d(prime));
}


main() {
//	println(__compiletime(euler1(10)));
//	println(__compiletime(euler2(0.0, 1.0, 0.0))); // Correct: 4613732
//	println(__compiletime(euler4())); // 906609
//	println(__compiletime(euler6(100))); // 25164150

	// euler7: arrays, refs and structs, bit operations
	// euler8: arrays

	// euler10b: arrays
    println(__compiletime(euler10b(2000000))); // Correct: 142913828922
}
