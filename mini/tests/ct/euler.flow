import runtime;
import math/math;
import string;
import string_utils;

/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, 
we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

euler1(limit : int) -> int {
    foldRange(1, limit - 1, 0, \acc, i -> {
        if (i % 3 == 0 || i % 5 == 0) {
            acc + i;
        } else acc;
    });
}


euler2(a : double, b : double, sum : double) -> double {
    fib = a + b;
    nsum = if (fib % 2.0 == 0.0) sum + fib else sum; 
    if (fib < 4000000.0) {
        euler2(b, fib, nsum)
    } else {
        nsum;
    }
}

isPalindromic(s : string) -> bool {
	l = strlen(s);
    l <= 1 || {
		first = strLeft(s, 1);
		last = strRight(s, l - 1);
        first == last && isPalindromic(strsubsmart(s, 1, -1));
    }
}

euler4() -> int {
    foldRange(100, 999, 0, \acc, a -> {
        foldRange(100, 999, acc, \acc2, b -> {
        	p = a * b;
	        if (p < acc2 || !isPalindromic(i2s(p))) acc2 else p;
        })
    });
}

euler6(limit : int) -> double {
    sumsquares = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n * n));
    natsum = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n));
	natsum * natsum - sumsquares
}


euler8(digits : string, len : int) -> double {
    foldRange(0, strlen(digits) - len - 1, 0.0, \greatest, i -> {
        numbers = substring(digits, i, len);
        product = stringFoldChar(numbers, 1.0, \acc, d -> {
            acc * s2d(d)
        });
        max(product, greatest)
    });
}


isPrime(x : int) -> bool {
    x == 2 || (x > 2 && (x % 2 != 0) && doIsPrime(x, 3, round(sqrt(i2d(x))) + 1))
}

doIsPrime(x : int, i : int, stop : int) -> bool {
    i >= stop
    || (
        (x % i) != 0 
        && doIsPrime(x, i + 2, stop)
    );
}

euler10b(size : int) -> double {
    primes = filter(enumFromTo(1, size), isPrime);
    fold(primes, 0.0, \acc, prime -> acc + i2d(prime));
}

// TODO: Figure out how these fallback fallbacks can automatically make it?

fold(xs : [?], init : ??, fn : (??, ?)->??) -> ?? {
	doFold(0, xs, init, fn);
}

doFold(i : int, xs : [?], init : ??, fn : (??, ?)->??) -> ?? {
	if (i < length(xs)) {
		doFold(i + 1, xs, fn(init, xs[i]), fn);
	} else init;
}

filter(a : [?], test : (?) -> bool) -> [?] {
	doFilter([], 0, a, test);
}

doFilter(acc : [?], i : int, xs : [?], test : (?) -> bool) -> [?] {
	if (i < length(xs)) {
		nacc = if (test(xs[i])) {
			replace(acc, length(acc), xs[i])
		} else acc;
		doFilter(nacc, i + 1, xs, test);
	} else acc
}

main() {
//	println(__compiletime(euler1(10)));
//	println(__compiletime(euler2(0.0, 1.0, 0.0))); // Correct: 4613732
//	println(__compiletime(euler4())); // 906609
//	println(__compiletime(euler6(100))); // 25164150

	// euler7: arrays, refs and structs, bit operations
	__compiletime({
		digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
		println(euler8(digits, 13)); // Correct: 23514624000
		0;
	});

    // println(__compiletime(euler10b(2000))); // Correct: 277050
}
