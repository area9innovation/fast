import mini/interpreter/env;
import mini/exp/value;
import mini/exp/pretty;

/*
TODO:
- Separate functions which we ALWAYS want to evaluate if they have constant arguments:
  strlen, length
*/
export {
	isNativeInterpreted(name : string) -> bool;
	evalMiniStaticCall(env : MiniInterpreter, fn : MiniVar, args : [MiniExp], pos : int, tyvar : int) -> MiniExp;
}

isNativeInterpreted(name : string) -> bool {
	// println("Is this native? " + name);
	// Casts
	name == "i2s" || name == "d2s" || name == "i2d"  || name == "trunc"
	
	// Strings
	|| name == "strlen" || name == "substring"  || name == "getCharCodeAt"
	
	|| name == "println" 

	// Arrays
	|| name == "arrayPush" || name == "length" || name == "enumFromTo" || name == "concat"
	|| name == "subrange" || name == "replace"

	// Math
	|| name == "sin" || name == "asin" || name == "acos"  || name == "atan"  || name == "atan2"
	|| name == "exp" || name == "log"
}

evalMiniStaticCall(env : MiniInterpreter, fn : MiniVar, args : [MiniExp], pos : int, tyvar : int) -> MiniExp {
	def = MiniCall(fn, args, pos, tyvar);
	//
	// Builtins
	//
	if (fn.name == "+") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) + getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) + getMiniDouble(args[1]), pos);
		} else if (isMiniString(args[0]) && isMiniString(args[1])) {
			MiniString(getMiniString(args[0]) + getMiniString(args[1]), pos);
		} else def;
	} else if (fn.name == "-") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) - getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) - getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "*") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) * getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) * getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "/") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) / getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) / getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "%") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) % getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) % getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "__neg") {
		if (isMiniInt(args[0])) {
			MiniInt(-getMiniInt(args[0]), pos, tyvar);
		} else if (isMiniDouble(args[0])) {
			MiniDouble(-getMiniDouble(args[0]), pos);
		} else def;
	} else if (fn.name == "!") {
		if (isMiniInt(args[0])) {
			MiniInt(b2i(getMiniInt(args[0]) == 0), pos, tyvar);
		} else def;
	} else if (fn.name == "==") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp == 0), pos, tyvar);
	} else if (fn.name == "!=") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp != 0), pos, tyvar);
	} else if (fn.name == "<=") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp <= 0), pos, tyvar);
	} else if (fn.name == "<") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp < 0), pos, tyvar);
	} else if (fn.name == ">=") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp >= 0), pos, tyvar);
	} else if (fn.name == ">") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp > 0), pos, tyvar);

	} else if (fn.name == ";") {
		if (isMiniStatic(args[0])) {
			args[1];
		} else {
			def
		}

	//
	// Math
	//

	} else if (fn.name == "sin") {
		if (isMiniDouble(args[0])) {
			MiniDouble(sin(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "asin") {
		if (isMiniDouble(args[0])) {
			MiniDouble(asin(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "acos") {
		if (isMiniDouble(args[0])) {
			MiniDouble(asin(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "atan") {
		if (isMiniDouble(args[0])) {
			MiniDouble(atan(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "atan2") {
		if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(atan2(getMiniDouble(args[0]), getMiniDouble(args[1])), pos);
		} else def;
	} else if (fn.name == "exp") {
		if (isMiniDouble(args[0])) {
			MiniDouble(exp(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "log") {
		if (isMiniDouble(args[0])) {
			MiniDouble(log(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "trunc") {
		if (isMiniDouble(args[0])) {
			MiniInt(trunc(getMiniDouble(args[0])), pos, tyvar);
		} else def;

	//
	// Array
	//
	} else if (fn.name == "__emptyarray") {
		makeMiniArray([], pos, tyvar)
	} else if (fn.name == "," || fn.name == "arrayPush") {
		if (isMiniArray(args[0])) {
			left = getMiniArrayValue(args[0]);
			makeMiniArray(
				arrayPush(left, args[1]),
				pos, tyvar
			);
		} else def;
	} else if (fn.name == "__index") {
		if (isMiniArray(args[0]) && isMiniInt(args[1])) {
			ar = getMiniArrayValue(args[0]);
			i = getMiniInt(args[1]);
			ar[i];
		} else def;
	} else if (fn.name == "length") {
		if (isMiniArray(args[0])) {
			ar = getMiniArrayValue(args[0]);
			MiniInt(length(ar), pos, tyvar)
		} else def;
	} else if (fn.name == "concat") {
		if (isMiniArray(args[0]) && isMiniArray(args[1])) {
			left = getMiniArrayValue(args[0]);
			right = getMiniArrayValue(args[1]);
			makeMiniArray(concat(left, right), pos, tyvar)
		} else def;
	} else if (fn.name == "subrange") {
		if (isMiniArray(args[0]) && isMiniInt(args[1]) && isMiniInt(args[2])) {
			ar = getMiniArrayValue(args[0]);
			index = getMiniInt(args[1]);
			len = getMiniInt(args[2]);
			makeMiniArray(subrange(ar, index, len), pos, tyvar)
		} else def;
	} else if (fn.name == "replace") {
		if (isMiniArray(args[0]) && isMiniInt(args[1])) {
			ar = getMiniArrayValue(args[0]);
			index = getMiniInt(args[1]);
			elm = args[2];
			makeMiniArray(replace(ar, index, elm), pos, tyvar)
		} else def;
	} else if (fn.name == "enumFromTo") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			ints = enumFromTo(getMiniInt(args[0]), getMiniInt(args[1]));
			makeMiniArray(
				map(ints, \i -> MiniInt(i, pos, tyvar)),
				pos, tyvar
			);
		} else def;

	// TODO: Add natives
	// concat, map, mapi, fold, foldi, replace, subrange, iter, iteri, iteriUntil, filter

	} else if (fn.name == "i2s" && isMiniInt(args[0])) {
		MiniString(i2s(getMiniInt(args[0])), pos);
	} else if (fn.name == "i2d" && isMiniInt(args[0])) {
		MiniDouble(i2d(getMiniInt(args[0])), pos);
	} else if (fn.name == "d2s" && isMiniDouble(args[0])) {
		MiniString(d2s(getMiniDouble(args[0])), pos);
	

	//
	// string
	//

	} else if (fn.name == "strlen" && isMiniString(args[0])) {
		MiniInt(strlen(getMiniString(args[0])), pos, tyvar);
	} else if (fn.name == "substring" && isMiniString(args[0]) && isMiniInt(args[1]) && isMiniInt(args[2])) {
		s = getMiniString(args[0]);
		i1 = getMiniInt(args[1]);
		i2 = getMiniInt(args[2]);
		MiniString(substring(s, i1, i2), pos);
	} else if (fn.name == "getCharCodeAt" && isMiniString(args[0]) && isMiniInt(args[1])) {
		MiniInt(getCharCodeAt(getMiniString(args[0]), getMiniInt(args[1])), pos, tyvar);

	} else if (fn.name == "println") {
		if (isMiniString(args[0])) {
			println(getMiniString(args[0]));
		} else if (isMiniInt(args[0])) {
			println(getMiniInt(args[0]));
		} else if (isMiniDouble(args[0])) {
			println(getMiniDouble(args[0]));
		} else if (isMiniArray(args[0])) {
			println(getMiniArrayValue(args[0]));
		} else {
			println(miniPretty(args[0]));
		}
		miniVoid(pos, tyvar);

	//
	// Refs
	//

	} else if (fn.name == "__ref") {
		if (isMiniStatic(args[0])) {
			pnt = ^(env.nextRefId);
			env.nextRefId := pnt + 1;
			env.refs := setTree(^(env.refs), pnt, args[0]);
			// We encode refs as integers
			MiniInt(pnt, pos, tyvar);
		} else def;
	} else if (fn.name == "__deref") {
		if (isMiniInt(args[0])) {
			pnt = getMiniInt(args[0]);
			mval = lookupTree(^(env.refs), pnt);
			mval ?? {
				mval
			} : {
				def;
			}
		} else def;
	} else if (fn.name == ":=") {
		if (isMiniInt(args[0]) && isMiniStatic(args[1])) {
			pnt = getMiniInt(args[0]);
			env.refs := setTree(^(env.refs), pnt, args[1]);
			miniVoid(pos, tyvar);
		} else def;

	//
	// structs
	//
	} else if (fn.name == "__construct0"  && isMiniString(args[0])) {
		// We represent a struct by the call to the constructor
		MiniCall(
			MiniVar(getMiniString(args[0]), pos, tyvar),
			[
			], pos, tyvar
		)
	} else if (fn.name == "__construct1" && isMiniString(args[0]) && isMiniString(args[1])) {
		name = getMiniString(args[0]);
		field0 = getMiniString(args[1]);
		val = lookupTreeDef(env.env.declarations, field0, args[1]);

		MiniCall(
			MiniVar(name, pos, tyvar),
			[ val ], pos, tyvar
		);

	} else if (fn.name == "." && isMiniStaticCall(args[0]) && isMiniString(args[1])) {
		structname = getMiniStaticCall(args[0]);
		sargs = getMiniCallArgs(args[0]);
		field = getMiniString(args[1]);

		mstructdef = lookupTree(env.env.structs, structname);
		mstructdef ?? {
			fieldi = findiDef(mstructdef.fields, \f -> {
				f.name == field
			}, -1);
			if (fieldi != -1) {
				sargs[fieldi];
			} else {
				println("Error: Can not find ." + field + " on " + structname + " with args " + toString(sargs));
				def
			}
		} : def;

	} else {
		println("TODO: Implement " + fn.name);
		// println(args);
		def
	}
}

compareMiniValue(left : MiniExp, right : MiniExp) -> int {
	switch (left) {
		MiniInt(lvalue, pos, tyvar): switch (right) {
			MiniInt(rvalue, __, __): genericCompare(lvalue, rvalue);
			default: -2;
		}
		MiniDouble(lvalue, pos): switch (right) {
			MiniDouble(rvalue, __): genericCompare(lvalue, rvalue);
			default: -2;
		}
		MiniString(lvalue, pos):  switch (right) {
			MiniString(rvalue, __): genericCompare(lvalue, rvalue);
			default: -2;
		}
		MiniVar(name, pos, tyvar): -2;
		MiniLet(name, value, body, pos, tyvar): -2;
		MiniLambda(args, body, pos, tyvar): -2;
		MiniCall(fn, args, pos, tyvar): -2;
	}
}

// TODO: This construction for arrays is maybe not the best representation?
// We can not type it
makeMiniArray(es : [MiniExp], pos : int, tyvar : int) -> MiniExp {
	MiniCall(
		MiniVar("__array", pos, tyvar), es, pos, tyvar
	);
}

isMiniArray(e : MiniExp) -> bool {
	switch (e) {
		MiniCall(fn, args, __, __): {
			switch (fn) {
				MiniVar(name, __, __): {
					name == "__array";
				}
				default: false;
			}
		}
		default: false;
	}
}

getMiniArrayValue(e : MiniExp) -> [MiniExp] {
	switch (e) {
		MiniCall(fn, args, __, __): {
			switch (fn) {
				MiniVar(name, __, __): {
					if (name == "__array") args
					else [];
				}
				default: [];
			}
		}
		default: [];
	}
}

isMiniStatic(e : MiniExp) -> bool {
	switch (e) {
		MiniInt(value, pos, tyvar): true;
		MiniDouble(value, pos): true;
		MiniString(value, pos): true;
		MiniVar(name, pos, tyvar): true;
		MiniLet(name, value, body, pos, tyvar): isMiniStatic(value) && isMiniStatic(body);
		MiniLambda(args, body, pos, tyvar): true;
		MiniCall(fn, args, pos, tyvar): {
			switch (fn) {
				MiniVar(fnname, __, __): {
					(fnname == "__void"  || fnname == "__array")
					&& forall(args, isMiniStatic)
				}
				default: false;
			}
		}
	}
}

isMiniStaticCall(e : MiniExp) -> bool {
	getMiniStaticCall(e) != ""
}

getMiniStaticCall(e : MiniExp) -> string {
	switch (e) {
		MiniCall(fn, __, __, __): {
			switch (fn) {
				MiniVar(fnname, __, __): fnname;
				default: "";
			}
		}
		default: "";
	}
}

getMiniCallArgs(e : MiniExp) -> [MiniExp] {
	switch (e) {
		MiniCall(__, args, __, __): {
			args;
		}
		default: [];
	}
}

miniVoid(pos : int, tyvar : int) -> MiniExp {
	MiniCall(MiniVar("__void", pos, tyvar), [], pos, tyvar);
}