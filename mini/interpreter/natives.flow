import mini/interpreter/env;
import mini/interpreter/util;
import mini/exp/value;
import mini/exp/pretty;
import mini/types/builtin;
import mini/types/type_ast;
import math/bits;

/*
TODO:
- Separate functions which we ALWAYS want to evaluate if they have constant arguments:
  strlen, length
*/
export {
	// These functions are natives, which we have implementations for
	isNativeInterpreted(name : string) -> bool;

	evalMiniStaticCall(env : MiniInterpreter, fn : MiniVar, args : [MiniExp], pos : int, tyvar : int) -> MiniExp;
}

isNativeInterpreted(name : string) -> bool {
	// println("Is this native? " + name);
	// Casts
	name == "i2s" || name == "d2s" || name == "i2d"  || name == "trunc"
	
	// Strings
	|| name == "strlen" || name == "substring"  || name == "getCharCodeAt"
	
	|| name == "println" 

	// Arrays
	|| name == "arrayPush" || name == "length" || name == "enumFromTo" || name == "concat"
	|| name == "subrange" || name == "replace"

	// Math
	|| name == "sin" || name == "asin" || name == "acos"  || name == "atan"  || name == "atan2"
	|| name == "exp" || name == "log"

	// Bits
	|| name == "bitOr" || name == "bitAnd" || name == "bitShl" || name == "bitUshr" || name == "bitNot"
}

evalMiniStaticCall(env : MiniInterpreter, fn : MiniVar, args : [MiniExp], pos : int, tyvar : int) -> MiniExp {
	def = MiniCall(fn, args, pos, tyvar);
	//
	// Builtins
	//
	if (fn.name == "+") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) + getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) + getMiniDouble(args[1]), pos);
		} else if (isMiniString(args[0]) && isMiniString(args[1])) {
			MiniString(getMiniString(args[0]) + getMiniString(args[1]), pos);
		} else def;
	} else if (fn.name == "-") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) - getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) - getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "*") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) * getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) * getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "/") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) / getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) / getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "%") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			MiniInt(getMiniInt(args[0]) % getMiniInt(args[1]), pos, tyvar);
		} else if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(getMiniDouble(args[0]) % getMiniDouble(args[1]), pos);
		} else def;
	} else if (fn.name == "__neg") {
		if (isMiniInt(args[0])) {
			MiniInt(-getMiniInt(args[0]), pos, tyvar);
		} else if (isMiniDouble(args[0])) {
			MiniDouble(-getMiniDouble(args[0]), pos);
		} else def;
	} else if (fn.name == "!") {
		if (isMiniInt(args[0])) {
			MiniInt(b2i(getMiniInt(args[0]) == 0), pos, tyvar);
		} else def;
	} else if (fn.name == "==") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp == 0), pos, tyvar);
	} else if (fn.name == "!=") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp != 0), pos, tyvar);
	} else if (fn.name == "<=") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp <= 0), pos, tyvar);
	} else if (fn.name == "<") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp < 0), pos, tyvar);
	} else if (fn.name == ">=") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp >= 0), pos, tyvar);
	} else if (fn.name == ">") {
		cmp = compareMiniValue(args[0], args[1]);
		if (cmp == -2) def
		else MiniInt(b2i(cmp > 0), pos, tyvar);

	} else if (fn.name == ";") {
		if (isMiniStatic(env.env, args[0])) {
			args[1];
		} else {
			def
		}
	} else if (fn.name == "__void") {
		def


	//
	// Math
	//

	} else if (fn.name == "sin") {
		if (isMiniDouble(args[0])) {
			MiniDouble(sin(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "asin") {
		if (isMiniDouble(args[0])) {
			MiniDouble(asin(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "acos") {
		if (isMiniDouble(args[0])) {
			MiniDouble(asin(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "atan") {
		if (isMiniDouble(args[0])) {
			MiniDouble(atan(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "atan2") {
		if (isMiniDouble(args[0]) && isMiniDouble(args[1])) {
			MiniDouble(atan2(getMiniDouble(args[0]), getMiniDouble(args[1])), pos);
		} else def;
	} else if (fn.name == "exp") {
		if (isMiniDouble(args[0])) {
			MiniDouble(exp(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "log") {
		if (isMiniDouble(args[0])) {
			MiniDouble(log(getMiniDouble(args[0])), pos);
		} else def;
	} else if (fn.name == "trunc") {
		if (isMiniDouble(args[0])) {
			MiniInt(trunc(getMiniDouble(args[0])), pos, tyvar);
		} else def;

	//
	// Array
	//
	} else if (fn.name == "__emptyarray") {
		makeMiniArray([], pos, tyvar)
	} else if (fn.name == "," || fn.name == "arrayPush") {
		if (isMiniArray(args[0])) {
			left = getMiniArrayValue(args[0]);
			makeMiniArray(
				arrayPush(left, args[1]),
				pos, tyvar
			);
		} else def;
	} else if (fn.name == "__index") {
		if (isMiniArray(args[0]) && isMiniInt(args[1])) {
			ar = getMiniArrayValue(args[0]);
			i = getMiniInt(args[1]);
			ar[i];
		} else def;
	} else if (fn.name == "length") {
		if (isMiniArray(args[0])) {
			ar = getMiniArrayValue(args[0]);
			MiniInt(length(ar), pos, tyvar)
		} else def;
	} else if (fn.name == "concat") {
		if (isMiniArray(args[0]) && isMiniArray(args[1])) {
			left = getMiniArrayValue(args[0]);
			right = getMiniArrayValue(args[1]);
			makeMiniArray(concat(left, right), pos, tyvar)
		} else def;
	} else if (fn.name == "subrange") {
		if (isMiniArray(args[0]) && isMiniInt(args[1]) && isMiniInt(args[2])) {
			ar = getMiniArrayValue(args[0]);
			index = getMiniInt(args[1]);
			len = getMiniInt(args[2]);
			makeMiniArray(subrange(ar, index, len), pos, tyvar)
		} else def;
	} else if (fn.name == "replace") {
		if (isMiniArray(args[0]) && isMiniInt(args[1])) {
			ar = getMiniArrayValue(args[0]);
			index = getMiniInt(args[1]);
			elm = args[2];
			makeMiniArray(replace(ar, index, elm), pos, tyvar)
		} else def;
	} else if (fn.name == "enumFromTo") {
		if (isMiniInt(args[0]) && isMiniInt(args[1])) {
			ints = enumFromTo(getMiniInt(args[0]), getMiniInt(args[1]));
			makeMiniArray(
				map(ints, \i -> MiniInt(i, pos, tyvar)),
				pos, tyvar
			);
		} else def;

	// TODO: Add natives
	// concat, map, mapi, fold, foldi, replace, subrange, iter, iteri, iteriUntil, filter

	} else if (fn.name == "i2s" && isMiniInt(args[0])) {
		MiniString(i2s(getMiniInt(args[0])), pos);
	} else if (fn.name == "i2d" && isMiniInt(args[0])) {
		MiniDouble(i2d(getMiniInt(args[0])), pos);
	} else if (fn.name == "d2s" && isMiniDouble(args[0])) {
		MiniString(d2s(getMiniDouble(args[0])), pos);
	

	//
	// string
	//

	} else if (fn.name == "strlen" && isMiniString(args[0])) {
		MiniInt(strlen(getMiniString(args[0])), pos, tyvar);
	} else if (fn.name == "substring" && isMiniString(args[0]) && isMiniInt(args[1]) && isMiniInt(args[2])) {
		s = getMiniString(args[0]);
		i1 = getMiniInt(args[1]);
		i2 = getMiniInt(args[2]);
		MiniString(substring(s, i1, i2), pos);
	} else if (fn.name == "getCharCodeAt" && isMiniString(args[0]) && isMiniInt(args[1])) {
		MiniInt(getCharCodeAt(getMiniString(args[0]), getMiniInt(args[1])), pos, tyvar);

	} else if (fn.name == "println") {
		if (isMiniString(args[0])) {
			println(getMiniString(args[0]));
		} else if (isMiniInt(args[0])) {
			println(getMiniInt(args[0]));
		} else if (isMiniDouble(args[0])) {
			println(getMiniDouble(args[0]));
		} else if (isMiniArray(args[0])) {
			println(getMiniArrayValue(args[0]));
		} else {
			println(miniPretty(args[0]));
		}
		miniVoid(pos, tyvar);

	//
	// Refs
	//

	} else if (fn.name == "__ref") {
		if (isMiniStatic(env.env, args[0])) {
			pnt = ^(env.nextRefId);
			env.nextRefId := pnt + 1;
			env.refs := setTree(^(env.refs), pnt, args[0]);
			// We encode refs as integers
			MiniInt(pnt, pos, tyvar);
		} else def;
	} else if (fn.name == "__deref") {
		if (isMiniInt(args[0])) {
			pnt = getMiniInt(args[0]);
			mval = lookupTree(^(env.refs), pnt);
			mval ?? {
				mval
			} : {
				println("Could not find reference");
				def;
			}
		} else def;
	} else if (fn.name == ":=") {
		if (isMiniInt(args[0]) && isMiniStatic(env.env, args[1])) {
			pnt = getMiniInt(args[0]);
			env.refs := setTree(^(env.refs), pnt, args[1]);
			miniVoid(pos, tyvar);
		} else def;

	//
	// structs
	//
	} else if (fn.name == "__construct0"  && isMiniString(args[0])) {
		// We represent a struct by the call to the constructor
		MiniCall(
			MiniVar(getMiniString(args[0]), pos, tyvar),
			[
			], pos, tyvar
		)
	} else if (fn.name == "__construct1" && isMiniString(args[0]) && isMiniString(args[1])) {
		interpretConstruct(env, args, pos, tyvar)
	} else if (fn.name == "__construct2" && length(args) == 3 && forall(args, isMiniString)) {
		interpretConstruct(env, args, pos, tyvar)
	} else if (fn.name == "__construct3" && length(args) == 4 && forall(args, isMiniString)) {
		interpretConstruct(env, args, pos, tyvar)
	} else if (fn.name == "__construct4" && length(args) == 5 && forall(args, isMiniString)) {
		interpretConstruct(env, args, pos, tyvar)
	} else if (fn.name == "__construct5" && length(args) == 6 && forall(args, isMiniString)) {
		interpretConstruct(env, args, pos, tyvar)

	} else if (fn.name == "." && isMiniStaticCall(args[0]) && isMiniString(args[1])) {
		structname = getMiniStaticCall(args[0]);
		sargs = getMiniCallArgs(args[0]);
		field = getMiniString(args[1]);

		mstructdef = lookupTree(env.env.structs, structname);
		mstructdef ?? {
			fieldi = findiDef(mstructdef.fields, \f -> {
				f.name == field
			}, -1);
			if (fieldi != -1) {
				sargs[fieldi];
			} else {
				println("Error: Can not find ." + field + " on " + structname + " with args " + toString(sargs));
				def
			}
		} : def;
	} else if (fn.name == "__switchvalue") {
		if (isMiniStaticCall(args[0])) {
			structname = getMiniStaticCall(args[0]);
			MiniString(structname, pos)
		} else def;

	//
	// Bits
	//
	} else if (fn.name == "bitAnd" && isMiniInt(args[0]) && isMiniInt(args[1])) {
		MiniInt(bitAnd(getMiniInt(args[0]), getMiniInt(args[1])), pos, tyvar)
	} else if (fn.name == "bitOr" && isMiniInt(args[0]) && isMiniInt(args[1])) {
		MiniInt(bitOr(getMiniInt(args[0]), getMiniInt(args[1])), pos, tyvar)
	} else if (fn.name == "bitShl" && isMiniInt(args[0]) && isMiniInt(args[1])) {
		MiniInt(bitShl(getMiniInt(args[0]), getMiniInt(args[1])), pos, tyvar)
	} else if (fn.name == "bitUshr" && isMiniInt(args[0]) && isMiniInt(args[1])) {
		MiniInt(bitUshr(getMiniInt(args[0]), getMiniInt(args[1])), pos, tyvar)
	} else if (fn.name == "bitNot" && isMiniInt(args[0])) {
		MiniInt(bitNot(getMiniInt(args[0])), pos, tyvar)

	//
	// Reflection in the interpreter
	//

	} else if (fn.name == "typeof") {
		type = interpretTypeOf(env, args[0]);
		miniType2Exp(type);

	} else {
		println("TODO: Implement interpretation of " + fn.name + " " + toString(args));
		// println(args);
		def
	}
}

interpretConstruct(env : MiniInterpreter, args : [MiniExp], pos : int, tyvar : int) -> MiniExp {
	strings = map(args, getMiniString);
	name = strings[0];

	vals = mapi(tail(strings), \i, field -> {
		lookupTreeDef(env.env.declarations, field, args[i + 1]);
	});

	MiniCall(MiniVar(name, pos, tyvar), vals, pos, tyvar);
}

interpretTypeOf(env : MiniInterpreter, val : MiniExp)-> MiniType {
	switch (val) {
		MiniCall(fn, args, __, __): {
			switch (fn) {
				MiniVar(name, __, __): {
					if (name == "__void") {
						miniTypeVoid;
					} else if (name == "__array") {
						MiniTypeCall(
							"array",
							[
								interpretTypeOf(env, args[0])
							]
						)
					} else {
						println(name);
						MiniTypeCall(name, [])
					}
				}
				default: {
					println("TODO: figure out the type of " + miniPretty(val));
					miniTypeVoid
				}
			}
		}
		MiniInt(value, pos, tyvar): MiniTypeInt(32);
		MiniDouble(value, pos): miniTypeDouble;
		MiniString(value, pos): miniTypeString;
		MiniVar(name, pos, tyvar): {
			println("TODO: Unknown var type " + name);
			miniTypeVoid;
		}
		MiniLet(name, value, body, pos, tyvar): {
			interpretTypeOf(env, body);
		}
		MiniLambda(args, body, pos, tyvar): {
			println("TODO: Unknown fn type");
			miniTypeVoid;
		}
	}
}
