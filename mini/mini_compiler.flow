import mini/mini_db;
import mini/mini_stack;
import mini/mini_dependencies;
import fast/fast_path;
import mini/mini_parse;

export {
	miniCompile(db : MiniDb) -> MiniDb;
}

miniCompile(db : MiniDb) -> MiniDb {
	if (db.queue == []) db
	else {
		val = db.queue[0];
		rest = tail(db.queue);
		ndb = MiniDb(db with queue = rest);

		todo = \ -> {
			println("Figure out how to compile " + toString(val));
			ndb
		}

		miniCompile(switch (val) {
			MiniFilename(name): {
				withext = changeFileExt(name, ".mini");
				filename = fastPath2path(db.includes, withext);
				parseMiniFile(name, filename, ndb);
			}
			MiniDefine(file, id, body): {
				mexisting = lookupTree(ndb.program.declarations, id);

				def = \ -> {
					pr = ndb.program;

					// Update the dependencies
					npr = updateMiniDeps(pr, id, body);

					// OK, this is a new definition
					ndecl = MiniAst(npr with 
						declarations = setTree(pr.declarations, id, body),
						declarationFile = setTree(pr.declarationFile, id, file),
					);

					MiniDb(ndb with program = ndecl);
				}

				mexisting ?? {
					if (mexisting == body) {
						// It is the same. Nothing to do.
						ndb;
					} else {
						// OK, it is new. We should put it in and process it
						def();
					}
				}  : def();
			}
		});
	};
}

updateMiniDeps(pr : MiniAst, id : string, body : MiniExp) -> MiniAst {
	npr = removeMiniDeps(pr, id);
	addMiniDeps(npr, id, body)
}

addMiniDeps(pr : MiniAst, id : string, body : MiniExp) -> MiniAst {
	deps = extractMiniDeps(body, makeSet(), makeSet());
	println(id + " depends on " + strGlue(set2array(deps), ", "));
	MiniAst(pr with
		dependencies = setTree(pr.dependencies, id, deps),
		dependents = foldSet(deps, pr.dependents, \acc, dep -> {
			insertMultimap(acc, dep, id)
		})
	)
}

removeMiniDeps(pr : MiniAst, id : string) -> MiniAst {
	deps = lookupMultimap(pr.dependencies, id);
	MiniAst(
		pr with
		dependencies = removeFromTree(pr.dependencies, id),
		dependents = foldSet(deps, pr.dependents, \acc, dep -> {
			removeMultimap(acc, dep, id)
		})
	);
}
