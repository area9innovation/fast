import mini/mini_db;
import mini/mini_stack;
import fast/fast_path;
import mini/mini_parse;

export {
	miniCompile(db : MiniDb) -> MiniDb;
}

miniCompile(db : MiniDb) -> MiniDb {
	if (db.queue == []) db
	else {
		val = db.queue[0];
		rest = tail(db.queue);
		ndb = MiniDb(db with queue = rest);

		todo = \ -> {
			println("Figure out how to compile " + toString(val));
			ndb
		}

		miniCompile(switch (val) {
			MiniFilename(name): {
				withext = changeFileExt(name, ".mini");
				filename = fastPath2path(db.includes, withext);
				parseMiniFile(name, filename, ndb);
			}
			MiniDeclare(id, body): {
				mexisting = lookupTree(db.lastKnownGood.declarations, id);

				def = \ -> {
					// OK, this is a new definition
					println("TODO: Add this " + id);
					println(body);
					ndb;
				}

				mexisting ?? {
					if (mexisting == body) {
						// It is the same. Nothing to do.
						ndb;
					} else {
						// OK, it is new. We should put it in and process it
						def();
					}
				}  : def();
			}
		});
	};
}
