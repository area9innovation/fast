import mini/mini_db;
import mini/mini_stack;
import fast/fast_path;
import mini/mini_parse;

export {
	miniCompile(db : MiniDb) -> MiniDb;
}

miniCompile(db : MiniDb) -> MiniDb {
	if (db.queue == []) db
	else {
		val = db.queue[0];
		rest = tail(db.queue);
		ndb = MiniDb(db with queue = rest);

		todo = \ -> {
			println("Figure out how to compile " + toString(val));
			ndb
		}

		miniCompile(switch (val) {
			MiniValue(): {
				pushMiniValue(ndb, val);
			}
			MiniFile(name): {
				withext = changeFileExt(name, ".mini");
				filename = fastPath2path(db.includes, withext);
				parseMiniFile(name, filename, ndb);
			}
			MiniDeclaration(name, expr): todo();
			MiniVar(name): todo();
			MiniLet(name, value, body): todo();
			MiniLambda(args, body): todo();
			MiniCall(fn, args): todo();
		});
	};
}
