import parsec;
import string_utils;

_0(x : string) -> i32 { 0; }
str_int(x : string, y : i32) -> Tuple<string, i32>  { tuple(x, y); }

showResult(res : Tuple<i32, ?>, input : string) -> i0 {
    i = first(res);
    if (0 > i) {
        i_str = i2s(i);
        a = "fail, i=" + i_str;
        println(a + "\n");
    } else if (i < length(input)) {
        i_str = i2s(i);
        len_str = i2s(length(input));
        println("fail: i=" + i_str + ", length(input)=" + len_str + "\n");
    } else {
        println("success, result:");
        println(second(res));
        println("");
    }
}

runTest(input : string, parser : (string, i32) -> Tuple<i32, ?>) -> i0 {
    println("running test '" + input + "'");
    res = parser(input, 0);
    showResult(res, input);
}

runAndCheckIntTest(input : string, parser : (string, i32) -> Tuple<i32, i32>, mustBeOk : i1, answer : i32) -> i32 {
    res = parser(input, 0);
    i = first(res);
    wasOk = (i == length(input));
    value = second(res);
    x = (answer == value);
    if (mustBeOk && wasOk && x) {
        println("successfully passed test: '" + input + "'");
        0
    } else if (&&(!(mustBeOk), !(wasOk))) {
        println("successfully passed test: '" + input + "'");
        0
    } else {
        wasOk_str = b2s(wasOk);
        mustBeOk_str = b2s(mustBeOk);
        println("test '" + input + "' failed, must be ok: " + mustBeOk_str + ", was ok: " + wasOk_str);
        println("must return:");
        println(answer);
        println("actually returned:");
        showResult(res, input);
        1
    }
}

runAndCheckStringTest(input : string, parser : (string, i32) -> Tuple<i32, string>, mustBeOk : i1, answer : string) -> i32 {
    res = parser(input, 0);
    i = first(res);
    wasOk = (i == length(input));
    value = second(res);
    x = (answer == value);
    if (mustBeOk && wasOk && x) {
        println("successfully passed test: '" + input + "'");
        0
    } else if (&&(!(mustBeOk), !(wasOk))) {
        println("successfully passed test: '" + input + "'");
        0
    } else {
        wasOk_str = b2s(wasOk);
        mustBeOk_str = b2s(mustBeOk);
        println("test '" + input + "' failed, must be ok: " + mustBeOk_str + ", was ok: " + wasOk_str);
        println("must return:");
        println(answer);
        println("actually returned:");
        showResult(res, input);
        1
    }
}

runIntTests(
    caption : string,
    parser : (string, i32) -> Tuple<i32, i32>,
    tests : Array<Tuple<string, i1, i32> >
) -> i32 {
    println(caption);
    failed = doRunIntTests(parser, tests, 0, 0);
    if (0 == failed) {
        println("Tests passed.");
    } else {
        f = i2s(failed);
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed;
}

doRunIntTests(
    parser : (string, i32) -> Tuple<i32, i32>,
    tests : Array<Tuple<string, i1, i32> >, 
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        input = first(test);
        mustBeOk = second(test);
        answer = third(test);
        x = runAndCheckIntTest(input, parser, mustBeOk, answer);
        doRunIntTests(parser, tests, i + 1, failed + x);
    }
}

runStringTests(
    caption : string,
    parser : (string, i32) -> Tuple<i32, string>,
    tests : Array<Tuple<string, i1, string> >
) -> i32 {
    println(caption);
    failed = doRunStringTests(parser, tests, 0, 0);
    if (0 == failed) {
        println("Tests passed.");
    } else {
        f = i2s(failed);
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed
}

doRunStringTests(
    parser : (string, i32) -> Tuple<i32, string>,
    tests : Array<Tuple<string, i1, string> >, 
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        input = first(test);
        mustBeOk = second(test);
        answer = third(test);
        x = runAndCheckStringTest(input, parser, mustBeOk, answer);
        doRunStringTests(parser, tests, i + 1, failed + x);
    }
}

runTestSuite(
    caption : string, 
    tests : Array<() -> i32>
) -> i32 {
    failed = doRunTestSuite(tests, 0, 0);
    if (0 == failed) {
        println("Test suite '" + caption + "' passed.");
    } else {
        f = i2s(failed);
        println("Test suite '" + caption + "' FAILED.");
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed
}

doRunTestSuite(
    tests : Array<() -> i32>,
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        x = test();
        doRunTestSuite(tests, i + 1, failed + x);
    }
}

gringo.flow::main() -> i0 {
    runTestSuite("parser combinators",
        array(
            testGringo
        )
    );
	quit(0);
}


generated_e_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_e1_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"+",
					compiletime::const1(0), 0
				),
				generated_e_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_e1_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_e2_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"*",
					compiletime::const1(0), 0
				),
				generated_e1_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_e2_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::tokenParseC(
			"a",
			compiletime::const1(0), 0
		),
		compiletime::tokenParseC(
			"b",
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

testGringo() -> i32 {
    test_set = array(
        tuple("a", true(), 0),
        tuple("b", true(), 0),
        tuple("a+b", true(), 0),
        tuple("a+a*b", true(), 0),
        tuple("a*b+a*b", true(), 0),
        tuple("a+a*a*a+b*b+a+b+a*b", true(), 0)
    );
    runIntTests("Testing a parser generated from gringo ... ", generated_e_rule, test_set);
}
