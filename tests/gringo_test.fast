import parsec;
import string_utils;

_0(x : string) -> i32 { 0; }
str_int(x : string, y : i32) -> Tuple<string, i32>  { tuple(x, y); }

showResult(res : Tuple<i32, ?>, input : string) -> i0 {
    i = first(res);
    if (0 > i) {
        i_str = i2s(i);
        a = "fail, i=" + i_str;
        println(a + "\n");
    } else if (i < length(input)) {
        i_str = i2s(i);
        len_str = i2s(length(input));
        println("fail: i=" + i_str + ", length(input)=" + len_str + "\n");
    } else {
        println("success, result:");
        println(second(res));
        println("");
    }
}

runTest(input : string, parser : (string, i32) -> Tuple<i32, ?>) -> i0 {
    println("running test '" + input + "'");
    res = parser(input, 0);
    showResult(res, input);
}

runAndCheckIntTest(input : string, parser : (string, i32) -> Tuple<i32, i32>, mustBeOk : i1, answer : i32) -> i32 {
    res = parser(input, 0);
    i = first(res);
    wasOk = (i == length(input));
    value = second(res);
    x = (answer == value);
    if (mustBeOk && wasOk && x) {
        println("successfully passed test: '" + input + "'");
        0
    } else if (&&(!(mustBeOk), !(wasOk))) {
        println("successfully passed test: '" + input + "'");
        0
    } else {
        wasOk_str = b2s(wasOk);
        mustBeOk_str = b2s(mustBeOk);
        println("test '" + input + "' failed, must be ok: " + mustBeOk_str + ", was ok: " + wasOk_str);
        println("must return:");
        println(answer);
        println("actually returned:");
        showResult(res, input);
        1
    }
}

runAndCheckStringTest(input : string, parser : (string, i32) -> Tuple<i32, string>, mustBeOk : i1, answer : string) -> i32 {
    res = parser(input, 0);
    i = first(res);
    wasOk = (i == length(input));
    value = second(res);
    x = (answer == value);
    if (mustBeOk && wasOk && x) {
        println("successfully passed test: '" + input + "'");
        0
    } else if (&&(!(mustBeOk), !(wasOk))) {
        println("successfully passed test: '" + input + "'");
        0
    } else {
        wasOk_str = b2s(wasOk);
        mustBeOk_str = b2s(mustBeOk);
        println("test '" + input + "' failed, must be ok: " + mustBeOk_str + ", was ok: " + wasOk_str);
        println("must return:");
        println(answer);
        println("actually returned:");
        showResult(res, input);
        1
    }
}

runIntTests(
    caption : string,
    parser : (string, i32) -> Tuple<i32, i32>,
    tests : Array<Tuple<string, i1, i32> >
) -> i32 {
    println(caption);
    failed = doRunIntTests(parser, tests, 0, 0);
    if (0 == failed) {
        println("Tests passed.");
    } else {
        f = i2s(failed);
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed;
}

doRunIntTests(
    parser : (string, i32) -> Tuple<i32, i32>,
    tests : Array<Tuple<string, i1, i32> >, 
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        input = first(test);
        mustBeOk = second(test);
        answer = third(test);
        x = runAndCheckIntTest(input, parser, mustBeOk, answer);
        doRunIntTests(parser, tests, i + 1, failed + x);
    }
}

runStringTests(
    caption : string,
    parser : (string, i32) -> Tuple<i32, string>,
    tests : Array<Tuple<string, i1, string> >
) -> i32 {
    println(caption);
    failed = doRunStringTests(parser, tests, 0, 0);
    if (0 == failed) {
        println("Tests passed.");
    } else {
        f = i2s(failed);
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed
}

doRunStringTests(
    parser : (string, i32) -> Tuple<i32, string>,
    tests : Array<Tuple<string, i1, string> >, 
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        input = first(test);
        mustBeOk = second(test);
        answer = third(test);
        x = runAndCheckStringTest(input, parser, mustBeOk, answer);
        doRunStringTests(parser, tests, i + 1, failed + x);
    }
}

runTestSuite(
    caption : string, 
    tests : Array<() -> i32>
) -> i32 {
    failed = doRunTestSuite(tests, 0, 0);
    if (0 == failed) {
        println("Test suite '" + caption + "' passed.");
    } else {
        f = i2s(failed);
        println("Test suite '" + caption + "' FAILED.");
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed
}

doRunTestSuite(
    tests : Array<() -> i32>,
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        x = test();
        doRunTestSuite(tests, i + 1, failed + x);
    }
}

gringo.flow::main() -> i0 {
    runTestSuite("Gringo translated to parser combinators",
        array(
            testGringoExp,
            testGringoGringo,
            testGringoGringoFull
        )
    );
	quit(0);
}

// Following functions are generated from: 
// e = e ("+" e)
//	|> e ("*" e)
//	|> "a" | "b";
// e
// 
// by generateFastParserFromGringo function

generated_e_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_e1_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"+",
					compiletime::const1(0), 0
				),
				generated_e_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_e1_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_e2_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"*",
					compiletime::const1(0), 0
				),
				generated_e1_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_e2_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::tokenParseC(
			"a",
			compiletime::const1(0), 0
		),
		compiletime::tokenParseC(
			"b",
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}



testGringoExp() -> i32 {
    test_set = array(
        tuple("a", true(), 0),
        tuple("b", true(), 0),
        tuple("a+b", true(), 0),
        tuple("a+a*b", true(), 0),
        tuple("a*b+a*b", true(), 0),
        tuple("a+a*a*a+b*b+a+b+a*b", true(), 0)
    );
    runIntTests("Testing a parser generated from gringo ... ", generated_e_rule, test_set);
}


// Following functions are generated from the gringo.gringo with all unquote operators removed
// by generateFastParserFromGringo function

generated_anychar_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::rangeParseC(
		0, 65535,
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_char_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::tokenParseC(
				"0x",
				compiletime::const1(0), 0
			),
			compiletime::plusParseC(
				generated_hexdigit_rule,
				compiletime::const1(0), 0
			),
			compiletime::const2(0), 0
		),
		generated_anychar_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_grammar_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_ws_rule,
		generated_term_rule,
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_hexdigit_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::rangeParseC(
			97, 102,
			compiletime::const1(0), 0
		),
		compiletime::choiceParseC(
			compiletime::rangeParseC(
				65, 70,
				compiletime::const1(0), 0
			),
			compiletime::rangeParseC(
				48, 57,
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_id_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::plusParseC(
		compiletime::choiceParseC(
			compiletime::rangeParseC(
				97, 122,
				compiletime::const1(0), 0
			),
			compiletime::choiceParseC(
				compiletime::rangeParseC(
					65, 90,
					compiletime::const1(0), 0
				),
				compiletime::choiceParseC(
					compiletime::rangeParseC(
						48, 57,
						compiletime::const1(0), 0
					),
					compiletime::tokenParseC(
						"_",
						compiletime::const1(0), 0
					),
					compiletime::const1(0), 0
				),
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_s_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::tokenParseC(
			" ",
			compiletime::const1(0), 0
		),
		compiletime::choiceParseC(
			compiletime::tokenParseC(
				"\t",
				compiletime::const1(0), 0
			),
			compiletime::choiceParseC(
				compiletime::tokenParseC(
					"\n",
					compiletime::const1(0), 0
				),
				compiletime::choiceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::tokenParseC(
								"//",
								compiletime::const1(0), 0
							),
							compiletime::starParseC(
								compiletime::sequenceParseC(
									compiletime::notPredicateParseC(
										compiletime::tokenParseC(
											"\n",
											compiletime::const1(0), 0
										),
										0, 0
									),
									generated_anychar_rule,
									compiletime::const2(0), 0
								),
								compiletime::const1(0), 0
							),
							compiletime::const2(0), 0
						),
						compiletime::tokenParseC(
							"\n",
							compiletime::const1(0), 0
						),
						compiletime::const2(0), 0
					),
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::tokenParseC(
								"/*",
								compiletime::const1(0), 0
							),
							compiletime::starParseC(
								compiletime::sequenceParseC(
									compiletime::notPredicateParseC(
										compiletime::tokenParseC(
											"*/",
											compiletime::const1(0), 0
										),
										0, 0
									),
									generated_anychar_rule,
									compiletime::const2(0), 0
								),
								compiletime::const1(0), 0
							),
							compiletime::const2(0), 0
						),
						compiletime::tokenParseC(
							"*/",
							compiletime::const1(0), 0
						),
						compiletime::const2(0), 0
					),
					compiletime::const1(0), 0
				),
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_string_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::starParseC(
		compiletime::sequenceParseC(
			compiletime::notPredicateParseC(
				compiletime::tokenParseC(
					"\"",
					compiletime::const1(0), 0
				),
				0, 0
			),
			generated_anychar_rule,
			compiletime::const2(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_stringq_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::starParseC(
		compiletime::sequenceParseC(
			compiletime::notPredicateParseC(
				compiletime::tokenParseC(
					"'",
					compiletime::const1(0), 0
				),
				0, 0
			),
			generated_anychar_rule,
			compiletime::const2(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_term_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_term1_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"|>",
					compiletime::const1(0), 0
				),
				generated_grammar_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_term1_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_term2_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::tokenParseC(
						"|",
						compiletime::const1(0), 0
					),
					generated_ws_rule,
					compiletime::const2(0), 0
				),
				generated_term1_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_term2_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_term3_rule,
		compiletime::optionalParseC(
			generated_term2_rule,
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_term3_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"$",
					compiletime::const1(0), 0
				),
				generated_ws_rule,
				compiletime::const2(0), 0
			),
			generated_term3_rule,
			compiletime::const2(0), 0
		),
		generated_term4_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_term4_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_term5_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"*",
					compiletime::const1(0), 0
				),
				generated_ws_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_term5_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_term6_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"+",
					compiletime::const1(0), 0
				),
				generated_ws_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_term6_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		generated_term7_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"?",
					compiletime::const1(0), 0
				),
				generated_ws_rule,
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

generated_term7_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::sequenceParseC(
				compiletime::tokenParseC(
					"!",
					compiletime::const1(0), 0
				),
				generated_ws_rule,
				compiletime::const2(0), 0
			),
			generated_term7_rule,
			compiletime::const2(0), 0
		),
		generated_term8_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_term8_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::tokenParseC(
							"(",
							compiletime::const1(0), 0
						),
						generated_ws_rule,
						compiletime::const2(0), 0
					),
					generated_term_rule,
					compiletime::const2(0), 0
				),
				compiletime::tokenParseC(
					")",
					compiletime::const1(0), 0
				),
				compiletime::const2(0), 0
			),
			generated_ws_rule,
			compiletime::const2(0), 0
		),
		compiletime::choiceParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::tokenParseC(
							"\"",
							compiletime::const1(0), 0
						),
						generated_string_rule,
						compiletime::const2(0), 0
					),
					compiletime::tokenParseC(
						"\"",
						compiletime::const1(0), 0
					),
					compiletime::const2(0), 0
				),
				generated_ws_rule,
				compiletime::const2(0), 0
			),
			compiletime::choiceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								compiletime::sequenceParseC(
									compiletime::sequenceParseC(
										compiletime::sequenceParseC(
											compiletime::sequenceParseC(
												compiletime::sequenceParseC(
													compiletime::tokenParseC(
														"'",
														compiletime::const1(0), 0
													),
													generated_char_rule,
													compiletime::const2(0), 0
												),
												compiletime::tokenParseC(
													"'",
													compiletime::const1(0), 0
												),
												compiletime::const2(0), 0
											),
											generated_ws_rule,
											compiletime::const2(0), 0
										),
										compiletime::tokenParseC(
											"-",
											compiletime::const1(0), 0
										),
										compiletime::const2(0), 0
									),
									generated_ws_rule,
									compiletime::const2(0), 0
								),
								compiletime::tokenParseC(
									"'",
									compiletime::const1(0), 0
								),
								compiletime::const2(0), 0
							),
							generated_char_rule,
							compiletime::const2(0), 0
						),
						compiletime::tokenParseC(
							"'",
							compiletime::const1(0), 0
						),
						compiletime::const2(0), 0
					),
					generated_ws_rule,
					compiletime::const2(0), 0
				),
				compiletime::choiceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								compiletime::tokenParseC(
									"'",
									compiletime::const1(0), 0
								),
								generated_stringq_rule,
								compiletime::const2(0), 0
							),
							compiletime::tokenParseC(
								"'",
								compiletime::const1(0), 0
							),
							compiletime::const2(0), 0
						),
						generated_ws_rule,
						compiletime::const2(0), 0
					),
					compiletime::choiceParseC(
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								compiletime::sequenceParseC(
									compiletime::sequenceParseC(
										compiletime::sequenceParseC(
											compiletime::sequenceParseC(
												generated_id_rule,
												generated_ws_rule,
												compiletime::const2(0), 0
											),
											compiletime::tokenParseC(
												"=",
												compiletime::const1(0), 0
											),
											compiletime::const2(0), 0
										),
										generated_ws_rule,
										compiletime::const2(0), 0
									),
									generated_term_rule,
									compiletime::const2(0), 0
								),
								compiletime::tokenParseC(
									";",
									compiletime::const1(0), 0
								),
								compiletime::const2(0), 0
							),
							generated_grammar_rule,
							compiletime::const2(0), 0
						),
						compiletime::sequenceParseC(
							generated_id_rule,
							generated_ws_rule,
							compiletime::const2(0), 0
						),
						compiletime::const1(0), 0
					),
					compiletime::const1(0), 0
				),
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

generated_ws_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::starParseC(
		generated_s_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}





testGringoGringo() -> i32 {
    grammar0 = "e = \"a\"; e";
    grammar1 = 
"e = e (\"+\" e)
	|> e (\"*\" e)
	|> \"a\" | \"b\";
e";
    grammar2 = 
"term = 
	term \"|>\" ws term 						
	|> term \"|\" ws term 						
	|> term term								
	|> \"$\" ws term								
	|> term \"*\" ws								
	|> term \"+\" ws								
	|> term \"?\" ws								
	|> \"!\" ws term								
	|> 
		\"(\" ws term \")\" ws							
		| '\"' string '\"' ws							
		| \"'\" char \"'\" ws \"-\" ws \"'\" char \"'\" ws	
		| \"'\" stringq \"'\" ws						
		| id ws \"=\" ws term \";\" ws term				
		| id ws										
	;

id = ('a'-'z' | 'A'-'Z' | '0'-'9' | '_')+;
int = '0'-'9'+;

string = (!'\"' '0x0'-'0xFFFF')*;
stringq = (!\"'\" '0x0'-'0xFFFF')*;
char = (\"0x\" hexdigit+) | anychar;
anychar = '0x0'-'0xFFFF';
hexdigit = 'a'-'f' | 'A'-'F' | '0'-'9';
ws = s*;
s = \" \" | \"	\" | \"
\" | \"//\" (!\"
\" anychar)* \"
\" | \"/*\" (!\"*/\" anychar)* \"*/\";
grammar = ws term;
grammar";
    test_set = array(
        tuple(grammar0, true(), 0),
        tuple(grammar1, true(), 0),
        tuple(grammar2, true(), 0),
    );
    runIntTests("Testing a gringo grammar without unquote ... ", generated_grammar_rule, test_set);
}



























zero_() -> i32 { 0; }

gringo_gringo_anychar_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::rangeParseC(
		0, 65535,
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_char_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::tokenParseC(
				"0x",
				compiletime::const1(0), 0
			),
			compiletime::plusParseC(
				gringo_gringo_hexdigit_rule,
				compiletime::const1(0), 0
			),
			compiletime::const2(0), 0
		),
		gringo_gringo_anychar_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_grammar_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_ws_rule,
		gringo_gringo_term_rule,
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_hexdigit_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::rangeParseC(
			97, 102,
			compiletime::const1(0), 0
		),
		compiletime::choiceParseC(
			compiletime::rangeParseC(
				65, 70,
				compiletime::const1(0), 0
			),
			compiletime::rangeParseC(
				48, 57,
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_id_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::plusParseC(
		compiletime::choiceParseC(
			compiletime::rangeParseC(
				97, 122,
				compiletime::const1(0), 0
			),
			compiletime::choiceParseC(
				compiletime::rangeParseC(
					65, 90,
					compiletime::const1(0), 0
				),
				compiletime::choiceParseC(
					compiletime::rangeParseC(
						48, 57,
						compiletime::const1(0), 0
					),
					compiletime::tokenParseC(
						"_",
						compiletime::const1(0), 0
					),
					compiletime::const1(0), 0
				),
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_s_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::tokenParseC(
			" ",
			compiletime::const1(0), 0
		),
		compiletime::choiceParseC(
			compiletime::tokenParseC(
				"\t",
				compiletime::const1(0), 0
			),
			compiletime::choiceParseC(
				compiletime::tokenParseC(
					"\n",
					compiletime::const1(0), 0
				),
				compiletime::choiceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::tokenParseC(
								"//",
								compiletime::const1(0), 0
							),
							compiletime::starParseC(
								compiletime::sequenceParseC(
									compiletime::notPredicateParseC(
										compiletime::tokenParseC(
											"\n",
											compiletime::const1(0), 0
										),
										0, 0
									),
									gringo_gringo_anychar_rule,
									compiletime::const2(0), 0
								),
								compiletime::const1(0), 0
							),
							compiletime::const2(0), 0
						),
						compiletime::tokenParseC(
							"\n",
							compiletime::const1(0), 0
						),
						compiletime::const2(0), 0
					),
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::tokenParseC(
								"/*",
								compiletime::const1(0), 0
							),
							compiletime::starParseC(
								compiletime::sequenceParseC(
									compiletime::notPredicateParseC(
										compiletime::tokenParseC(
											"*/",
											compiletime::const1(0), 0
										),
										0, 0
									),
									gringo_gringo_anychar_rule,
									compiletime::const2(0), 0
								),
								compiletime::const1(0), 0
							),
							compiletime::const2(0), 0
						),
						compiletime::tokenParseC(
							"*/",
							compiletime::const1(0), 0
						),
						compiletime::const2(0), 0
					),
					compiletime::const1(0), 0
				),
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_string_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::starParseC(
		compiletime::sequenceParseC(
			compiletime::notPredicateParseC(
				compiletime::tokenParseC(
					"\"",
					compiletime::const1(0), 0
				),
				0, 0
			),
			gringo_gringo_anychar_rule,
			compiletime::const2(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_stringq_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::starParseC(
		compiletime::sequenceParseC(
			compiletime::notPredicateParseC(
				compiletime::tokenParseC(
					"'",
					compiletime::const1(0), 0
				),
				0, 0
			),
			gringo_gringo_anychar_rule,
			compiletime::const2(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_term_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_term1_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::tokenParseC(
							"|>",
							compiletime::const1(0), 0
						),
						gringo_gringo_ws_rule,
						compiletime::const2(0), 0
					),
					gringo_gringo_term_rule,
					compiletime::const2(0), 0
				),
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_term1_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_term2_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::tokenParseC(
							"|",
							compiletime::const1(0), 0
						),
						gringo_gringo_ws_rule,
						compiletime::const2(0), 0
					),
					gringo_gringo_term1_rule,
					compiletime::const2(0), 0
				),
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_term2_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_term3_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				gringo_gringo_term2_rule,
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_term3_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::tokenParseC(
						"$",
						compiletime::const1(0), 0
					),
					gringo_gringo_ws_rule,
					compiletime::const2(0), 0
				),
				gringo_gringo_term3_rule,
				compiletime::const2(0), 0
			),
			emptyParseC(zero_),
			compiletime::const2(0), 0
		),
		gringo_gringo_term4_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_term4_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_term5_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::tokenParseC(
						"*",
						compiletime::const1(0), 0
					),
					gringo_gringo_ws_rule,
					compiletime::const2(0), 0
				),
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_term5_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_term6_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::tokenParseC(
						"+",
						compiletime::const1(0), 0
					),
					gringo_gringo_ws_rule,
					compiletime::const2(0), 0
				),
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_term6_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::sequenceParseC(
		gringo_gringo_term7_rule,
		compiletime::optionalParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::tokenParseC(
						"?",
						compiletime::const1(0), 0
					),
					gringo_gringo_ws_rule,
					compiletime::const2(0), 0
				),
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const2(0), 0
	);
	p(input, i);
}

gringo_gringo_term7_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::tokenParseC(
						"!",
						compiletime::const1(0), 0
					),
					gringo_gringo_ws_rule,
					compiletime::const2(0), 0
				),
				gringo_gringo_term7_rule,
				compiletime::const2(0), 0
			),
			emptyParseC(zero_),
			compiletime::const2(0), 0
		),
		gringo_gringo_term8_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_term8_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::choiceParseC(
		compiletime::sequenceParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::tokenParseC(
							"(",
							compiletime::const1(0), 0
						),
						gringo_gringo_ws_rule,
						compiletime::const2(0), 0
					),
					gringo_gringo_term_rule,
					compiletime::const2(0), 0
				),
				compiletime::tokenParseC(
					")",
					compiletime::const1(0), 0
				),
				compiletime::const2(0), 0
			),
			gringo_gringo_ws_rule,
			compiletime::const2(0), 0
		),
		compiletime::choiceParseC(
			compiletime::sequenceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::tokenParseC(
								"\"",
								compiletime::const1(0), 0
							),
							gringo_gringo_string_rule,
							compiletime::const2(0), 0
						),
						compiletime::tokenParseC(
							"\"",
							compiletime::const1(0), 0
						),
						compiletime::const2(0), 0
					),
					gringo_gringo_ws_rule,
					compiletime::const2(0), 0
				),
				emptyParseC(zero_),
				compiletime::const2(0), 0
			),
			compiletime::choiceParseC(
				compiletime::sequenceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								compiletime::sequenceParseC(
									compiletime::sequenceParseC(
										compiletime::sequenceParseC(
											compiletime::sequenceParseC(
												compiletime::sequenceParseC(
													compiletime::sequenceParseC(
														compiletime::tokenParseC(
															"'",
															compiletime::const1(0), 0
														),
														gringo_gringo_char_rule,
														compiletime::const2(0), 0
													),
													compiletime::tokenParseC(
														"'",
														compiletime::const1(0), 0
													),
													compiletime::const2(0), 0
												),
												gringo_gringo_ws_rule,
												compiletime::const2(0), 0
											),
											compiletime::tokenParseC(
												"-",
												compiletime::const1(0), 0
											),
											compiletime::const2(0), 0
										),
										gringo_gringo_ws_rule,
										compiletime::const2(0), 0
									),
									compiletime::tokenParseC(
										"'",
										compiletime::const1(0), 0
									),
									compiletime::const2(0), 0
								),
								gringo_gringo_char_rule,
								compiletime::const2(0), 0
							),
							compiletime::tokenParseC(
								"'",
								compiletime::const1(0), 0
							),
							compiletime::const2(0), 0
						),
						gringo_gringo_ws_rule,
						compiletime::const2(0), 0
					),
					emptyParseC(zero_),
					compiletime::const2(0), 0
				),
				compiletime::choiceParseC(
					compiletime::sequenceParseC(
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								compiletime::sequenceParseC(
									compiletime::tokenParseC(
										"'",
										compiletime::const1(0), 0
									),
									gringo_gringo_stringq_rule,
									compiletime::const2(0), 0
								),
								compiletime::tokenParseC(
									"'",
									compiletime::const1(0), 0
								),
								compiletime::const2(0), 0
							),
							gringo_gringo_ws_rule,
							compiletime::const2(0), 0
						),
						emptyParseC(zero_),
						compiletime::const2(0), 0
					),
					compiletime::choiceParseC(
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								compiletime::sequenceParseC(
									compiletime::sequenceParseC(
										compiletime::sequenceParseC(
											compiletime::sequenceParseC(
												compiletime::sequenceParseC(
													compiletime::sequenceParseC(
														gringo_gringo_id_rule,
														gringo_gringo_ws_rule,
														compiletime::const2(0), 0
													),
													compiletime::tokenParseC(
														"=",
														compiletime::const1(0), 0
													),
													compiletime::const2(0), 0
												),
												gringo_gringo_ws_rule,
												compiletime::const2(0), 0
											),
											gringo_gringo_term_rule,
											compiletime::const2(0), 0
										),
										compiletime::tokenParseC(
											";",
											compiletime::const1(0), 0
										),
										compiletime::const2(0), 0
									),
									gringo_gringo_ws_rule,
									compiletime::const2(0), 0
								),
								gringo_gringo_term_rule,
								compiletime::const2(0), 0
							),
							emptyParseC(zero_),
							compiletime::const2(0), 0
						),
						compiletime::sequenceParseC(
							compiletime::sequenceParseC(
								gringo_gringo_id_rule,
								gringo_gringo_ws_rule,
								compiletime::const2(0), 0
							),
							emptyParseC(zero_),
							compiletime::const2(0), 0
						),
						compiletime::const1(0), 0
					),
					compiletime::const1(0), 0
				),
				compiletime::const1(0), 0
			),
			compiletime::const1(0), 0
		),
		compiletime::const1(0), 0
	);
	p(input, i);
}

gringo_gringo_ws_rule(input : string, i : i32) -> Tuple<i32, i32> {
	p = compiletime::starParseC(
		gringo_gringo_s_rule,
		compiletime::const1(0), 0
	);
	p(input, i);
}








testGringoGringoFull() -> i32 {
    grammar0 = "e = \"a\"; e";
    grammar1 = 
"e = e (\"+\" e)
	|> e (\"*\" e)
	|> \"a\" | \"b\";
e";
    grammar2 = 
"term = 
	term \"|>\" ws term 							$\"GPrecedence\"
	|> term \"|\" ws term 						$\"GChoice\"
	|> term term								$\"GSeq\"
	|> \"$\" ws term								$\"GUnquote\"
	|> term \"*\" ws								$\"GStar\"
	|> term \"+\" ws								$\"GPlus\"
	|> term \"?\" ws								$\"GOpt\"
	|> \"!\" ws term								$\"GNegate\"
	|> 
		\"(\" ws term \")\" ws							
		| '\"' string '\"' ws							$\"GString\"
		| \"'\" char \"'\" ws \"-\" ws \"'\" char \"'\" ws	$\"GRange\"
		| \"'\" stringq \"'\" ws						$\"GString\"
		| id ws \"=\" ws term \";\" ws term				$\"GRule\"
		| id ws										$\"GVar\"
	;

id = $('a'-'z' | 'A'-'Z' | '0'-'9' | '_')+;
int = $'0'-'9'+;

string = $(!'\"' '0x0'-'0xFFFF')*;
stringq = $(!\"'\" '0x0'-'0xFFFF')*;
char = $(\"0x\" hexdigit+) | $anychar;
anychar = '0x0'-'0xFFFF';
hexdigit = 'a'-'f' | 'A'-'F' | '0'-'9';
ws = s*;
s = \" \" | \"	\" | \"
\" | \"//\" (!\"
\" anychar)* \"
\" | \"/*\" (!\"*/\" anychar)* \"*/\";
grammar = ws term;
grammar
";
    test_set = array(
        tuple(grammar0, true(), 0),
        tuple(grammar1, true(), 0),
        tuple(grammar2, true(), 0),
    );
    runIntTests("Testing a full gringo grammar ... ", gringo_gringo_grammar_rule, test_set);
}
