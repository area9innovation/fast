import parsec;
import string_utils;

_0(x : string) -> i32 { 0; }
str_int(x : string, y : i32) -> Tuple<string, i32>  { tuple(x, y); }

showResult(res : Tuple<i32, ?>, input : string) -> i0 {
    i = first(res);
    if (0 > i) {
        i_str = i2s(i);
        a = "fail, i=" + i_str;
        println(a + "\n");
    } else if (i < length(input)) {
        i_str = i2s(i);
        len_str = i2s(length(input));
        println("fail: i=" + i_str + ", length(input)=" + len_str + "\n");
    } else {
        println("success, result:");
        println(second(res));
        println("");
    }
}

runTest(input : string, parser : (string, i32) -> Tuple<i32, ?>) -> i0 {
    println("running test '" + input + "'");
    res = parser(input, 0);
    showResult(res, input);
}

runAndCheckIntTest(input : string, parser : (string, i32) -> Tuple<i32, i32>, mustBeOk : i1, answer : i32) -> i32 {
    res = parser(input, 0);
    i = first(res);
    wasOk = (i == length(input));
    value = second(res);
    x = (answer == value);
    if (mustBeOk && wasOk && x) {
        println("successfully passed test: '" + input + "'");
        0
    } else if (&&(!(mustBeOk), !(wasOk))) {
        println("successfully passed test: '" + input + "'");
        0
    } else {
        wasOk_str = b2s(wasOk);
        mustBeOk_str = b2s(mustBeOk);
        println("test '" + input + "' failed, must be ok: " + mustBeOk_str + ", was ok: " + wasOk_str);
        println("must return:");
        println(answer);
        println("actually returned:");
        showResult(res, input);
        1
    }
}

runAndCheckStringTest(input : string, parser : (string, i32) -> Tuple<i32, string>, mustBeOk : i1, answer : string) -> i32 {
    res = parser(input, 0);
    i = first(res);
    wasOk = (i == length(input));
    value = second(res);
    x = (answer == value);
    if (mustBeOk && wasOk && x) {
        println("successfully passed test: '" + input + "'");
        0
    } else if (&&(!(mustBeOk), !(wasOk))) {
        println("successfully passed test: '" + input + "'");
        0
    } else {
        wasOk_str = b2s(wasOk);
        mustBeOk_str = b2s(mustBeOk);
        println("test '" + input + "' failed, must be ok: " + mustBeOk_str + ", was ok: " + wasOk_str);
        println("must return:");
        println(answer);
        println("actually returned:");
        showResult(res, input);
        1
    }
}

oper_ints(x : i32, oper_y : Tuple<string, i32>) -> i32 {
    oper = first(oper_y) : string;
    y = second(oper_y);
    if (oper == "+") {
        x + y;
    } else if (oper == "-") {
        x - y;
    } else if (oper == "*") {
        x * y;
    } else if (oper == "/") {
        x / y;
    } else {
        0;
    }
}

compiletime::digitParser() -> (string, i32) -> Tuple<i32, string> {
    compiletime::choiceManyParseC(
        array(
            compiletime::tokenParseC("0", idfn, ""), 
            compiletime::tokenParseC("1", idfn, ""), 
            compiletime::tokenParseC("2", idfn, ""), 
            compiletime::tokenParseC("3", idfn, ""), 
            compiletime::tokenParseC("4", idfn, ""), 
            compiletime::tokenParseC("5", idfn, ""), 
            compiletime::tokenParseC("6", idfn, ""), 
            compiletime::tokenParseC("7", idfn, ""), 
            compiletime::tokenParseC("8", idfn, ""), 
            compiletime::tokenParseC("9", idfn, "")
        ), 
        idfn, ""
    );
}

decNumAddDigit(hi_digit : string, lo_num : string) -> string {
    hi_digit + lo_num;
}

decNumber(input : string, i : i32) -> Tuple<i32, string> {
    p = compiletime::choicePairParseC(
        compiletime::sequenceParseC(
            compiletime::digitParser(),
            decNumber,
            decNumAddDigit, ""
        ),
        compiletime::digitParser(),
        idfn, ""
    );
    p(input, i);
}

arithmParser(input : string, i : i32) -> Tuple<i32, i32> {
    p = compiletime::choicePairParseC(
        compiletime::modifyParseC(
            decNumber,
            s2i, 0
        ),
        compiletime::sequenceParseC(
            compiletime::tokenParseC("(", _0, 0), 
            compiletime::sequenceParseC(
                arithmParser,
                compiletime::sequenceParseC(
                    compiletime::choiceManyParseC(
                        array(
                            compiletime::tokenParseC("+", idfn, ""), 
                            compiletime::tokenParseC("-", idfn, ""),
                            compiletime::tokenParseC("*", idfn, ""), 
                            compiletime::tokenParseC("/", idfn, "")
                        ),
                        idfn, ""
                    ),
                    compiletime::sequenceParseC(
                        arithmParser,
                        compiletime::tokenParseC(")", _0, 0), 
                        firstOf, 0
                    ),
                    str_int, tuple("", 0)
                ),
                oper_ints, 0
            ),
            secondOf, 0
        ),
        idfn, 0
    );
    p(input, i);
}

runIntTests(
    caption : string,
    parser : (string, i32) -> Tuple<i32, i32>,
    tests : Array<Tuple<string, i1, i32> >
) -> i32 {
    println(caption);
    failed = doRunIntTests(parser, tests, 0, 0);
    if (0 == failed) {
        println("Tests passed.");
    } else {
        f = i2s(failed);
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed;
}

doRunIntTests(
    parser : (string, i32) -> Tuple<i32, i32>,
    tests : Array<Tuple<string, i1, i32> >, 
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        input = first(test);
        mustBeOk = second(test);
        answer = third(test);
        x = runAndCheckIntTest(input, parser, mustBeOk, answer);
        doRunIntTests(parser, tests, i + 1, failed + x);
    }
}

runStringTests(
    caption : string,
    parser : (string, i32) -> Tuple<i32, string>,
    tests : Array<Tuple<string, i1, string> >
) -> i32 {
    println(caption);
    failed = doRunStringTests(parser, tests, 0, 0);
    if (0 == failed) {
        println("Tests passed.");
    } else {
        f = i2s(failed);
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed
}

doRunStringTests(
    parser : (string, i32) -> Tuple<i32, string>,
    tests : Array<Tuple<string, i1, string> >, 
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        input = first(test);
        mustBeOk = second(test);
        answer = third(test);
        x = runAndCheckStringTest(input, parser, mustBeOk, answer);
        doRunStringTests(parser, tests, i + 1, failed + x);
    }
}

testArithm() -> i32 {
    test_set_1 = array(
        tuple("0", true(), 0),
        tuple("1", true(), 1),
        tuple("10", true(), 10),
        tuple("(0+0)", true(), 0),
        tuple("(1+1)", true(), 2),
        tuple("(1+1))", false(), 0),
        tuple("(1+(1+1))", true(), 3),
        tuple("((1+1)+1)", true(), 3),
        tuple("(1+(1-1))", true(), 1),
        tuple("(1+(1-+1))", false(), 0)
    );
    test_set_2 = array(
        tuple("(1*(3-2))", true(), 1),
        tuple("((1+2)*(3-1))", true(), 6),
        tuple("((132+234)*(31-14))", true(), 6222),
        tuple("(132+234)", true(), 366),
        tuple("(12*24)", true(), 288),
        tuple("132", true(), 132),
        tuple("234", true(), 234)
    );
    runIntTests("Testing simple arithmetics parser ... ", arithmParser, test_set_1 + test_set_2);
}

testStarAction(arr : Array<string>) -> string {
    doTestStarAction(arr, "", 0);
}

doTestStarAction(arr : Array<string>, acc : string, i : i32) -> string {
    if (i == length(arr)) {
        acc;
    } else {
        x = index(arr, i, "");
        new_acc = x + ("-" + acc);
        doTestStarAction(arr, new_acc, i + 1);
    }
}

testStar() -> i32 {
    star = compiletime::starParseC(
        digitParser(),
        testStarAction,
        ""
    );
    test_set = array(
        tuple("2", true(), "2-"),
        tuple("234", true(), "4-3-2-"),
        tuple("23454643", true(), "3-4-6-4-5-4-3-2-"),
        tuple("234sdfd", false(), ""),
        tuple("dsfds", false(), ""),
        tuple("", true(), "")
    );
    runStringTests("Testing Kleene star ... ", star, test_set);
}

testPlus() -> i32 {
    plus = compiletime::plusParseC(
        digitParser(),
        testStarAction,
        ""
    );
    test_set = array(
        tuple("2", true(), "2-"),
        tuple("234", true(), "4-3-2-"),
        tuple("23454643", true(), "3-4-6-4-5-4-3-2-"),
        tuple("234sdfd", false(), ""),
        tuple("dsfds", false(), ""),
        tuple("", false(), "")
    );
    runStringTests("Testing Kleene plus ... ", plus, test_set);
}

runTestSuite(
    caption : string, 
    tests : Array<() -> i32>
) -> i32 {
    failed = doRunTestSuite(tests, 0, 0);
    if (0 == failed) {
        println("Test suite '" + caption + "' passed.");
    } else {
        f = i2s(failed);
        println("Test suite '" + caption + "' FAILED.");
        println("Error: " + f + " tests failed.");
    };
    println("");
    failed
}

doRunTestSuite(
    tests : Array<() -> i32>,
    i : i32, 
    failed : i32
) -> i32 {
    if (i == length(tests)) {
        failed;
    } else {
        test = index(tests, i);
        x = test();
        doRunTestSuite(tests, i + 1, failed + x);
    }
}

parsec.flow::main() -> i0 {
    runTestSuite("parser combinators",
        array(
            testArithm,
            testStar,
            testPlus
        )
    );
	quit(0);
}
