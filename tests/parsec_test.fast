import parsec;

one() -> i32 { 1; }
two() -> i32 { 2; }
idfn(x : ?) -> ? { x; }

_0(x : string) -> i32 { 0; }
_1(x : string) -> i32 { 1; }
_2(x : string) -> i32 { 2; }
_3(x : string) -> i32 { 3; }
_4(x : string) -> i32 { 4; }
_5(x : string) -> i32 { 5; }
_6(x : string) -> i32 { 6; }
_7(x : string) -> i32 { 7; }
_8(x : string) -> i32 { 8; }
_9(x : string) -> i32 { 9; }

add_five(x : i32) -> i32 { x + 5; }
add_ints(x : i32, y : i32) -> i32  { x + y; }
//pair_of(x : ?, y : ??) -> Tuple<?, ??>  { tuple(x, y); }
str_int(x : string, y : i32) -> Tuple<string, i32>  { tuple(x, y); }

showResult(res : Tuple<i32, ?>, input : string) -> void {
    i = first(res);
    if (0 > i) {
        println("fail, i=" + i2s(i) + "\n");
    } else if (i < length(input)) {
        println("fail: i=" + i2s(i) + ", length(input)=" + i2s(length(input)) + "\n");
    } else {
        println("success, result:");
        println(second(res));
        println("");
    }
}

runTest(input : string, parser : (string, i32) -> Tuple<i32, ?>) -> void {
    println("running test '" + input + "'");
    res = parser(input, 0);
    showResult(res, input);
}

/*
testEmpty() -> void {
    println("Testing empty string parser");
    p0 = compiletime::emptyParseC(one);
    println(p0("a", 0));
    println(p0("b", 0));
    println(p0("ab", 0));
    println(p0("aa", 0));
    println(p0("", 0));
    println("");
}

testInputEnd() -> void {
    println("Testing input end parser");
    p1 = compiletime::inputEndParseC(one, 2);
    println(p1("a", 0));
    println(p1("b", 0));
    println(p1("ab", 0));
    println(p1("aa", 0));
    println(p1("", 0));
    println("");
}

testToken() -> void {
    println("Testing token string parser");
    p2 = compiletime::tokenParseC("ab", _1, 2);
    println("a: ");
    println(p2("a", 0));
    println("b: ");
    println(p2("b", 0));
    println("ab: ");
    println(p2("ab", 0));
    println("aa: ");
    println(p2("aa", 0));
    println("aab: ");
    println(p2("aab", 1));
    println(" aab: ");
    println(p2(" aab", 2));
    println(": ");
    println(p2("", 0));
    println("abcdef: ");
    println(p2("abcdef", 0));
    println("");
}

testModify() -> void {
    println("Testing modify semantic action parser");
    //p3 = compiletime::modifyParseC(p2, add_five, 3);
    p3 = compiletime::modifyParseC(tokenParseC("ab", _1, 2), add_five, 3);
    println(p3("a", 0));
    println(p3("b", 0));
    println(p3("ab", 0));
    println(p3("aa", 0));
    println(p3("aab", 1));
    println(p3(" aab", 2));
    println(p3("", 0));
    println(p3("abcdef", 0));
    println("");
}

testSequence() -> void {
    println("Testing sequence of parsers");
     p4 = compiletime::sequenceParseC(
        tokenParseC("ab", _1, 2), 
        tokenParseC("cd", _2, 2),
        add_ints,
        4
    );
    println("a: ");
    println(p4("a", 0));
    println("abcdef: ");
    println(p4("abcdef", 0));
    println("");
}

testChoice() -> void {
    println("Testing choice of parser");
    p4 = compiletime::choicePairParseC(
        tokenParseC("a", _1, 2), 
        tokenParseC("b", _2, 2),
        add_five,
        45
    );
    println("a: ");
    println(p4("a", 0));
    println("b: ");
    println(p4("b", 0));
    println("c: ");
    println(p4("c", 0));
    println("abcdef: ");
    println(p4("abcdef", 0));
    println("abcdef: ");
    println(p4("abcdef", 1));
    println("abcdef: ");
    println(p4("abcdef", 2));
    println("");
}
*/



oper_ints(x : i32, oper_y : Tuple<string, i32>) -> i32 {
    oper = first(oper_y);
    y = second(oper_y);
    if (oper == "+") {
        x + y;
    } else if (oper == "-") {
        x - y;
    } else if (oper == "*") {
        x * y;
    } else if (oper == "/") {
        x / y;
    } else {
        0;
    }
}

compiletime::digitParser() -> (string, i32) -> Tuple<i32, string> {
    compiletime::choiceManyParseC(
        array(
            compiletime::tokenParseC("0", idfn, ""), 
            compiletime::tokenParseC("1", idfn, ""), 
            compiletime::tokenParseC("2", idfn, ""), 
            compiletime::tokenParseC("3", idfn, ""), 
            compiletime::tokenParseC("4", idfn, ""), 
            compiletime::tokenParseC("5", idfn, ""), 
            compiletime::tokenParseC("6", idfn, ""), 
            compiletime::tokenParseC("7", idfn, ""), 
            compiletime::tokenParseC("8", idfn, ""), 
            compiletime::tokenParseC("9", idfn, "")
        ), 
        idfn, ""
    );
}

decNumAddDigit(hi_digit : string, lo_num : string) -> string {
    hi_digit + lo_num;
}

decNumber(input : string, i : i32) -> Tuple<i32, string> {
    p = compiletime::choicePairParseC(
        compiletime::sequenceParseC(
            compiletime::digitParser(),
            decNumber,
            decNumAddDigit, ""
        ),
        compiletime::digitParser(),
        idfn, ""
    );
    p(input, i);
}

arithmParser(input : string, i : i32) -> Tuple<i32, i32> {
    p = compiletime::choicePairParseC(
        compiletime::modifyParseC(
            decNumber,
            s2i, 0
        ),
        compiletime::sequenceParseC(
            compiletime::tokenParseC("(", _0, 0), 
            compiletime::sequenceParseC(
                arithmParser,
                compiletime::sequenceParseC(
                    compiletime::choiceManyParseC(
                        array(
                            compiletime::tokenParseC("+", idfn, ""), 
                            compiletime::tokenParseC("-", idfn, ""),
                            compiletime::tokenParseC("*", idfn, ""), 
                            compiletime::tokenParseC("/", idfn, "")
                        ),
                        idfn, ""
                    ),
                    compiletime::sequenceParseC(
                        arithmParser,
                        compiletime::tokenParseC(")", _0, 0), 
                        firstOf, 0
                    ),
                    str_int, tuple("", 0)
                ),
                oper_ints, 0
            ),
            secondOf, 0
        ),
        idfn, 0
    );
    p(input, i);
}

testArithm() -> void {
    println("Testing simple arithmetics parser");
    runTest("0", arithmParser);
    runTest("1", arithmParser);
    runTest("10", arithmParser);
    runTest("(0+0)", arithmParser);
    runTest("(1+1)", arithmParser);
    runTest("(1+1))", arithmParser);
    runTest("(1+(1+1))", arithmParser);
    runTest("((1+1)+1)", arithmParser);
    runTest("(1+(1-1))", arithmParser);
    runTest("(1+(1-+1))", arithmParser);
    runTest("(1*(3-2))", arithmParser);
    runTest("((1+2)*(3-1))", arithmParser);
    runTest("((132+234)*(31-14))", arithmParser);
    runTest("(132+234)", arithmParser);
    runTest("(12*24)", arithmParser);
    runTest("132", arithmParser);
    runTest("234", arithmParser);
    println("");
}


testStarAction(arr : Array<string>) -> string {
    doTestStarAction(arr, "", 0);
}

doTestStarAction(arr : Array<string>, acc : string, i : i32) -> string {
    if (i == length(arr)) {
        acc;
    } else {
        x = index(arr, i, "");
        new_acc = x + ("-" + acc);
        doTestStarAction(arr, new_acc, i + 1);
    }
}

testStar() -> void {
    p = compiletime::starParseC(
        digitParser(),
        testStarAction,
        ""
    );
    println("Testing Kleene star");
    runTest("2", p);
    runTest("234", p);
    runTest("23454643", p);
    runTest("234sdfd", p);
    runTest("dsfds", p);
    runTest("", p);
    q = compiletime::plusParseC(
        digitParser(),
        testStarAction,
        ""
    );
    println("Testing Kleene plus");
    runTest("2", q);
    runTest("234", q);
    runTest("23454643", q);
    runTest("234sdfd", q);
    runTest("dsfds", q);
    runTest("", q);
}

parsec.flow::main() -> i0 {
/*
    testEmpty();
    testInputEnd();
    testToken();
    testModify();
    testSequence();
    testChoice();
*/
    testArithm();
    testStar();
	quit(0);
}
