import runtime;
import parsec;
import list;

addVerbatim(acc : List<string>, s : string) -> List<string> {
	if (s == "Sum") {
		l = head(acc, "");
		r = head(tail(acc), "");
		cons(l + "\n" + r + "\n+", tail(tail(acc)));
	} else if (s == "Prod") {
		l = head(acc, "");
		r = head(tail(acc), "");
		cons(l + "\n" + r + "\n*", tail(tail(acc)));
	} else {
		println("unknown semantic action: " + s);
		acc;
	}
}

addMatched(acc : List<string>, s : string) -> List<string> {
	qs = "\"" + s + "\"";
	cons(qs, acc);
}

gringo_exp1.flow::main() -> i0 {
	test = "1+2*234+12*35*42";
	r = gringo_exp1_e_rule(test, 0, list());
	i = first(r);
	println("processing: " + test);
	println("result:");
	println(head(second(r), "not matched (B)"));
	println("tail:");
	println(tail(second(r)));
	quit(0);
}


// Generated by 
// gringo file=gringo/exp1.gringo fast=1 accTYpe='List<string>' verb=addVerbatim matched=addMatched


gringo_exp1_e_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::sequenceParseC1(
		gringo_exp1_e1_rule,
		compiletime::optionalParseC1(
			compiletime::sequenceParseC1(
				compiletime::sequenceParseC1(
					compiletime::tokenParseC1("+"),
					gringo_exp1_e_rule
				),
				compiletime::addVerbatimParseC1(addVerbatim, "Sum")
			)
		)
	);
	p(input, i, acc);
}

gringo_exp1_e1_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::sequenceParseC1(
		gringo_exp1_e2_rule,
		compiletime::optionalParseC1(
			compiletime::sequenceParseC1(
				compiletime::sequenceParseC1(
					compiletime::tokenParseC1("*"),
					gringo_exp1_e1_rule
				),
				compiletime::addVerbatimParseC1(addVerbatim, "Prod")
			)
		)
	);
	p(input, i, acc);
}

gringo_exp1_e2_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::addMatchedParseC1(
		gringo_exp1_var_rule,
		addMatched
	);
	p(input, i, acc);
}

gringo_exp1_var_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::plusParseC1(
		compiletime::rangeParseC1(48, 57)
	);
	p(input, i, acc);
}

