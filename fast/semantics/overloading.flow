import fast/fast_ast;
import fast/semantics/helpers;
import fast/semantics/utils;
import fast/semantics/overload;

export {
	// Resolves overloading of calls.
	// This also happens to simplify sequences of length 0 and 1
	overloadFastAst(f : FastAst) -> FastAst;
}

overloadFastAst(f : FastAst) -> FastAst {
	// Bind a map of overloaded names
	names : Tree<string, [FastFunction]> = fold(f.functions, makeTree(), \acc, function -> {
		treePushToArrayValue(acc, function.id, function);
	});

	overloadRenames : Tree<string, [FastOverload]> = foldTree(names, makeTree(), \name, fns : [FastFunction], acc -> {
		if (length(fns) > 1) {
			fold(fns, acc, \acc2 : Tree<string, [FastOverload]>, fn -> {
				overload = makeFastOverload(fn);
				oname : FastOverload = fastOverloadName(overload);
				treePushToArrayValue(acc2, name, oname);
			});
		} else acc;
	});

	globals = map(f.globals, \global -> {
		FastGlobalVar(global with value = overloadFExp(overloadRenames, global.value));
	});

	functions = map(f.functions, \function -> {
		id = function.id;
		if (containsKeyTree(overloadRenames, id)) {
			overload = makeFastOverload(function);
			oname : FastOverload = fastOverloadName(overload);
			FastFunction(function with id = oname.name, body = overloadFExp(overloadRenames, function.body));
		} else FastFunction(function with body = overloadFExp(overloadRenames, function.body));
	});

	FastAst(
		f with globals = globals, functions = functions
	);
}

// Rename all occurences of the overloadRenames names in calls and first-order var-refs
overloadFExp(overloadRenames : Tree<string, [FastOverload]>, f : FExp) -> FExp {
	mapFExp(f, \ex -> {
		switch (ex) {
			FCallOp(language, op, args, info): {
				call = FastOverload(language, op, map(args, \a -> a.info.type), map(args, \a -> a.info.effect));
				overloads = getTreeArrayValue(overloadRenames, op);
				oname = findBestOverload(call, overloads).name;
				FCallOp(ex with op = oname);
			}
			FCall(fn, args, info): {
				name = getFVar(fn);
				if (name != "") {
					call = FastOverload("", name, map(args, \a -> a.info.type), map(args, \a -> a.info.effect));
					overloads = getTreeArrayValue(overloadRenames, name);
					oname = findBestOverload(call, overloads).name;
					// This can be a "first-order" call of local name so we keep it as FCall
					FCall(FVar(oname, fn.info), args, info);
				} else {
					ex;
				}
			}
			FVar(id, info): {
				switch (info.type : FastType) {
					FTypeFunction(args, rt): {
						// First order use of a function. OK, we go nuts here
						call = FastOverload("", id, args, map(args, \__ -> info.effect));
						overloads = getTreeArrayValue(overloadRenames, id);
						oname = findBestOverload(call, overloads).name;
						FVar(oname, info);
					}
					default: ex;
				}
			}
			FSequence(s, info): {
				if (s == []) {
					FVoid()
				} else if (length(s) == 1) {
					s[0];
				} else ex;
			}
			default: ex;
		}
	})
}
