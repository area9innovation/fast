import gringo/utils;
import math/math;

export {
	/*
	This does left recursion rewriting
	e1 = e1 "+" e2
		| rest
	
	->

	e1 = rest e1-temp;
	e1-temp = ("+" e2 )*;
	*/
	rewriteLeftRecursion(g : GTerm) -> GTerm;

	/* 
	TODO: We should factor common prefixes first:

	e1 = e1 tail1
		| e1 tail2
		| rest

		->

	e1 = e1 (tail1 | tail2) 
		| rest
	*/
}

rewriteLeftRecursion(g : GTerm) -> GTerm {
	switch (g) {
		GRule(rule, term, body): {
			nterm = switch (term) {
				GChoice(left, rest): {
					switch (left) {
						GSeq(first, rtail): {
							switch (first) {
								GVar(lid, lpower): {
									if (lid == rule) {
										/*
										We do this transformation:

											e1 = e1 tail | rest
											== GRule(e1, GChoice(GSeq(GVar(rule, 0), tail), rest))

											-> 

											e1 = rest tail*;
											== GRule(e1, GSeq(rest, GStar(tail)))
										*/
										GSeq(rest, GStar(rtail))
									} else {
										term
									}
								}
								default: term;
							}
						}
						default: term;
					}
				}
				default: term;
			}
			GRule(rule, nterm, rewriteLeftRecursion(body));
		}
		GSeq(left, right): {
			GSeq(rewriteLeftRecursion(left), rewriteLeftRecursion(right));
		}
		default: g;
	}
}
