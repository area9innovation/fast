import gringo/gringo_ast;
import runtime;

export {
	gringoGrammar() -> GTerm;
}

gringoGrammar() -> GTerm {
	ws = GVar("ws", 0);
	GRule("term", 
		gchoices([
			// term(1) "|" term(2)	// Choice
			gseq([GVar("term", 1), GString("|"), ws, GVar("term", 2), GUnquote(GString("choice"))]),
			// term(10) term(11)		// Sequence
			gseq([GVar("term", 10), GVar("term", 11), GUnquote(GString("seq"))]),
			// term(12) "*"			// 0 or more
			gseq([GVar("term", 12), GString("*"), ws, GUnquote(GString("star"))]),
			// term(12) "+"			// One or more
			gseq([GVar("term", 12), GString("+"), ws, GUnquote(GString("plus"))]),
			// term(12) "?"			// Optional
			gseq([GVar("term", 12), GString("?"), ws, GUnquote(GString("opt"))]),
			//	| term(13) ":" type		// Type annotation
			// "!" term(0)			// Negation
			gseq([GString("!"), ws, GVar("term", 0)]),
			// "(" term(0) ")" 		// Grouping
			gseq([GString("("), ws, GVar("term", 0), GString(")"), ws]),
			// "$" unquote
			gseq([GString("$"), ws, GVar("term", 0), GUnquote(GString("unquote"))]),
			//	"{" ws form+ "}" ws term						{ GAction($form+) }
			gseq([GString("{"), ws, GPlus(GVar("form", 0)), GString("}"), ws]),

			// string				// Constant string
			gseq([GString("\""), GUnquote(GStar(
					GSeq(
						GNegate(GString("\"")),
						GRange(0, 0xffff)
					)
				)),
				GString("\""), ws
			]),
			// char "-" char			// Range
			gseq([GString("'"), GVar("char", 0), GString("'"), GString("-"), GString("'"), GVar("char", 0), GString("'"), ws]),
			// id "=" term(0) ";"	// Binding
			gseq([GVar("id", 0), ws, GString("="), ws, GVar("term", 1), GString(";"), ws, GUnquote(GString("bind"))]),
			// id "(" int ")"		// Rule ref with power
			gseq([GVar("id", 0), ws, GString("("), ws, GVar("int", 0), ws, GString(")"), ws, GUnquote(GString("id#"))]),
			// id					// Rule ref
			gseq([GVar("id", 0), ws])
		]),

		// form = "$" term(0) | formtext;
		GRule("form", 
			GChoice(
				gseq([GString("$"), ws, GVar("term", 0)]),
				GVar("formtext", 0)
			),

		// formtext = $((!("$" | "}") char)*)
		GRule("formtext", GUnquote(
			gseq([
				GNegate(
					GChoice(GString("$"), GString("}"))
				),
				GVar("char", 0)
			])
		),

		// id: 'a'-'z'+
		GRule("id", GUnquote(GPlus(
			GRange(97, 122),
		)),

		// int: '0'-'9'+
		GRule("int", GUnquote(GPlus(
			GRange(48, 57)
		)),
		GRule("char", GChoice(GSeq(GString("0x"), GPlus(GVar("hexdigit", 0))), GRange(0, 0xffff)),

		GRule("hexdigit", gchoices([
			GRange(65, 70),
			GRange(97, 102),
			GRange(48, 57)
		]),

		GRule("ws", GStar(GVar("s", 0)),

		GRule("s", gchoices([GString(" "), GString("\t"), GString("\n")]),

		GRule("grammar", 
			gseq([
				GVar("ws", 0),
				GVar("term", 0)
			]),

		// Parse a term!
		GVar("grammar", 0)
		
		))))))))
	));
}
