import gringo/gringo_ast;
import gringo/gringo_action;
import gringo/gringo_pretty;
import ds/tree;
import string;
import ds/set;

export {
	gringoParse(env : GringoEnv<?>, term : GTerm) -> GringoEnv<?>;

	GringoEnv(
		// The string we are parsing
		input : string,
		// The rules
		names : Tree<string, GTerm>,
		// The position in the input
		i : int,
		// The action function
		action : GringoAction<?>,
		// The output produced so far
		output : ?,
		// Did parsing fail?
		fail : bool,
		// Should we print debugging output?
		verbose : bool,
	);
}

indent = ref "";

gringoParse(env : GringoEnv<?>, gterm : GTerm) -> GringoEnv<?> {
	switch (gterm) {
		GRule(id, term, body): {
			if (env.verbose) {
				println(^indent + "Bound " + id);
			}
			nenv = GringoEnv(
				env with names = setTree(env.names, id, term)
			);
			gringoParse(nenv, body);
		}
		GPrecedence(left, right): {
			lenv = gringoParse(env,left);
			if (lenv.fail) {
				gringoParse(env, right);
			} else lenv
		}
		GChoice(left, right): {
			lenv = gringoParse(env,left);
			if (lenv.fail) {
				gringoParse(env, right);
			} else lenv
		}
		GSeq(left, right): {
			lenv = gringoParse(env, left);
			if (lenv.fail) GringoEnv(env with fail = true)
			else gringoParse(lenv, right);
		}
		GStar(term): {
			senv = gringoParse(env, term);
			if (senv.fail) {
				env;
			} else {
				gringoParse(senv, gterm);
			}
		}
		GPlus(term): {
			senv = gringoParse(env, term);
			if (senv.fail) {
				if (false && env.verbose) {
					println(^indent + "Could not parse plus");
				}
				senv;
			} else {
				gringoParse(senv, GStar(term));
			}
		}
		GOpt(term): {
			senv = gringoParse(env, term);
			if (senv.fail) {
				env;
			} else {
				senv;
			}
		}
		GError(term): {
			switch (term) {
				GNegate(nterm): {
					senv = gringoParse(env, nterm);
					if (senv.fail) {
						GringoEnv(senv with fail = true);
					} else {
						println("ERROR at " + i2s(env.i) + ": Superfluous " + makeGExplanation(nterm));
						senv;
					}
				}
				default: {
					senv = gringoParse(env, term);
					if (senv.fail) {
						println("ERROR at " + i2s(env.i) + ": Expected " + makeGExplanation(term));
						GringoEnv(senv with fail = false);
					} else {
						senv;
					}
				}
			}
		}
		GLower(term): {
			gringoParse(env, term);
		}
		GNegate(term): {
			senv = gringoParse(env, term);
			if (senv.fail) {
				GringoEnv(senv with fail = false);
			} else {
				if (env.verbose) {
					println(^indent + "Do not accept term");
				}
				GringoEnv(env with fail = true);
			}
		}
		GUnquote(term): {
			unquoteGTerm(env, term);
		}
		GString(text): {
			if (strContainsAt(env.input, env.i, text)) {
				if (env.verbose) {
					println(^indent + "Parsed '" + text + "'");
				}
				GringoEnv(
					env with i = env.i + strlen(text)
				)
			} else {
				if (false && env.verbose) {
					println(^indent + "Could not parse '" + text + "'");
				}
				GringoEnv(env with fail = true)
			}
		}
		GRange(lower, upper): {
			code = getCharCodeAt(env.input, env.i);
			if (lower <= code && code <= upper) {
				// println(^indent + "Parsed " + getCharAt(env.input, env.i));
				GringoEnv(
					env with i = env.i + 1
				)
			} else {
				GringoEnv(env with fail = true)
			}
		}
		GVar(id): {
			mterm = lookupTree(env.names, id);
			mterm ?? {
				oindent = ^indent;
				if (env.verbose) {
					indent := oindent + "  ";
					println(oindent + "Parse " + id + " with i=" + i2s(env.i));
				}

				rec = gringoParse(env, mterm);

				if (env.verbose) {
					if (rec.fail) {
						println(oindent + "FAILED rec " + id + " at " + i2s(rec.i));
					} else {
						println(oindent + "SUCCESS " + id + " at " + i2s(rec.i));
					}
					indent := oindent;
				}
				rec
			} : {
				println(^indent + "Unknown name: " + id);
				GringoEnv(env with fail = true);
			}
		}
		GEpsilon(): env;
	}
}

unquoteGTerm(env : GringoEnv, term : GTerm) -> GringoEnv {
	def = \ -> {
		starti = env.i;
		rec = gringoParse(env, term);
		if (rec.fail) {
			rec;
		} else {
			matched = substring(env.input, starti, rec.i - starti);
			GringoEnv(rec with output = env.action.addMatched(rec.output, matched))
		}
	}
	switch (term) {
		GString(text): GringoEnv(env with output = env.action.addVerbatim(env.output, text));
		GUnquote(nt): {
			switch (nt) {
				GString(text): {
					GringoEnv(env with output = env.action.addMatched(env.output, text));
				}
				GVar(id): {
					if (id == "pos") {
						GringoEnv(env with output = env.action.addVerbatim(env.output, i2s(env.i)));
					} else def();
				}
				default: {
					println("Does not support double unquote of anything but strings");
					env;
				}
			}
		}
		default: {
			def();
		}
	}
}

makeGExplanation(g : GTerm) -> string {
	switch (g) {
		GRule(id, term, body): makeGExplanation(body);
		GPrecedence(left, right): makeGExplanation(left) + " or " + makeGExplanation(right);
		GChoice(left, right): makeGExplanation(left) + " or " + makeGExplanation(right);
		GSeq(left, right): makeGExplanation(left);
		GStar(term): makeGExplanation(term);
		GPlus(term): makeGExplanation(term);
		GNegate(term): "not " + makeGExplanation(term);
		GOpt(term): makeGExplanation(term);
		GError(term): makeGExplanation(term);
		GLower(term): makeGExplanation(term);
		GUnquote(term): makeGExplanation(term);
		GString(text): toString(text);
		GRange(lower, upper): "range " + i2s(lower) + " to " + i2s(upper);
		GVar(id): id;
		GEpsilon(): "";
	}
}