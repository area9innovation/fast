import gringo/utils;
import gringo/gringo_pretty;
import ds/simplegraph;

export {
	// Does common subexpression elimination as well as dead rule removal
	reduceCommon(g : GTerm) -> GTerm;
}

reduceCommon(g : GTerm) -> GTerm {
	// We should do this from small rules up to bigger rules
	// so we do not have to iterate and maximize overlap
	rules : Tree<string, GTerm> = findRules(makeTree(), g);

	// Build the dependency graph of rules
	graph0 = dependencyGraph(rules);
	source = mainRule(g);
	// OK, we get a loop-free graph
	graph = simpleLoopFree(graph0, source);

	if (false) {
		dot = simpleGraph2dot(graph, "", [], \node -> [DotLabel(node)], \edge -> []);
		setFileContent("deps.dot", dot);
		{}
	}

	// Find a topological order, and start from the leaves
	order = reverseA(topoSortSimpleGraph(graph));
	// println(order);

	// Replace them in this order
	reduced = fold(order, g, \acc, rule -> {
		term = findRule(rule, acc);
		if (term != acc) {
			// println(rule);
			replaceTerm(term, GVar(rule, 0), rule, acc)
		} else acc
	});

	// Next, find identity rules

	inlined = fold(order, reduced, \acc, rule -> {
		term = findRule(rule, acc);
		if (term != acc) {
			switch (term) {
				GVar(r, p): {
					// It is just a basic assignment.
					// Let us rewrite
					replaceTerm(GVar(rule, 0), term, rule, acc)
				}
				default: acc;
			}
		} else acc;
	});

	// Finally, do dead code elimination
	deadCodeElimination(inlined);
}

// Remove all dead rules
deadCodeElimination(g : GTerm) -> GTerm {
	rules : Tree<string, GTerm> = findRules(makeTree(), g);

	// Build the dependency graph of rules
	graph = dependencyGraph(rules);
	source = mainRule(g);

	alive = insertSet(reachableClosureFromSimpleNode(graph, source), source);

	if (false) {
		dead = differenceSets(buildSet(getTreeKeys(rules)), alive);
		println("Dead rules: " + strGlue(set2array(dead), ", "));
	}
	
	removeDeadRules(alive, g);
}

dependencyGraph(rules : Tree<string, GTerm>) -> SimpleGraph<string, bool> {
	foldTree(rules, makeSimpleGraph(), \rule, term, acc -> {
		deps = ruleDependencies(makeSet(), term);
		foldSet(deps, acc, \acc2, dep -> {
			if (rule != dep) {
				addSimpleEdge(acc2, rule, dep, true, 0);
			} else acc2;
		})
	});
}

ruleDependencies(acc : Set<string>, g : GTerm) -> Set<string> {
	switch (g) {
		GRule(id, term): {
			println("Unexpected");
			acc;
		}

		GChoice(left, right): ruleDependencies(ruleDependencies(acc, left), right);
		GSeq(left, right): ruleDependencies(ruleDependencies(acc, left), right);
		GStar(term): ruleDependencies(acc, term);
		GPlus(term): ruleDependencies(acc, term);
		GOpt(term): ruleDependencies(acc, term);
		GNegate(term): ruleDependencies(acc, term);
		GUnquote(term): ruleDependencies(acc, term);
		GString(text): acc;
		GRange(lower, upper): acc;
		GVar(id, power): insertSet(acc, id);
	}
}

// Does basic replacement in the term
replaceTerm(find : GTerm, replace : GTerm, exceptInRule : string, g : GTerm) -> GTerm {
	if (g == find) replace
	else switch (g) {
		GRule(id, term): {
			if (exceptInRule == id) g
			else GRule(id, replaceTerm(find, replace, exceptInRule, term));
		}
		GChoice(left, right): GChoice(replaceTerm(find, replace, exceptInRule, left), replaceTerm(find, replace, exceptInRule, right)); 
		GSeq(left, right): GSeq(replaceTerm(find, replace, exceptInRule, left), replaceTerm(find, replace, exceptInRule, right));
		GStar(term): GStar(replaceTerm(find, replace, exceptInRule, term));
		GPlus(term): GPlus(replaceTerm(find, replace, exceptInRule, term));
		GOpt(term): GOpt(replaceTerm(find, replace, exceptInRule, term));
		GNegate(term): GNegate(replaceTerm(find, replace, exceptInRule, term));
		GUnquote(term): GUnquote(replaceTerm(find, replace, exceptInRule, term));
		GString(text): g;
		GRange(lower, upper): g;
		GVar(id, power): g;
	}
}

removeDeadRules(alive : Set<string>, g : GTerm) -> GTerm {
	switch (g) {
		GRule(id, term): g;
		GChoice(left, right): g;
		GSeq(left, right): {
			lrule = getGRule(left);
			if (lrule != "" && !containsSet(alive, lrule)) {
				// It is dead!
				removeDeadRules(alive, right);
			} else {
				rrule = getGRule(right);
				if (rrule != "" && !containsSet(alive, rrule)) {
					removeDeadRules(alive, left);	
				} else {
					GSeq(
						removeDeadRules(alive, left),
						removeDeadRules(alive, right),
					)
				}
			}
		}
		GStar(term): g;
		GPlus(term): g;
		GOpt(term): g;
		GNegate(term): g;
		GUnquote(term): g;
		GString(text): g;
		GRange(lower, upper): g;
		GVar(id, power): g;
	}
}

getGRule(g : GTerm) -> string {
	switch (g) {
		GRule(id, __): id;
		default: "";
	}
}
