import gringo/gringo_pretty;
import gringo/optimize;
import gringo/gringo_grammar;
import gringo/gringo_parse;
import gringo/precedence;
import gringo/cse;
import gringo/left_recursion;
import gringo/right_assoc;
import gringo/prefix;
import gringo/gringo_ast_actions;
import net/url_parameter;
import fs/filesystem;

main() {
	file = getUrlParameter("file");

	if (file != "") {
		grammar = gringoGrammar();
		text = getFileContent(file);

		env = doGringoParse(grammar, gringoAstAction, GringoAstAcc(makeList()), text, false, false);

		if (!env.fail) {
			println("Parsed " + file + " (" + i2s(env.i) + " chars) successfully.");
		}

		// OK, we have the result of the parse
		resGrammar = optimizeGTerm(getAstResult(env.output));

		out = getUrlParameter("out");
		if (out != "") {
			outfile = if (out == "1") changeFileExt(file, "") + "_grammar.flow" else out;
			println("Saving " + outfile);
			setFileContent(
				outfile,
				blueprint("
					// Generated by 
					// gringo file=%file% out=%out%
					import gringo/gringo_ast;

					export {
						%name%() -> GTerm;
					}

					%name%() -> GTerm {
						%grammar%
					}
				", [
					"file", file,
					"out", out,
					"name", changeFileExt(fileNameOnly(file), "") + "Grammar",
					"grammar", toString(resGrammar),
				])
			);
			{}
		}
		quit(b2i(env.fail));
	} else {
		println("
Usage:

	gringo file=path/grammar.gringo <options>

file=<file> gives the path to the Gringo file to work with.

out=1 or <file> compiles the grammar and saves it as a flow file.");
		quit(0);
	}
}

doGringoParse(grammar : GTerm, actions : GringoAction<?>, output : ?, text : string, verbose : bool, debugGrammar : bool) -> GringoEnv<?> {
	env = GringoEnv(text, makeTree(), 0, actions, output, false, verbose);

	if (false) {
		println("Original:");
		println(gterm2string(grammar));
	}

	prgrammar = expandPrecedence(grammar);
	if (false) {
		println("Precedence:");
		println(gterm2string(prgrammar));
	}

	egrammar = reduceCommon(prgrammar);
	if (false) {
		println("Expanded:");
		println(gterm2string(egrammar));
	}
	pgrammar = commonPrefix(egrammar);
	rgrammar = rightAssociateGTerm(pgrammar);
	lgrammar = rewriteLeftRecursion(rgrammar);
	// Do CSE again
	ogrammar = optimizeGTerm(reduceCommon(lgrammar));
	if (debugGrammar) {
		println("Fully optimized:");
		println(gterm2string(ogrammar));
	}

	if (true) {
		genv = gringoParse(env, ogrammar);

		println("");

		if (genv.fail) {
			println("Parsing failed");
		}
		remaining = strRight(env.input, genv.i);
		if (remaining != "") {
			println("Did not parse: " + remaining);
		}
		genv;
	} else {
		env;
	}
}
